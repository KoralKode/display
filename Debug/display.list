
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  08006870  08006870  00007870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd8  08007dd8  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007dd8  08007dd8  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007dd8  08007dd8  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dd8  08007dd8  00008dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ddc  08007ddc  00008ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007de0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000005c  08007e3c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08007e3c  00009510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cee3  00000000  00000000  00009085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe5  00000000  00000000  00015f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00017f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abc  00000000  00000000  00018d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018018  00000000  00000000  000197c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104df  00000000  00000000  000317dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c41d  00000000  00000000  00041cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce0d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d8  00000000  00000000  000ce11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d21f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006858 	.word	0x08006858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08006858 	.word	0x08006858

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	@ 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	@ 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	@ 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop
 8000f24:	0000      	movs	r0, r0
	...

08000f28 <si5351_set_frequency>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
err_t si5351_set_frequency(uint8_t output, uint32_t frequency) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b096      	sub	sp, #88	@ 0x58
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
    // Проверка допустимости выхода и частоты
    if (output > 2) return ERROR_INVALIDPARAMETER;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <si5351_set_frequency+0x16>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e1a0      	b.n	8001280 <si5351_set_frequency+0x358>
    if (frequency < 8000 || frequency > 150000000) return ERROR_INVALIDPARAMETER;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000f44:	d303      	bcc.n	8000f4e <si5351_set_frequency+0x26>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4a87      	ldr	r2, [pc, #540]	@ (8001168 <si5351_set_frequency+0x240>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d901      	bls.n	8000f52 <si5351_set_frequency+0x2a>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e196      	b.n	8001280 <si5351_set_frequency+0x358>

    // Определение R-делителя для частот < 500 кГц
    si5351RDiv_t r_div = SI5351_R_DIV_1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint32_t r_div_value = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (frequency < 500000) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	4a83      	ldr	r2, [pc, #524]	@ (800116c <si5351_set_frequency+0x244>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	f200 8087 	bhi.w	8001074 <si5351_set_frequency+0x14c>
        uint32_t min_freq = frequency;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	647b      	str	r3, [r7, #68]	@ 0x44
        while (min_freq < 500000 && r_div_value < 128) {
 8000f6a:	e007      	b.n	8000f7c <si5351_set_frequency+0x54>
            r_div_value *= 2;
 8000f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	64bb      	str	r3, [r7, #72]	@ 0x48
            min_freq = frequency * r_div_value;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	647b      	str	r3, [r7, #68]	@ 0x44
        while (min_freq < 500000 && r_div_value < 128) {
 8000f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800116c <si5351_set_frequency+0x244>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d802      	bhi.n	8000f8a <si5351_set_frequency+0x62>
 8000f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f88:	d9f0      	bls.n	8000f6c <si5351_set_frequency+0x44>
        }
        switch (r_div_value) {
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f8c:	2b80      	cmp	r3, #128	@ 0x80
 8000f8e:	d069      	beq.n	8001064 <si5351_set_frequency+0x13c>
 8000f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f92:	2b80      	cmp	r3, #128	@ 0x80
 8000f94:	d86a      	bhi.n	800106c <si5351_set_frequency+0x144>
 8000f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	d847      	bhi.n	800102c <si5351_set_frequency+0x104>
 8000f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d364      	bcc.n	800106c <si5351_set_frequency+0x144>
 8000fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	2b1e      	cmp	r3, #30
 8000fa8:	d860      	bhi.n	800106c <si5351_set_frequency+0x144>
 8000faa:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <si5351_set_frequency+0x88>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08001035 	.word	0x08001035
 8000fb4:	0800106d 	.word	0x0800106d
 8000fb8:	0800103d 	.word	0x0800103d
 8000fbc:	0800106d 	.word	0x0800106d
 8000fc0:	0800106d 	.word	0x0800106d
 8000fc4:	0800106d 	.word	0x0800106d
 8000fc8:	08001045 	.word	0x08001045
 8000fcc:	0800106d 	.word	0x0800106d
 8000fd0:	0800106d 	.word	0x0800106d
 8000fd4:	0800106d 	.word	0x0800106d
 8000fd8:	0800106d 	.word	0x0800106d
 8000fdc:	0800106d 	.word	0x0800106d
 8000fe0:	0800106d 	.word	0x0800106d
 8000fe4:	0800106d 	.word	0x0800106d
 8000fe8:	0800104d 	.word	0x0800104d
 8000fec:	0800106d 	.word	0x0800106d
 8000ff0:	0800106d 	.word	0x0800106d
 8000ff4:	0800106d 	.word	0x0800106d
 8000ff8:	0800106d 	.word	0x0800106d
 8000ffc:	0800106d 	.word	0x0800106d
 8001000:	0800106d 	.word	0x0800106d
 8001004:	0800106d 	.word	0x0800106d
 8001008:	0800106d 	.word	0x0800106d
 800100c:	0800106d 	.word	0x0800106d
 8001010:	0800106d 	.word	0x0800106d
 8001014:	0800106d 	.word	0x0800106d
 8001018:	0800106d 	.word	0x0800106d
 800101c:	0800106d 	.word	0x0800106d
 8001020:	0800106d 	.word	0x0800106d
 8001024:	0800106d 	.word	0x0800106d
 8001028:	08001055 	.word	0x08001055
 800102c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800102e:	2b40      	cmp	r3, #64	@ 0x40
 8001030:	d014      	beq.n	800105c <si5351_set_frequency+0x134>
 8001032:	e01b      	b.n	800106c <si5351_set_frequency+0x144>
            case 2:   r_div = SI5351_R_DIV_2;   break;
 8001034:	2301      	movs	r3, #1
 8001036:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800103a:	e01b      	b.n	8001074 <si5351_set_frequency+0x14c>
            case 4:   r_div = SI5351_R_DIV_4;   break;
 800103c:	2302      	movs	r3, #2
 800103e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001042:	e017      	b.n	8001074 <si5351_set_frequency+0x14c>
            case 8:   r_div = SI5351_R_DIV_8;   break;
 8001044:	2303      	movs	r3, #3
 8001046:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800104a:	e013      	b.n	8001074 <si5351_set_frequency+0x14c>
            case 16:  r_div = SI5351_R_DIV_16;  break;
 800104c:	2304      	movs	r3, #4
 800104e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001052:	e00f      	b.n	8001074 <si5351_set_frequency+0x14c>
            case 32:  r_div = SI5351_R_DIV_32;  break;
 8001054:	2305      	movs	r3, #5
 8001056:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800105a:	e00b      	b.n	8001074 <si5351_set_frequency+0x14c>
            case 64:  r_div = SI5351_R_DIV_64;  break;
 800105c:	2306      	movs	r3, #6
 800105e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001062:	e007      	b.n	8001074 <si5351_set_frequency+0x14c>
            case 128: r_div = SI5351_R_DIV_128; break;
 8001064:	2307      	movs	r3, #7
 8001066:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800106a:	e003      	b.n	8001074 <si5351_set_frequency+0x14c>
            default:  r_div = SI5351_R_DIV_1;   break;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001072:	bf00      	nop
        }
    }

    // Расчет частоты для мультисинта (до R-делителя)
    double f_ms = (double)frequency * r_div_value;
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f7ff f9ad 	bl	80003d4 <__aeabi_ui2d>
 800107a:	4604      	mov	r4, r0
 800107c:	460d      	mov	r5, r1
 800107e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001080:	f7ff f9a8 	bl	80003d4 <__aeabi_ui2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff fa1c 	bl	80004c8 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Подбор делителя мультисинта (8-900)
    uint32_t div = (uint32_t)(800000000.0 / f_ms); // Целевой делитель для ~800 МГц
 8001098:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800109c:	a12c      	add	r1, pc, #176	@ (adr r1, 8001150 <si5351_set_frequency+0x228>)
 800109e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010a2:	f7ff fb3b 	bl	800071c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fcbb 	bl	8000a28 <__aeabi_d2uiz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (div < 8) div = 8;
 80010b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d801      	bhi.n	80010c0 <si5351_set_frequency+0x198>
 80010bc:	2308      	movs	r3, #8
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
    if (div > 900) div = 900;
 80010c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010c2:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80010c6:	d902      	bls.n	80010ce <si5351_set_frequency+0x1a6>
 80010c8:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80010cc:	643b      	str	r3, [r7, #64]	@ 0x40

    // Расчет частоты PLL
    double f_pll = f_ms * div;
 80010ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80010d0:	f7ff f980 	bl	80003d4 <__aeabi_ui2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80010dc:	f7ff f9f4 	bl	80004c8 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    if (f_pll < 600000000 || f_pll > 900000000) {
 80010e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001158 <si5351_set_frequency+0x230>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80010f2:	f7ff fc5b 	bl	80009ac <__aeabi_dcmplt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <si5351_set_frequency+0x1e8>
 80010fc:	a318      	add	r3, pc, #96	@ (adr r3, 8001160 <si5351_set_frequency+0x238>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001106:	f7ff fc6f 	bl	80009e8 <__aeabi_dcmpgt>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d03f      	beq.n	8001190 <si5351_set_frequency+0x268>
        // Корректировка при выходе за пределы 600-900 МГц
        div = (f_pll < 600000000) ? (uint32_t)ceil(600000000.0 / f_ms) : 900;
 8001110:	a311      	add	r3, pc, #68	@ (adr r3, 8001158 <si5351_set_frequency+0x230>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800111a:	f7ff fc47 	bl	80009ac <__aeabi_dcmplt>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d025      	beq.n	8001170 <si5351_set_frequency+0x248>
 8001124:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001128:	a10b      	add	r1, pc, #44	@ (adr r1, 8001158 <si5351_set_frequency+0x230>)
 800112a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800112e:	f7ff faf5 	bl	800071c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f004 fbad 	bl	8005898 <ceil>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc6f 	bl	8000a28 <__aeabi_d2uiz>
 800114a:	4603      	mov	r3, r0
 800114c:	e012      	b.n	8001174 <si5351_set_frequency+0x24c>
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000
 8001154:	41c7d784 	.word	0x41c7d784
 8001158:	00000000 	.word	0x00000000
 800115c:	41c1e1a3 	.word	0x41c1e1a3
 8001160:	80000000 	.word	0x80000000
 8001164:	41cad274 	.word	0x41cad274
 8001168:	08f0d180 	.word	0x08f0d180
 800116c:	0007a11f 	.word	0x0007a11f
 8001170:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8001174:	643b      	str	r3, [r7, #64]	@ 0x40
        f_pll = f_ms * div;
 8001176:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001178:	f7ff f92c 	bl	80003d4 <__aeabi_ui2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001184:	f7ff f9a0 	bl	80004c8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    // Настройка PLL
    double f_xtal = (double)m_si5351Config.crystalFreq;
 8001190:	4b3f      	ldr	r3, [pc, #252]	@ (8001290 <si5351_set_frequency+0x368>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f91d 	bl	80003d4 <__aeabi_ui2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    uint32_t mult = (uint32_t)(f_pll / f_xtal);
 80011a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80011aa:	f7ff fab7 	bl	800071c <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fc37 	bl	8000a28 <__aeabi_d2uiz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    double fraction = (f_pll / f_xtal) - mult;
 80011be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80011c6:	f7ff faa9 	bl	800071c <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4614      	mov	r4, r2
 80011d0:	461d      	mov	r5, r3
 80011d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011d4:	f7ff f8fe 	bl	80003d4 <__aeabi_ui2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7fe ffba 	bl	8000158 <__aeabi_dsub>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t num = (uint32_t)round(fraction * 1048575.0); // 20-битный числитель
 80011ec:	a326      	add	r3, pc, #152	@ (adr r3, 8001288 <si5351_set_frequency+0x360>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011f6:	f7ff f967 	bl	80004c8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f004 fc45 	bl	8005a90 <round>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fc0b 	bl	8000a28 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	617b      	str	r3, [r7, #20]
    uint32_t denom = 1048575; // 20-битный знаменатель
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <si5351_set_frequency+0x36c>)
 8001218:	613b      	str	r3, [r7, #16]

    // Выбор PLL: выход 2 → PLL_B, остальные → PLL_A
    si5351PLL_t pll = (output == 2) ? SI5351_PLL_B : SI5351_PLL_A;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73fb      	strb	r3, [r7, #15]

    // Применение настроек
    ASSERT_STATUS(si5351_setupPLL(pll, mult, num, denom));
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	7bf8      	ldrb	r0, [r7, #15]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	f000 ff55 	bl	80020e0 <si5351_setupPLL>
 8001236:	4603      	mov	r3, r0
 8001238:	81bb      	strh	r3, [r7, #12]
 800123a:	89bb      	ldrh	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <si5351_set_frequency+0x31c>
 8001240:	89bb      	ldrh	r3, [r7, #12]
 8001242:	e01d      	b.n	8001280 <si5351_set_frequency+0x358>
    ASSERT_STATUS(si5351_setupMultisynth(output, pll, div, 0, 1)); // Целочисленный режим
 8001244:	7bf9      	ldrb	r1, [r7, #15]
 8001246:	79f8      	ldrb	r0, [r7, #7]
 8001248:	2301      	movs	r3, #1
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001250:	f001 f9a6 	bl	80025a0 <si5351_setupMultisynth>
 8001254:	4603      	mov	r3, r0
 8001256:	817b      	strh	r3, [r7, #10]
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <si5351_set_frequency+0x33a>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	e00e      	b.n	8001280 <si5351_set_frequency+0x358>
    ASSERT_STATUS(si5351_setupRdiv(output, r_div));
 8001262:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f910 	bl	8002490 <si5351_setupRdiv>
 8001270:	4603      	mov	r3, r0
 8001272:	813b      	strh	r3, [r7, #8]
 8001274:	893b      	ldrh	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <si5351_set_frequency+0x356>
 800127a:	893b      	ldrh	r3, [r7, #8]
 800127c:	e000      	b.n	8001280 <si5351_set_frequency+0x358>

    return ERROR_NONE;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3750      	adds	r7, #80	@ 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bdb0      	pop	{r4, r5, r7, pc}
 8001288:	00000000 	.word	0x00000000
 800128c:	412ffffe 	.word	0x412ffffe
 8001290:	20000194 	.word	0x20000194
 8001294:	000fffff 	.word	0x000fffff

08001298 <uint32_to_str>:



void uint32_to_str(uint32_t num, char *str) {
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d121      	bne.n	80012f0 <uint32_to_str+0x58>
        str[0] = '0';
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2230      	movs	r2, #48	@ 0x30
 80012b0:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e035      	b.n	8001328 <uint32_to_str+0x90>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <uint32_to_str+0x98>)
 80012c0:	fba3 2301 	umull	r2, r3, r3, r1
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	1aca      	subs	r2, r1, r3
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	61f9      	str	r1, [r7, #28]
 80012d8:	3230      	adds	r2, #48	@ 0x30
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	3320      	adds	r3, #32
 80012de:	443b      	add	r3, r7
 80012e0:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <uint32_to_str+0x98>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e2      	bne.n	80012bc <uint32_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 80012fa:	e00b      	b.n	8001314 <uint32_to_str+0x7c>
        str[j++] = tmp[i];
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	61ba      	str	r2, [r7, #24]
 8001302:	461a      	mov	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	f107 010c 	add.w	r1, r7, #12
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	440a      	add	r2, r1
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	61fa      	str	r2, [r7, #28]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dcee      	bgt.n	80012fc <uint32_to_str+0x64>
    }
    str[j] = '\0';
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
}
 8001328:	3724      	adds	r7, #36	@ 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	cccccccd 	.word	0xcccccccd

08001334 <array_to_uint32_t>:
uint32_t array_to_uint32_t(uint8_t arr[]){
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	uint32_t ans=0;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<6;++i){
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	e030      	b.n	80013a8 <array_to_uint32_t+0x74>
		ans+=arr[i]*(pow(10,i));
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f850 	bl	80003f4 <__aeabi_i2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f7ff f84b 	bl	80003f4 <__aeabi_i2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	4914      	ldr	r1, [pc, #80]	@ (80013b8 <array_to_uint32_t+0x84>)
 8001368:	f004 fa28 	bl	80057bc <pow>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7ff f8a8 	bl	80004c8 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4614      	mov	r4, r2
 800137e:	461d      	mov	r5, r3
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff f827 	bl	80003d4 <__aeabi_ui2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7fe fee5 	bl	800015c <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fb45 	bl	8000a28 <__aeabi_d2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<6;++i){
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	ddcb      	ble.n	8001346 <array_to_uint32_t+0x12>
	}
	return ans;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	40240000 	.word	0x40240000

080013bc <get_encoder>:

uint32_t get_encoder(){
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	return TIM1->CNT/4;//для энкодера использующегося в проекте
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <get_encoder+0x14>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	089b      	lsrs	r3, r3, #2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40012c00 	.word	0x40012c00

080013d4 <set_encoder>:

void set_encoder(uint32_t e){
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <set_encoder+0x1c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40012c00 	.word	0x40012c00

080013f4 <print_interface_mode0>:

void print_interface_mode0(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 80013fa:	2101      	movs	r1, #1
 80013fc:	2001      	movs	r0, #1
 80013fe:	f001 feab 	bl	8003158 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001402:	2000      	movs	r0, #0
 8001404:	f001 fd5e 	bl	8002ec4 <ssd1306_Fill>
	char buff[12];
	uint32_to_str(freq[0], buff);
 8001408:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <print_interface_mode0+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1d3a      	adds	r2, r7, #4
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff41 	bl	8001298 <uint32_to_str>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001416:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <print_interface_mode0+0xdc>)
 8001418:	1d38      	adds	r0, r7, #4
 800141a:	2201      	movs	r2, #1
 800141c:	9200      	str	r2, [sp, #0]
 800141e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001420:	f001 fe74 	bl	800310c <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8001424:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <print_interface_mode0+0xdc>)
 8001426:	2201      	movs	r2, #1
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142c:	4829      	ldr	r0, [pc, #164]	@ (80014d4 <print_interface_mode0+0xe0>)
 800142e:	f001 fe6d 	bl	800310c <ssd1306_WriteString>
	uint32_to_str(freq[1], buff);
 8001432:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <print_interface_mode0+0xd8>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	1d3a      	adds	r2, r7, #4
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff2c 	bl	8001298 <uint32_to_str>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001440:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <print_interface_mode0+0xdc>)
 8001442:	1d38      	adds	r0, r7, #4
 8001444:	2201      	movs	r2, #1
 8001446:	9200      	str	r2, [sp, #0]
 8001448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144a:	f001 fe5f 	bl	800310c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 800144e:	210a      	movs	r1, #10
 8001450:	2001      	movs	r0, #1
 8001452:	f001 fe81 	bl	8003158 <ssd1306_SetCursor>
	uint32_to_str(freq[2], buff);
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <print_interface_mode0+0xd8>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	1d3a      	adds	r2, r7, #4
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff1a 	bl	8001298 <uint32_to_str>
	ssd1306_WriteString(buff, Font_7x10, White);
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <print_interface_mode0+0xdc>)
 8001466:	1d38      	adds	r0, r7, #4
 8001468:	2201      	movs	r2, #1
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146e:	f001 fe4d 	bl	800310c <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <print_interface_mode0+0xdc>)
 8001474:	2201      	movs	r2, #1
 8001476:	9200      	str	r2, [sp, #0]
 8001478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147a:	4816      	ldr	r0, [pc, #88]	@ (80014d4 <print_interface_mode0+0xe0>)
 800147c:	f001 fe46 	bl	800310c <ssd1306_WriteString>
	if(choiced_channel==0){
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <print_interface_mode0+0xe4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <print_interface_mode0+0xa4>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <print_interface_mode0+0xdc>)
 800148a:	2201      	movs	r2, #1
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	4812      	ldr	r0, [pc, #72]	@ (80014dc <print_interface_mode0+0xe8>)
 8001492:	f001 fe3b 	bl	800310c <ssd1306_WriteString>
 8001496:	e012      	b.n	80014be <print_interface_mode0+0xca>
	}else if(choiced_channel==1){
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <print_interface_mode0+0xe4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d107      	bne.n	80014b0 <print_interface_mode0+0xbc>
		ssd1306_WriteString("ch1", Font_7x10, White);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <print_interface_mode0+0xdc>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	9200      	str	r2, [sp, #0]
 80014a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a8:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <print_interface_mode0+0xec>)
 80014aa:	f001 fe2f 	bl	800310c <ssd1306_WriteString>
 80014ae:	e006      	b.n	80014be <print_interface_mode0+0xca>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <print_interface_mode0+0xdc>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	9200      	str	r2, [sp, #0]
 80014b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b8:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <print_interface_mode0+0xf0>)
 80014ba:	f001 fe27 	bl	800310c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80014be:	f001 fd19 	bl	8002ef4 <ssd1306_UpdateScreen>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000016c 	.word	0x2000016c
 80014d0:	08007d68 	.word	0x08007d68
 80014d4:	08006870 	.word	0x08006870
 80014d8:	2000018f 	.word	0x2000018f
 80014dc:	08006874 	.word	0x08006874
 80014e0:	08006878 	.word	0x08006878
 80014e4:	0800687c 	.word	0x0800687c

080014e8 <print_interface_mode1>:


void print_interface_mode1(){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af02      	add	r7, sp, #8


	ssd1306_SetCursor(1, 1);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2001      	movs	r0, #1
 80014f2:	f001 fe31 	bl	8003158 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f001 fce4 	bl	8002ec4 <ssd1306_Fill>
	//char buff[12];
	if(choiced_num==0){
 80014fc:	4b4f      	ldr	r3, [pc, #316]	@ (800163c <print_interface_mode1+0x154>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d144      	bne.n	800158e <print_interface_mode1+0xa6>
		for(int i=5;i>=0;--i){
 8001504:	2305      	movs	r3, #5
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e01c      	b.n	8001544 <print_interface_mode1+0x5c>
			char t=48+number[choiced_channel][i];
 800150a:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <print_interface_mode1+0x158>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4a4c      	ldr	r2, [pc, #304]	@ (8001644 <print_interface_mode1+0x15c>)
 8001512:	460b      	mov	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	440b      	add	r3, r1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	441a      	add	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3330      	adds	r3, #48	@ 0x30
 8001524:	737b      	strb	r3, [r7, #13]
			char str[2] = {t, '\0'};
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	723b      	strb	r3, [r7, #8]
 800152a:	2300      	movs	r3, #0
 800152c:	727b      	strb	r3, [r7, #9]
			ssd1306_WriteString(str, Font_7x10, White);
 800152e:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <print_interface_mode1+0x160>)
 8001530:	f107 0008 	add.w	r0, r7, #8
 8001534:	2201      	movs	r2, #1
 8001536:	9200      	str	r2, [sp, #0]
 8001538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153a:	f001 fde7 	bl	800310c <ssd1306_WriteString>
		for(int i=5;i>=0;--i){
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3b01      	subs	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dadf      	bge.n	800150a <print_interface_mode1+0x22>
		}
		freq[choiced_channel]=array_to_uint32_t(number[choiced_channel]);
 800154a:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <print_interface_mode1+0x158>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4a3a      	ldr	r2, [pc, #232]	@ (8001644 <print_interface_mode1+0x15c>)
 800155a:	4413      	add	r3, r2
 800155c:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <print_interface_mode1+0x158>)
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	4614      	mov	r4, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fee6 	bl	8001334 <array_to_uint32_t>
 8001568:	4603      	mov	r3, r0
 800156a:	4a38      	ldr	r2, [pc, #224]	@ (800164c <print_interface_mode1+0x164>)
 800156c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		ssd1306_WriteString("   ", Font_7x10, White);
 8001570:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <print_interface_mode1+0x160>)
 8001572:	2201      	movs	r2, #1
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001578:	4835      	ldr	r0, [pc, #212]	@ (8001650 <print_interface_mode1+0x168>)
 800157a:	f001 fdc7 	bl	800310c <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <print_interface_mode1+0x16c>)
 8001580:	2201      	movs	r2, #1
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001586:	4834      	ldr	r0, [pc, #208]	@ (8001658 <print_interface_mode1+0x170>)
 8001588:	f001 fdc0 	bl	800310c <ssd1306_WriteString>
 800158c:	e04f      	b.n	800162e <print_interface_mode1+0x146>
	}else{
		for(int i=5;i>=0;--i){
 800158e:	2305      	movs	r3, #5
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	e03b      	b.n	800160c <print_interface_mode1+0x124>
			if(i==choiced_num-1){
 8001594:	4b29      	ldr	r3, [pc, #164]	@ (800163c <print_interface_mode1+0x154>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d119      	bne.n	80015d4 <print_interface_mode1+0xec>
				char t=48+number[choiced_channel][i];
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <print_interface_mode1+0x158>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4a27      	ldr	r2, [pc, #156]	@ (8001644 <print_interface_mode1+0x15c>)
 80015a8:	460b      	mov	r3, r1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	441a      	add	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3330      	adds	r3, #48	@ 0x30
 80015ba:	73bb      	strb	r3, [r7, #14]
				char str[2] = {t, '\0'};
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	713b      	strb	r3, [r7, #4]
 80015c0:	2300      	movs	r3, #0
 80015c2:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <print_interface_mode1+0x16c>)
 80015c6:	1d38      	adds	r0, r7, #4
 80015c8:	2201      	movs	r2, #1
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	f001 fd9d 	bl	800310c <ssd1306_WriteString>
 80015d2:	e018      	b.n	8001606 <print_interface_mode1+0x11e>
			}else{
				char t=48+number[choiced_channel][i];
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <print_interface_mode1+0x158>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4a1a      	ldr	r2, [pc, #104]	@ (8001644 <print_interface_mode1+0x15c>)
 80015dc:	460b      	mov	r3, r1
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	440b      	add	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	441a      	add	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3330      	adds	r3, #48	@ 0x30
 80015ee:	73fb      	strb	r3, [r7, #15]
				char str[2] = {t, '\0'};
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	703b      	strb	r3, [r7, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <print_interface_mode1+0x160>)
 80015fa:	4638      	mov	r0, r7
 80015fc:	2201      	movs	r2, #1
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001602:	f001 fd83 	bl	800310c <ssd1306_WriteString>
		for(int i=5;i>=0;--i){
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b01      	subs	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dac0      	bge.n	8001594 <print_interface_mode1+0xac>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <print_interface_mode1+0x160>)
 8001614:	2201      	movs	r2, #1
 8001616:	9200      	str	r2, [sp, #0]
 8001618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <print_interface_mode1+0x168>)
 800161c:	f001 fd76 	bl	800310c <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <print_interface_mode1+0x160>)
 8001622:	2201      	movs	r2, #1
 8001624:	9200      	str	r2, [sp, #0]
 8001626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001628:	480b      	ldr	r0, [pc, #44]	@ (8001658 <print_interface_mode1+0x170>)
 800162a:	f001 fd6f 	bl	800310c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 800162e:	f001 fc61 	bl	8002ef4 <ssd1306_UpdateScreen>
}
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	2000018e 	.word	0x2000018e
 8001640:	2000018f 	.word	0x2000018f
 8001644:	2000017c 	.word	0x2000017c
 8001648:	08007d68 	.word	0x08007d68
 800164c:	2000016c 	.word	0x2000016c
 8001650:	08006870 	.word	0x08006870
 8001654:	08007d74 	.word	0x08007d74
 8001658:	08006880 	.word	0x08006880

0800165c <int_mode_0>:

void int_mode_0(){
 800165c:	b598      	push	{r3, r4, r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001660:	2101      	movs	r1, #1
 8001662:	4827      	ldr	r0, [pc, #156]	@ (8001700 <int_mode_0+0xa4>)
 8001664:	f002 f8b0 	bl	80037c8 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <int_mode_0+0x18>
		choice=1;
 800166e:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <int_mode_0+0xa8>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8001674:	bf00      	nop
 8001676:	2101      	movs	r1, #1
 8001678:	4821      	ldr	r0, [pc, #132]	@ (8001700 <int_mode_0+0xa4>)
 800167a:	f002 f8a5 	bl	80037c8 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f8      	beq.n	8001676 <int_mode_0+0x1a>
	HAL_Delay(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f001 fe13 	bl	80032b0 <HAL_Delay>
	if(choice==0 && enc!=get_encoder()){
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <int_mode_0+0xa8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d11e      	bne.n	80016d0 <int_mode_0+0x74>
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <int_mode_0+0xac>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461c      	mov	r4, r3
 8001698:	f7ff fe90 	bl	80013bc <get_encoder>
 800169c:	4603      	mov	r3, r0
 800169e:	429c      	cmp	r4, r3
 80016a0:	d016      	beq.n	80016d0 <int_mode_0+0x74>
		enc=get_encoder();
 80016a2:	f7ff fe8b 	bl	80013bc <get_encoder>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <int_mode_0+0xac>)
 80016ac:	701a      	strb	r2, [r3, #0]
		if(enc>2){
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <int_mode_0+0xac>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d905      	bls.n	80016c2 <int_mode_0+0x66>
			enc=0;
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <int_mode_0+0xac>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
			set_encoder(0);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fe89 	bl	80013d4 <set_encoder>
		}else if(enc<0){
			enc=2;
			set_encoder(2);
		}
		choiced_channel=enc;
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <int_mode_0+0xac>)
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <int_mode_0+0xb0>)
 80016c8:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 80016ca:	f7ff fe93 	bl	80013f4 <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 80016ce:	e014      	b.n	80016fa <int_mode_0+0x9e>
	}else if(choice==1){
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <int_mode_0+0xa8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d110      	bne.n	80016fa <int_mode_0+0x9e>
		enc=1;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <int_mode_0+0xac>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
		set_encoder(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fe78 	bl	80013d4 <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <int_mode_0+0xb4>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <int_mode_0+0xb8>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
		choice=0;
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <int_mode_0+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 80016f6:	f7ff fef7 	bl	80014e8 <print_interface_mode1>
}
 80016fa:	bf00      	nop
 80016fc:	bd98      	pop	{r3, r4, r7, pc}
 80016fe:	bf00      	nop
 8001700:	40010800 	.word	0x40010800
 8001704:	20000178 	.word	0x20000178
 8001708:	20000168 	.word	0x20000168
 800170c:	2000018f 	.word	0x2000018f
 8001710:	2000018e 	.word	0x2000018e
 8001714:	20000190 	.word	0x20000190

08001718 <increase_left>:

void increase_left(){
 8001718:	b490      	push	{r4, r7}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	for(int i=choiced_num;i<7;++i){
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <increase_left+0x94>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	e039      	b.n	800179a <increase_left+0x82>
		if(number[choiced_channel][i-1]==9){
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <increase_left+0x98>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	1e5a      	subs	r2, r3, #1
 8001730:	4920      	ldr	r1, [pc, #128]	@ (80017b4 <increase_left+0x9c>)
 8001732:	4603      	mov	r3, r0
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4403      	add	r3, r0
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	440b      	add	r3, r1
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b09      	cmp	r3, #9
 8001742:	d10e      	bne.n	8001762 <increase_left+0x4a>
			number[choiced_channel][i-1]=0;
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <increase_left+0x98>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	4919      	ldr	r1, [pc, #100]	@ (80017b4 <increase_left+0x9c>)
 8001750:	4603      	mov	r3, r0
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4403      	add	r3, r0
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	440b      	add	r3, r1
 800175a:	4413      	add	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e018      	b.n	8001794 <increase_left+0x7c>
		}else{
			number[choiced_channel][i-1]++;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <increase_left+0x98>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1e59      	subs	r1, r3, #1
 800176c:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <increase_left+0x9c>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4403      	add	r3, r0
 8001778:	440b      	add	r3, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2dc      	uxtb	r4, r3
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <increase_left+0x9c>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4403      	add	r3, r0
 800178c:	440b      	add	r3, r1
 800178e:	4622      	mov	r2, r4
 8001790:	701a      	strb	r2, [r3, #0]
			break;
 8001792:	e006      	b.n	80017a2 <increase_left+0x8a>
	for(int i=choiced_num;i<7;++i){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b06      	cmp	r3, #6
 800179e:	ddc2      	ble.n	8001726 <increase_left+0xe>
		}
	}
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc90      	pop	{r4, r7}
 80017aa:	4770      	bx	lr
 80017ac:	2000018e 	.word	0x2000018e
 80017b0:	2000018f 	.word	0x2000018f
 80017b4:	2000017c 	.word	0x2000017c

080017b8 <decrease_left>:

void decrease_left() {
 80017b8:	b490      	push	{r4, r7}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
    int i = choiced_num;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <decrease_left+0xa0>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	607b      	str	r3, [r7, #4]
    while (i < 7) {
 80017c4:	e03e      	b.n	8001844 <decrease_left+0x8c>
        if (number[choiced_channel][i-1] == 0) {
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <decrease_left+0xa4>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	4923      	ldr	r1, [pc, #140]	@ (8001860 <decrease_left+0xa8>)
 80017d2:	4603      	mov	r3, r0
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4403      	add	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	440b      	add	r3, r1
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d111      	bne.n	8001808 <decrease_left+0x50>
            number[choiced_channel][i-1] = 9;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <decrease_left+0xa4>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	491c      	ldr	r1, [pc, #112]	@ (8001860 <decrease_left+0xa8>)
 80017f0:	4603      	mov	r3, r0
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4403      	add	r3, r0
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	440b      	add	r3, r1
 80017fa:	4413      	add	r3, r2
 80017fc:	2209      	movs	r2, #9
 80017fe:	701a      	strb	r2, [r3, #0]
            i++; // Переходим к следующей цифре слева
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	e01d      	b.n	8001844 <decrease_left+0x8c>
        } else {
            number[choiced_channel][i-1] -= 1;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <decrease_left+0xa4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	4913      	ldr	r1, [pc, #76]	@ (8001860 <decrease_left+0xa8>)
 8001814:	4603      	mov	r3, r0
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4403      	add	r3, r0
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	440b      	add	r3, r1
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a0e      	ldr	r2, [pc, #56]	@ (800185c <decrease_left+0xa4>)
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	4610      	mov	r0, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	3a01      	subs	r2, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	b2dc      	uxtb	r4, r3
 8001830:	490b      	ldr	r1, [pc, #44]	@ (8001860 <decrease_left+0xa8>)
 8001832:	4603      	mov	r3, r0
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4403      	add	r3, r0
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	440b      	add	r3, r1
 800183c:	4413      	add	r3, r2
 800183e:	4622      	mov	r2, r4
 8001840:	701a      	strb	r2, [r3, #0]
            break;
 8001842:	e003      	b.n	800184c <decrease_left+0x94>
    while (i < 7) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b06      	cmp	r3, #6
 8001848:	ddbd      	ble.n	80017c6 <decrease_left+0xe>
        }
    }
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bc90      	pop	{r4, r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	2000018e 	.word	0x2000018e
 800185c:	2000018f 	.word	0x2000018f
 8001860:	2000017c 	.word	0x2000017c

08001864 <min_freq>:

void min_freq(){
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	number[choiced_channel][0]=8;
 8001868:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <min_freq+0x9c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <min_freq+0xa0>)
 8001870:	460b      	mov	r3, r1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	440b      	add	r3, r1
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	2208      	movs	r2, #8
 800187c:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][1]=0;
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <min_freq+0x9c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <min_freq+0xa0>)
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3301      	adds	r3, #1
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][2]=0;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <min_freq+0x9c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <min_freq+0xa0>)
 800189e:	460b      	mov	r3, r1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	440b      	add	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	3302      	adds	r3, #2
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][3]=0;
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <min_freq+0x9c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <min_freq+0xa0>)
 80018b6:	460b      	mov	r3, r1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	440b      	add	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	3303      	adds	r3, #3
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][4]=0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <min_freq+0x9c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <min_freq+0xa0>)
 80018ce:	460b      	mov	r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	440b      	add	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][5]=0;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <min_freq+0x9c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <min_freq+0xa0>)
 80018e6:	460b      	mov	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	440b      	add	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3305      	adds	r3, #5
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]

}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000018f 	.word	0x2000018f
 8001904:	2000017c 	.word	0x2000017c

08001908 <max_freq>:

void max_freq(){
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	number[choiced_channel][0]=0;
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <max_freq+0x9c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <max_freq+0xa0>)
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][1]=0;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <max_freq+0x9c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <max_freq+0xa0>)
 800192a:	460b      	mov	r3, r1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	440b      	add	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	3301      	adds	r3, #1
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][2]=0;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <max_freq+0x9c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <max_freq+0xa0>)
 8001942:	460b      	mov	r3, r1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	440b      	add	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3302      	adds	r3, #2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][3]=0;
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <max_freq+0x9c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <max_freq+0xa0>)
 800195a:	460b      	mov	r3, r1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	3303      	adds	r3, #3
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][4]=6;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <max_freq+0x9c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <max_freq+0xa0>)
 8001972:	460b      	mov	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	2206      	movs	r2, #6
 8001980:	701a      	strb	r2, [r3, #0]
	number[choiced_channel][5]=1;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <max_freq+0x9c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <max_freq+0xa0>)
 800198a:	460b      	mov	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	440b      	add	r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	3305      	adds	r3, #5
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000018f 	.word	0x2000018f
 80019a8:	2000017c 	.word	0x2000017c

080019ac <int_mode_1>:

void int_mode_1(){
 80019ac:	b598      	push	{r3, r4, r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 80019b0:	2101      	movs	r1, #1
 80019b2:	4892      	ldr	r0, [pc, #584]	@ (8001bfc <int_mode_1+0x250>)
 80019b4:	f001 ff08 	bl	80037c8 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d12c      	bne.n	8001a18 <int_mode_1+0x6c>
		if(choice==0){
 80019be:	4b90      	ldr	r3, [pc, #576]	@ (8001c00 <int_mode_1+0x254>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d11c      	bne.n	8001a00 <int_mode_1+0x54>

			choice=1;
 80019c6:	4b8e      	ldr	r3, [pc, #568]	@ (8001c00 <int_mode_1+0x254>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 80019cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001c04 <int_mode_1+0x258>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d021      	beq.n	8001a18 <int_mode_1+0x6c>
				enc=number[choiced_channel][choiced_num-1];
 80019d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001c08 <int_mode_1+0x25c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	4b8a      	ldr	r3, [pc, #552]	@ (8001c04 <int_mode_1+0x258>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	498a      	ldr	r1, [pc, #552]	@ (8001c0c <int_mode_1+0x260>)
 80019e2:	4603      	mov	r3, r0
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4403      	add	r3, r0
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	440b      	add	r3, r1
 80019ec:	4413      	add	r3, r2
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	4b87      	ldr	r3, [pc, #540]	@ (8001c10 <int_mode_1+0x264>)
 80019f2:	701a      	strb	r2, [r3, #0]
				set_encoder(enc);
 80019f4:	4b86      	ldr	r3, [pc, #536]	@ (8001c10 <int_mode_1+0x264>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fceb 	bl	80013d4 <set_encoder>
 80019fe:	e00b      	b.n	8001a18 <int_mode_1+0x6c>
			}
		}else{
			choice=0;
 8001a00:	4b7f      	ldr	r3, [pc, #508]	@ (8001c00 <int_mode_1+0x254>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
			enc=choiced_num;
 8001a06:	4b7f      	ldr	r3, [pc, #508]	@ (8001c04 <int_mode_1+0x258>)
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	4b81      	ldr	r3, [pc, #516]	@ (8001c10 <int_mode_1+0x264>)
 8001a0c:	701a      	strb	r2, [r3, #0]
			set_encoder(enc);
 8001a0e:	4b80      	ldr	r3, [pc, #512]	@ (8001c10 <int_mode_1+0x264>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fcde 	bl	80013d4 <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8001a18:	bf00      	nop
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4877      	ldr	r0, [pc, #476]	@ (8001bfc <int_mode_1+0x250>)
 8001a1e:	f001 fed3 	bl	80037c8 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f8      	beq.n	8001a1a <int_mode_1+0x6e>
	HAL_Delay(10);
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f001 fc41 	bl	80032b0 <HAL_Delay>
	if(choice==0 && enc!=get_encoder()){
 8001a2e:	4b74      	ldr	r3, [pc, #464]	@ (8001c00 <int_mode_1+0x254>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d11e      	bne.n	8001a74 <int_mode_1+0xc8>
 8001a36:	4b76      	ldr	r3, [pc, #472]	@ (8001c10 <int_mode_1+0x264>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	f7ff fcbe 	bl	80013bc <get_encoder>
 8001a40:	4603      	mov	r3, r0
 8001a42:	429c      	cmp	r4, r3
 8001a44:	d016      	beq.n	8001a74 <int_mode_1+0xc8>
		enc=get_encoder();
 8001a46:	f7ff fcb9 	bl	80013bc <get_encoder>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b70      	ldr	r3, [pc, #448]	@ (8001c10 <int_mode_1+0x264>)
 8001a50:	701a      	strb	r2, [r3, #0]
		if(enc>5000){
			set_encoder(6);
			enc=6;
		}
		else if(enc>6){
 8001a52:	4b6f      	ldr	r3, [pc, #444]	@ (8001c10 <int_mode_1+0x264>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d905      	bls.n	8001a66 <int_mode_1+0xba>
			enc=0;
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <int_mode_1+0x264>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			set_encoder(0);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fcb7 	bl	80013d4 <set_encoder>
		}
		choiced_num=enc;
 8001a66:	4b6a      	ldr	r3, [pc, #424]	@ (8001c10 <int_mode_1+0x264>)
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	4b66      	ldr	r3, [pc, #408]	@ (8001c04 <int_mode_1+0x258>)
 8001a6c:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8001a6e:	f7ff fd3b 	bl	80014e8 <print_interface_mode1>
			}
			print_interface_mode1();

		}
	}
}
 8001a72:	e0c1      	b.n	8001bf8 <int_mode_1+0x24c>
	}else if(choice==1){
 8001a74:	4b62      	ldr	r3, [pc, #392]	@ (8001c00 <int_mode_1+0x254>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 80bd 	bne.w	8001bf8 <int_mode_1+0x24c>
		if(choiced_num==0){
 8001a7e:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <int_mode_1+0x258>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d15b      	bne.n	8001b3e <int_mode_1+0x192>
			choice=0;
 8001a86:	4b5e      	ldr	r3, [pc, #376]	@ (8001c00 <int_mode_1+0x254>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 8001a8c:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <int_mode_1+0x268>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
			freq[choiced_channel]=array_to_uint32_t(number[choiced_channel]);
 8001a92:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <int_mode_1+0x25c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c0c <int_mode_1+0x260>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <int_mode_1+0x25c>)
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fc42 	bl	8001334 <array_to_uint32_t>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a59      	ldr	r2, [pc, #356]	@ (8001c18 <int_mode_1+0x26c>)
 8001ab4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<8){
 8001ab8:	4b53      	ldr	r3, [pc, #332]	@ (8001c08 <int_mode_1+0x25c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b56      	ldr	r3, [pc, #344]	@ (8001c18 <int_mode_1+0x26c>)
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d809      	bhi.n	8001adc <int_mode_1+0x130>
				freq[choiced_channel]=8;
 8001ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c08 <int_mode_1+0x25c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4b52      	ldr	r3, [pc, #328]	@ (8001c18 <int_mode_1+0x26c>)
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 8001ad6:	f7ff fec5 	bl	8001864 <min_freq>
 8001ada:	e011      	b.n	8001b00 <int_mode_1+0x154>
			}else if(freq[choiced_channel]>160000){
 8001adc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <int_mode_1+0x25c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c18 <int_mode_1+0x26c>)
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <int_mode_1+0x270>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d908      	bls.n	8001b00 <int_mode_1+0x154>
				freq[choiced_channel]=160000;
 8001aee:	4b46      	ldr	r3, [pc, #280]	@ (8001c08 <int_mode_1+0x25c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <int_mode_1+0x26c>)
 8001af6:	4a49      	ldr	r2, [pc, #292]	@ (8001c1c <int_mode_1+0x270>)
 8001af8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 8001afc:	f7ff ff04 	bl	8001908 <max_freq>
			si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);
 8001b00:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <int_mode_1+0x25c>)
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <int_mode_1+0x25c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <int_mode_1+0x26c>)
 8001b0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7ff fa04 	bl	8000f28 <si5351_set_frequency>
			si5351_enableOutputs(0xFF);
 8001b20:	20ff      	movs	r0, #255	@ 0xff
 8001b22:	f000 ff81 	bl	8002a28 <si5351_enableOutputs>
			enc=choiced_channel;
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <int_mode_1+0x25c>)
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <int_mode_1+0x264>)
 8001b2c:	701a      	strb	r2, [r3, #0]
			set_encoder(enc);
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <int_mode_1+0x264>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc4e 	bl	80013d4 <set_encoder>
			print_interface_mode0();
 8001b38:	f7ff fc5c 	bl	80013f4 <print_interface_mode0>
}
 8001b3c:	e05c      	b.n	8001bf8 <int_mode_1+0x24c>
		}else if(enc!=get_encoder()){
 8001b3e:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <int_mode_1+0x264>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461c      	mov	r4, r3
 8001b44:	f7ff fc3a 	bl	80013bc <get_encoder>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	429c      	cmp	r4, r3
 8001b4c:	d054      	beq.n	8001bf8 <int_mode_1+0x24c>
			if(get_encoder()>5000){
 8001b4e:	f7ff fc35 	bl	80013bc <get_encoder>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d917      	bls.n	8001b8c <int_mode_1+0x1e0>
				enc=9;
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <int_mode_1+0x264>)
 8001b5e:	2209      	movs	r2, #9
 8001b60:	701a      	strb	r2, [r3, #0]
				set_encoder(9);
 8001b62:	2009      	movs	r0, #9
 8001b64:	f7ff fc36 	bl	80013d4 <set_encoder>
				number[choiced_channel][choiced_num-1]=0;
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <int_mode_1+0x25c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <int_mode_1+0x258>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	1e5a      	subs	r2, r3, #1
 8001b74:	4925      	ldr	r1, [pc, #148]	@ (8001c0c <int_mode_1+0x260>)
 8001b76:	4603      	mov	r3, r0
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4403      	add	r3, r0
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	4413      	add	r3, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
				decrease_left();
 8001b86:	f7ff fe17 	bl	80017b8 <decrease_left>
 8001b8a:	e033      	b.n	8001bf4 <int_mode_1+0x248>
			else if(get_encoder()>9){
 8001b8c:	f7ff fc16 	bl	80013bc <get_encoder>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	d917      	bls.n	8001bc6 <int_mode_1+0x21a>
				enc=0;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <int_mode_1+0x264>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
				set_encoder(0);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fc19 	bl	80013d4 <set_encoder>
				number[choiced_channel][choiced_num-1]=9;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <int_mode_1+0x25c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <int_mode_1+0x258>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	4917      	ldr	r1, [pc, #92]	@ (8001c0c <int_mode_1+0x260>)
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4403      	add	r3, r0
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	4413      	add	r3, r2
 8001bbc:	2209      	movs	r2, #9
 8001bbe:	701a      	strb	r2, [r3, #0]
				increase_left();
 8001bc0:	f7ff fdaa 	bl	8001718 <increase_left>
 8001bc4:	e016      	b.n	8001bf4 <int_mode_1+0x248>
				enc=get_encoder();
 8001bc6:	f7ff fbf9 	bl	80013bc <get_encoder>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <int_mode_1+0x264>)
 8001bd0:	701a      	strb	r2, [r3, #0]
				number[choiced_channel][choiced_num-1]=enc;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <int_mode_1+0x25c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <int_mode_1+0x258>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <int_mode_1+0x264>)
 8001be0:	781c      	ldrb	r4, [r3, #0]
 8001be2:	490a      	ldr	r1, [pc, #40]	@ (8001c0c <int_mode_1+0x260>)
 8001be4:	4603      	mov	r3, r0
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4403      	add	r3, r0
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	440b      	add	r3, r1
 8001bee:	4413      	add	r3, r2
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	701a      	strb	r2, [r3, #0]
			print_interface_mode1();
 8001bf4:	f7ff fc78 	bl	80014e8 <print_interface_mode1>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd98      	pop	{r3, r4, r7, pc}
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	20000178 	.word	0x20000178
 8001c04:	2000018e 	.word	0x2000018e
 8001c08:	2000018f 	.word	0x2000018f
 8001c0c:	2000017c 	.word	0x2000017c
 8001c10:	20000168 	.word	0x20000168
 8001c14:	20000190 	.word	0x20000190
 8001c18:	2000016c 	.word	0x2000016c
 8001c1c:	00027100 	.word	0x00027100

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f001 fae2 	bl	80031ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f862 	bl	8001cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f000 f95a 	bl	8001ee4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c30:	f000 f8a4 	bl	8001d7c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001c34:	f000 f8fe 	bl	8001e34 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001c38:	f000 f8ce 	bl	8001dd8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c3c:	213c      	movs	r1, #60	@ 0x3c
 8001c3e:	4824      	ldr	r0, [pc, #144]	@ (8001cd0 <main+0xb0>)
 8001c40:	f003 fc0c 	bl	800545c <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001c44:	f001 f8d4 	bl	8002df0 <ssd1306_Init>
  si5351_Init();
 8001c48:	f000 f994 	bl	8001f74 <si5351_Init>
  enc=0;//значение энкодера с учётом дребзга
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <main+0xb4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
  set_encoder(0);//выставление энкодера в 0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fbbe 	bl	80013d4 <set_encoder>
  freq[0]=8;//начальная минимальная частота канала 0
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <main+0xb8>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	601a      	str	r2, [r3, #0]
  freq[1]=8;//начальная минимальная частота канала 1
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <main+0xb8>)
 8001c60:	2208      	movs	r2, #8
 8001c62:	605a      	str	r2, [r3, #4]
  freq[2]=8;//начальная минимальная частота канала 2
 8001c64:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <main+0xb8>)
 8001c66:	2208      	movs	r2, #8
 8001c68:	609a      	str	r2, [r3, #8]
  choice=0;//переменная для считывания был ли нажат энкодер
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <main+0xbc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
  number[0][0]=8;//массив значения частоты в кГц канала 0
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <main+0xc0>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	701a      	strb	r2, [r3, #0]
  number[1][0]=8;//массив значения частоты в кГц канала 1
 8001c76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <main+0xc0>)
 8001c78:	2208      	movs	r2, #8
 8001c7a:	719a      	strb	r2, [r3, #6]
  number[2][0]=8;//массив значения частоты в кГц канала 2
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <main+0xc0>)
 8001c7e:	2208      	movs	r2, #8
 8001c80:	731a      	strb	r2, [r3, #12]
  choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <main+0xc4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
  choiced_channel=0;// номер выбранного канала
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <main+0xc8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
  interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <main+0xcc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
  si5351_set_frequency(0, 8000);//устанвливаем частоту в минимальную
 8001c94:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff f945 	bl	8000f28 <si5351_set_frequency>
  si5351_set_frequency(1, 8000);//устанвливаем частоту в минимальную
 8001c9e:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff f940 	bl	8000f28 <si5351_set_frequency>
  si5351_set_frequency(2, 8000);//устанвливаем частоту в минимальную
 8001ca8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8001cac:	2002      	movs	r0, #2
 8001cae:	f7ff f93b 	bl	8000f28 <si5351_set_frequency>
  si5351_enableOutputs(0xFF);//включаем все выходы
 8001cb2:	20ff      	movs	r0, #255	@ 0xff
 8001cb4:	f000 feb8 	bl	8002a28 <si5351_enableOutputs>
  print_interface_mode0();//выводим на экран начальный интерфейс
 8001cb8:	f7ff fb9c 	bl	80013f4 <print_interface_mode0>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(interface_mode==0){
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <main+0xcc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <main+0xaa>
		  int_mode_0();
 8001cc4:	f7ff fcca 	bl	800165c <int_mode_0>
 8001cc8:	e7f8      	b.n	8001cbc <main+0x9c>
	  }else{
		  int_mode_1();
 8001cca:	f7ff fe6f 	bl	80019ac <int_mode_1>
	  if(interface_mode==0){
 8001cce:	e7f5      	b.n	8001cbc <main+0x9c>
 8001cd0:	20000120 	.word	0x20000120
 8001cd4:	20000168 	.word	0x20000168
 8001cd8:	2000016c 	.word	0x2000016c
 8001cdc:	20000178 	.word	0x20000178
 8001ce0:	2000017c 	.word	0x2000017c
 8001ce4:	2000018e 	.word	0x2000018e
 8001ce8:	2000018f 	.word	0x2000018f
 8001cec:	20000190 	.word	0x20000190

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b090      	sub	sp, #64	@ 0x40
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	2228      	movs	r2, #40	@ 0x28
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fd2a 	bl	8005758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d24:	2302      	movs	r3, #2
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 fef1 	bl	8004b20 <HAL_RCC_OscConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d44:	f000 f910 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d48:	230f      	movs	r3, #15
 8001d4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2102      	movs	r1, #2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f95e 	bl	8005024 <HAL_RCC_ClockConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d6e:	f000 f8fb 	bl	8001f68 <Error_Handler>
  }
}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	@ 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <MX_I2C1_Init+0x54>)
 8001d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d88:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <MX_I2C1_Init+0x58>)
 8001d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <MX_I2C1_Init+0x50>)
 8001dba:	f001 fd1d 	bl	80037f8 <HAL_I2C_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dc4:	f000 f8d0 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000078 	.word	0x20000078
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	000186a0 	.word	0x000186a0

08001dd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001dde:	4a13      	ldr	r2, [pc, #76]	@ (8001e2c <MX_I2C2_Init+0x54>)
 8001de0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001de4:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <MX_I2C2_Init+0x58>)
 8001de6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001df6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e14:	4804      	ldr	r0, [pc, #16]	@ (8001e28 <MX_I2C2_Init+0x50>)
 8001e16:	f001 fcef 	bl	80037f8 <HAL_I2C_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e20:	f000 f8a2 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200000cc 	.word	0x200000cc
 8001e2c:	40005800 	.word	0x40005800
 8001e30:	000186a0 	.word	0x000186a0

08001e34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2224      	movs	r2, #36	@ 0x24
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fc88 	bl	8005758 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e52:	4a23      	ldr	r2, [pc, #140]	@ (8001ee0 <MX_TIM1_Init+0xac>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001ea8:	f003 fa36 	bl	8005318 <HAL_TIM_Encoder_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001eb2:	f000 f859 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4806      	ldr	r0, [pc, #24]	@ (8001edc <MX_TIM1_Init+0xa8>)
 8001ec4:	f003 fbea 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ece:	f000 f84b 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	@ 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000120 	.word	0x20000120
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <MX_GPIO_Init+0x7c>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <MX_GPIO_Init+0x80>)
 8001f54:	f001 fab4 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <Error_Handler+0x8>

08001f74 <si5351_Init>:
    Initializes I2C and configures the breakout (call this function before
    doing anything else)
*/
/**************************************************************************/
err_t si5351_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0

	/*!
	    Constructor
	*/
	  m_si5351Config.initialised     = 0;
 8001f7a:	4b57      	ldr	r3, [pc, #348]	@ (80020d8 <si5351_Init+0x164>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 8001f80:	4b55      	ldr	r3, [pc, #340]	@ (80020d8 <si5351_Init+0x164>)
 8001f82:	4a56      	ldr	r2, [pc, #344]	@ (80020dc <si5351_Init+0x168>)
 8001f84:	605a      	str	r2, [r3, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 8001f86:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <si5351_Init+0x164>)
 8001f88:	22c0      	movs	r2, #192	@ 0xc0
 8001f8a:	721a      	strb	r2, [r3, #8]
	  m_si5351Config.crystalPPM      = 30;
 8001f8c:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <si5351_Init+0x164>)
 8001f8e:	221e      	movs	r2, #30
 8001f90:	60da      	str	r2, [r3, #12]
	  m_si5351Config.plla_configured = 0;
 8001f92:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <si5351_Init+0x164>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	741a      	strb	r2, [r3, #16]
	  m_si5351Config.plla_freq       = 0;
 8001f98:	4b4f      	ldr	r3, [pc, #316]	@ (80020d8 <si5351_Init+0x164>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
	  m_si5351Config.pllb_configured = 0;
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <si5351_Init+0x164>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	761a      	strb	r2, [r3, #24]
	  m_si5351Config.pllb_freq       = 0;
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80020d8 <si5351_Init+0x164>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
	  m_si5351Config.ms0_freq		 = 0;
 8001faa:	4b4b      	ldr	r3, [pc, #300]	@ (80020d8 <si5351_Init+0x164>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
	  m_si5351Config.ms1_freq		 = 0;
 8001fb0:	4b49      	ldr	r3, [pc, #292]	@ (80020d8 <si5351_Init+0x164>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
	  m_si5351Config.ms2_freq		 = 0;
 8001fb6:	4b48      	ldr	r3, [pc, #288]	@ (80020d8 <si5351_Init+0x164>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
	  m_si5351Config.ms0_r_div		 = 0;
 8001fbc:	4b46      	ldr	r3, [pc, #280]	@ (80020d8 <si5351_Init+0x164>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	  m_si5351Config.ms1_r_div		 = 0;
 8001fc2:	4b45      	ldr	r3, [pc, #276]	@ (80020d8 <si5351_Init+0x164>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
	  m_si5351Config.ms2_r_div		 = 0;
 8001fc8:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <si5351_Init+0x164>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	635a      	str	r2, [r3, #52]	@ 0x34



  /* Disable all outputs setting CLKx_DIS high */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 8001fce:	21ff      	movs	r1, #255	@ 0xff
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 fd4d 	bl	8002a70 <si5351_write8>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	82fb      	strh	r3, [r7, #22]
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <si5351_Init+0x70>
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	e074      	b.n	80020ce <si5351_Init+0x15a>

  /* Power down all output drivers */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	2010      	movs	r0, #16
 8001fe8:	f000 fd42 	bl	8002a70 <si5351_write8>
 8001fec:	4603      	mov	r3, r0
 8001fee:	82bb      	strh	r3, [r7, #20]
 8001ff0:	8abb      	ldrh	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <si5351_Init+0x86>
 8001ff6:	8abb      	ldrh	r3, [r7, #20]
 8001ff8:	e069      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	2011      	movs	r0, #17
 8001ffe:	f000 fd37 	bl	8002a70 <si5351_write8>
 8002002:	4603      	mov	r3, r0
 8002004:	827b      	strh	r3, [r7, #18]
 8002006:	8a7b      	ldrh	r3, [r7, #18]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <si5351_Init+0x9c>
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	e05e      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	2012      	movs	r0, #18
 8002014:	f000 fd2c 	bl	8002a70 <si5351_write8>
 8002018:	4603      	mov	r3, r0
 800201a:	823b      	strh	r3, [r7, #16]
 800201c:	8a3b      	ldrh	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <si5351_Init+0xb2>
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	e053      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 8002026:	2180      	movs	r1, #128	@ 0x80
 8002028:	2013      	movs	r0, #19
 800202a:	f000 fd21 	bl	8002a70 <si5351_write8>
 800202e:	4603      	mov	r3, r0
 8002030:	81fb      	strh	r3, [r7, #14]
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <si5351_Init+0xc8>
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	e048      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	2014      	movs	r0, #20
 8002040:	f000 fd16 	bl	8002a70 <si5351_write8>
 8002044:	4603      	mov	r3, r0
 8002046:	81bb      	strh	r3, [r7, #12]
 8002048:	89bb      	ldrh	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <si5351_Init+0xde>
 800204e:	89bb      	ldrh	r3, [r7, #12]
 8002050:	e03d      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 8002052:	2180      	movs	r1, #128	@ 0x80
 8002054:	2015      	movs	r0, #21
 8002056:	f000 fd0b 	bl	8002a70 <si5351_write8>
 800205a:	4603      	mov	r3, r0
 800205c:	817b      	strh	r3, [r7, #10]
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <si5351_Init+0xf4>
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	e032      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	2016      	movs	r0, #22
 800206c:	f000 fd00 	bl	8002a70 <si5351_write8>
 8002070:	4603      	mov	r3, r0
 8002072:	813b      	strh	r3, [r7, #8]
 8002074:	893b      	ldrh	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <si5351_Init+0x10a>
 800207a:	893b      	ldrh	r3, [r7, #8]
 800207c:	e027      	b.n	80020ce <si5351_Init+0x15a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	2017      	movs	r0, #23
 8002082:	f000 fcf5 	bl	8002a70 <si5351_write8>
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <si5351_Init+0x120>
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	e01c      	b.n	80020ce <si5351_Init+0x15a>

  /* Set the load capacitance for the XTAL */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <si5351_Init+0x164>)
 8002096:	7a1b      	ldrb	r3, [r3, #8]
 8002098:	4619      	mov	r1, r3
 800209a:	20b7      	movs	r0, #183	@ 0xb7
 800209c:	f000 fce8 	bl	8002a70 <si5351_write8>
 80020a0:	4603      	mov	r3, r0
 80020a2:	80bb      	strh	r3, [r7, #4]
 80020a4:	88bb      	ldrh	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <si5351_Init+0x13a>
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	e00f      	b.n	80020ce <si5351_Init+0x15a>
     By default, ClockBuilder Desktop sets this register to 0x18.
     Note that the least significant nibble must remain 0x8, but the most
     significant nibble may be modified to suit your needs. */

  /* Reset the PLL config fields just in case we call init again */
  m_si5351Config.plla_configured = 0;
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <si5351_Init+0x164>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	741a      	strb	r2, [r3, #16]
  m_si5351Config.plla_freq = 0;
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <si5351_Init+0x164>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  m_si5351Config.pllb_configured = 0;
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <si5351_Init+0x164>)
 80020bc:	2200      	movs	r2, #0
 80020be:	761a      	strb	r2, [r3, #24]
  m_si5351Config.pllb_freq = 0;
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <si5351_Init+0x164>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]

  /* All done! */
  m_si5351Config.initialised = 1;
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <si5351_Init+0x164>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]

  return ERROR_NONE;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000194 	.word	0x20000194
 80020dc:	017d7840 	.word	0x017d7840

080020e0 <si5351_setupPLL>:
/**************************************************************************/
err_t si5351_setupPLL(si5351PLL_t pll,
                                uint8_t     mult,
                                uint32_t    num,
                                uint32_t    denom)
{
 80020e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020e4:	b08f      	sub	sp, #60	@ 0x3c
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	460b      	mov	r3, r1
 80020f2:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* PLL config register P1 */
  uint32_t P2;	     /* PLL config register P2 */
  uint32_t P3;	     /* PLL config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 80020f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002394 <si5351_setupPLL+0x2b4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <si5351_setupPLL+0x20>
 80020fc:	2305      	movs	r3, #5
 80020fe:	e1c0      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b0e      	cmp	r3, #14
 8002104:	d902      	bls.n	800210c <si5351_setupPLL+0x2c>
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	2b5a      	cmp	r3, #90	@ 0x5a
 800210a:	d901      	bls.n	8002110 <si5351_setupPLL+0x30>
 800210c:	2304      	movs	r3, #4
 800210e:	e1b8      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT( denom > 0,                  ERROR_INVALIDPARAMETER ); /* Avoid divide by zero */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <si5351_setupPLL+0x3a>
 8002116:	2304      	movs	r3, #4
 8002118:	e1b3      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002120:	d301      	bcc.n	8002126 <si5351_setupPLL+0x46>
 8002122:	2304      	movs	r3, #4
 8002124:	e1ad      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800212c:	d301      	bcc.n	8002132 <si5351_setupPLL+0x52>
 800212e:	2304      	movs	r3, #4
 8002130:	e1a7      	b.n	8002482 <si5351_setupPLL+0x3a2>
   *
   * 	P3[19:0] = denom
   */

  /* Set the main PLL config registers */
  if (num == 0)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <si5351_setupPLL+0x6a>
  {
    /* Integer mode */
    P1 = 128 * mult - 512;
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	3b04      	subs	r3, #4
 800213c:	01db      	lsls	r3, r3, #7
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
    P2 = num;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
    P3 = denom;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002148:	e078      	b.n	800223c <si5351_setupPLL+0x15c>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f950 	bl	80003f4 <__aeabi_i2d>
 8002154:	4604      	mov	r4, r0
 8002156:	460d      	mov	r5, r1
 8002158:	68b8      	ldr	r0, [r7, #8]
 800215a:	f7fe fd3b 	bl	8000bd4 <__aeabi_ui2f>
 800215e:	4606      	mov	r6, r0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fe fd37 	bl	8000bd4 <__aeabi_ui2f>
 8002166:	4603      	mov	r3, r0
 8002168:	4619      	mov	r1, r3
 800216a:	4630      	mov	r0, r6
 800216c:	f7fe fe3e 	bl	8000dec <__aeabi_fdiv>
 8002170:	4603      	mov	r3, r0
 8002172:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fd84 	bl	8000c84 <__aeabi_fmul>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f94a 	bl	8000418 <__aeabi_f2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f003 fc00 	bl	8005990 <floor>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fd ffe0 	bl	800015c <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80021ac:	f7fd ffd4 	bl	8000158 <__aeabi_dsub>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fc36 	bl	8000a28 <__aeabi_d2uiz>
 80021bc:	4603      	mov	r3, r0
 80021be:	637b      	str	r3, [r7, #52]	@ 0x34
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f905 	bl	80003d4 <__aeabi_ui2d>
 80021ca:	4604      	mov	r4, r0
 80021cc:	460d      	mov	r5, r1
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe f900 	bl	80003d4 <__aeabi_ui2d>
 80021d4:	4680      	mov	r8, r0
 80021d6:	4689      	mov	r9, r1
 80021d8:	68b8      	ldr	r0, [r7, #8]
 80021da:	f7fe fcfb 	bl	8000bd4 <__aeabi_ui2f>
 80021de:	4606      	mov	r6, r0
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7fe fcf7 	bl	8000bd4 <__aeabi_ui2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4619      	mov	r1, r3
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7fe fdfe 	bl	8000dec <__aeabi_fdiv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fd44 	bl	8000c84 <__aeabi_fmul>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f90a 	bl	8000418 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f003 fbc0 	bl	8005990 <floor>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4640      	mov	r0, r8
 8002216:	4649      	mov	r1, r9
 8002218:	f7fe f956 	bl	80004c8 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4620      	mov	r0, r4
 8002222:	4629      	mov	r1, r5
 8002224:	f7fd ff98 	bl	8000158 <__aeabi_dsub>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fbfa 	bl	8000a28 <__aeabi_d2uiz>
 8002234:	4603      	mov	r3, r0
 8002236:	633b      	str	r3, [r7, #48]	@ 0x30
    P3 = denom;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <si5351_setupPLL+0x166>
 8002242:	231a      	movs	r3, #26
 8002244:	e000      	b.n	8002248 <si5351_setupPLL+0x168>
 8002246:	2322      	movs	r3, #34	@ 0x22
 8002248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* The datasheet is a nightmare of typos and inconsistencies here! */
  ASSERT_STATUS( si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8));
 800224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b2da      	uxtb	r2, r3
 8002252:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fc09 	bl	8002a70 <si5351_write8>
 800225e:	4603      	mov	r3, r0
 8002260:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002262:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <si5351_setupPLL+0x18c>
 8002268:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800226a:	e10a      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+1, (P3 & 0x000000FF)));
 800226c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002270:	3301      	adds	r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fbf8 	bl	8002a70 <si5351_write8>
 8002280:	4603      	mov	r3, r0
 8002282:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <si5351_setupPLL+0x1ae>
 800228a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800228c:	e0f9      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16));
 800228e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002292:	3302      	adds	r3, #2
 8002294:	b2da      	uxtb	r2, r3
 8002296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f000 fbe3 	bl	8002a70 <si5351_write8>
 80022aa:	4603      	mov	r3, r0
 80022ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80022ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <si5351_setupPLL+0x1d8>
 80022b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b6:	e0e4      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8));
 80022b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80022bc:	3303      	adds	r3, #3
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f000 fbd1 	bl	8002a70 <si5351_write8>
 80022ce:	4603      	mov	r3, r0
 80022d0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80022d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <si5351_setupPLL+0x1fc>
 80022d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022da:	e0d2      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+4, (P1 & 0x000000FF)));
 80022dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80022e0:	3304      	adds	r3, #4
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fbc0 	bl	8002a70 <si5351_write8>
 80022f0:	4603      	mov	r3, r0
 80022f2:	843b      	strh	r3, [r7, #32]
 80022f4:	8c3b      	ldrh	r3, [r7, #32]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <si5351_setupPLL+0x21e>
 80022fa:	8c3b      	ldrh	r3, [r7, #32]
 80022fc:	e0c1      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) ));
 80022fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002302:	3305      	adds	r3, #5
 8002304:	b2d8      	uxtb	r0, r3
 8002306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002308:	0b1b      	lsrs	r3, r3, #12
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f023 030f 	bic.w	r3, r3, #15
 8002310:	b2da      	uxtb	r2, r3
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	f000 fba4 	bl	8002a70 <si5351_write8>
 8002328:	4603      	mov	r3, r0
 800232a:	83fb      	strh	r3, [r7, #30]
 800232c:	8bfb      	ldrh	r3, [r7, #30]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <si5351_setupPLL+0x256>
 8002332:	8bfb      	ldrh	r3, [r7, #30]
 8002334:	e0a5      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8));
 8002336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800233a:	3306      	adds	r3, #6
 800233c:	b2da      	uxtb	r2, r3
 800233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fb92 	bl	8002a70 <si5351_write8>
 800234c:	4603      	mov	r3, r0
 800234e:	83bb      	strh	r3, [r7, #28]
 8002350:	8bbb      	ldrh	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <si5351_setupPLL+0x27a>
 8002356:	8bbb      	ldrh	r3, [r7, #28]
 8002358:	e093      	b.n	8002482 <si5351_setupPLL+0x3a2>
  ASSERT_STATUS( si5351_write8( baseaddr+7, (P2 & 0x000000FF)));
 800235a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800235e:	3307      	adds	r3, #7
 8002360:	b2db      	uxtb	r3, r3
 8002362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fb81 	bl	8002a70 <si5351_write8>
 800236e:	4603      	mov	r3, r0
 8002370:	837b      	strh	r3, [r7, #26]
 8002372:	8b7b      	ldrh	r3, [r7, #26]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <si5351_setupPLL+0x29c>
 8002378:	8b7b      	ldrh	r3, [r7, #26]
 800237a:	e082      	b.n	8002482 <si5351_setupPLL+0x3a2>

  /* Reset both PLLs */
  ASSERT_STATUS( si5351_write8(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) ));
 800237c:	21a0      	movs	r1, #160	@ 0xa0
 800237e:	20b1      	movs	r0, #177	@ 0xb1
 8002380:	f000 fb76 	bl	8002a70 <si5351_write8>
 8002384:	4603      	mov	r3, r0
 8002386:	833b      	strh	r3, [r7, #24]
 8002388:	8b3b      	ldrh	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <si5351_setupPLL+0x2b8>
 800238e:	8b3b      	ldrh	r3, [r7, #24]
 8002390:	e077      	b.n	8002482 <si5351_setupPLL+0x3a2>
 8002392:	bf00      	nop
 8002394:	20000194 	.word	0x20000194

  /* Store the frequency settings for use with the Multisynth helper */
  if (pll == SI5351_PLL_A)
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d138      	bne.n	8002410 <si5351_setupPLL+0x330>
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 800239e:	4b3b      	ldr	r3, [pc, #236]	@ (800248c <si5351_setupPLL+0x3ac>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fc16 	bl	8000bd4 <__aeabi_ui2f>
 80023a8:	4604      	mov	r4, r0
 80023aa:	7bbb      	ldrb	r3, [r7, #14]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fc15 	bl	8000bdc <__aeabi_i2f>
 80023b2:	4605      	mov	r5, r0
 80023b4:	68b8      	ldr	r0, [r7, #8]
 80023b6:	f7fe fc0d 	bl	8000bd4 <__aeabi_ui2f>
 80023ba:	4606      	mov	r6, r0
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7fe fc09 	bl	8000bd4 <__aeabi_ui2f>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	4630      	mov	r0, r6
 80023c8:	f7fe fd10 	bl	8000dec <__aeabi_fdiv>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7fe fb4f 	bl	8000a74 <__addsf3>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4619      	mov	r1, r3
 80023da:	4620      	mov	r0, r4
 80023dc:	f7fe fc52 	bl	8000c84 <__aeabi_fmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	613b      	str	r3, [r7, #16]
    m_si5351Config.plla_configured = 1; //true
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <si5351_setupPLL+0x3ac>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	741a      	strb	r2, [r3, #16]
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 80023ea:	6938      	ldr	r0, [r7, #16]
 80023ec:	f7fe f814 	bl	8000418 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f003 faca 	bl	8005990 <floor>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb10 	bl	8000a28 <__aeabi_d2uiz>
 8002408:	4603      	mov	r3, r0
 800240a:	4a20      	ldr	r2, [pc, #128]	@ (800248c <si5351_setupPLL+0x3ac>)
 800240c:	6153      	str	r3, [r2, #20]
 800240e:	e037      	b.n	8002480 <si5351_setupPLL+0x3a0>
  }
  else
  {
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8002410:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <si5351_setupPLL+0x3ac>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fbdd 	bl	8000bd4 <__aeabi_ui2f>
 800241a:	4604      	mov	r4, r0
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fbdc 	bl	8000bdc <__aeabi_i2f>
 8002424:	4605      	mov	r5, r0
 8002426:	68b8      	ldr	r0, [r7, #8]
 8002428:	f7fe fbd4 	bl	8000bd4 <__aeabi_ui2f>
 800242c:	4606      	mov	r6, r0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fbd0 	bl	8000bd4 <__aeabi_ui2f>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	4630      	mov	r0, r6
 800243a:	f7fe fcd7 	bl	8000dec <__aeabi_fdiv>
 800243e:	4603      	mov	r3, r0
 8002440:	4619      	mov	r1, r3
 8002442:	4628      	mov	r0, r5
 8002444:	f7fe fb16 	bl	8000a74 <__addsf3>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fc19 	bl	8000c84 <__aeabi_fmul>
 8002452:	4603      	mov	r3, r0
 8002454:	617b      	str	r3, [r7, #20]
    m_si5351Config.pllb_configured = 1; //true
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <si5351_setupPLL+0x3ac>)
 8002458:	2201      	movs	r2, #1
 800245a:	761a      	strb	r2, [r3, #24]
    m_si5351Config.pllb_freq = (uint32_t)floor(fvco);
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f7fd ffdb 	bl	8000418 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f003 fa91 	bl	8005990 <floor>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fad7 	bl	8000a28 <__aeabi_d2uiz>
 800247a:	4603      	mov	r3, r0
 800247c:	4a03      	ldr	r2, [pc, #12]	@ (800248c <si5351_setupPLL+0x3ac>)
 800247e:	61d3      	str	r3, [r2, #28]
  }

  return ERROR_NONE;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	373c      	adds	r7, #60	@ 0x3c
 8002486:	46bd      	mov	sp, r7
 8002488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800248c:	20000194 	.word	0x20000194

08002490 <si5351_setupRdiv>:
{
  return si5351_setupMultisynth(output, pllSource, div, 0, 1);
}


err_t si5351_setupRdiv(uint8_t  output, si5351RDiv_t div) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <si5351_setupRdiv+0x1a>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e073      	b.n	8002592 <si5351_setupRdiv+0x102>
  
  uint8_t Rreg, regval, rDiv;

  if (output == 0) Rreg = SI5351_REGISTER_44_MULTISYNTH0_PARAMETERS_3;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <si5351_setupRdiv+0x24>
 80024b0:	232c      	movs	r3, #44	@ 0x2c
 80024b2:	73fb      	strb	r3, [r7, #15]
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <si5351_setupRdiv+0x2e>
 80024ba:	2334      	movs	r3, #52	@ 0x34
 80024bc:	73fb      	strb	r3, [r7, #15]
  if (output == 2) Rreg = SI5351_REGISTER_60_MULTISYNTH2_PARAMETERS_3;
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d101      	bne.n	80024c8 <si5351_setupRdiv+0x38>
 80024c4:	233c      	movs	r3, #60	@ 0x3c
 80024c6:	73fb      	strb	r3, [r7, #15]

  si5351_read8(Rreg, &regval);
 80024c8:	f107 020c 	add.w	r2, r7, #12
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 faf7 	bl	8002ac4 <si5351_read8>

  regval &= 0x0F;
 80024d6:	7b3b      	ldrb	r3, [r7, #12]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	733b      	strb	r3, [r7, #12]
  uint8_t divider = div;
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	737b      	strb	r3, [r7, #13]
  divider &= 0x07;
 80024e4:	7b7b      	ldrb	r3, [r7, #13]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	737b      	strb	r3, [r7, #13]
  divider <<= 4;
 80024ec:	7b7b      	ldrb	r3, [r7, #13]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	737b      	strb	r3, [r7, #13]
  regval |= divider;
 80024f2:	7b3a      	ldrb	r2, [r7, #12]
 80024f4:	7b7b      	ldrb	r3, [r7, #13]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	733b      	strb	r3, [r7, #12]
  si5351_write8(Rreg, regval);
 80024fc:	7b3a      	ldrb	r2, [r7, #12]
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fab4 	bl	8002a70 <si5351_write8>

  switch(div)
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	2b07      	cmp	r3, #7
 800250c:	d82a      	bhi.n	8002564 <si5351_setupRdiv+0xd4>
 800250e:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <si5351_setupRdiv+0x84>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002535 	.word	0x08002535
 8002518:	0800253b 	.word	0x0800253b
 800251c:	08002541 	.word	0x08002541
 8002520:	08002547 	.word	0x08002547
 8002524:	0800254d 	.word	0x0800254d
 8002528:	08002553 	.word	0x08002553
 800252c:	08002559 	.word	0x08002559
 8002530:	0800255f 	.word	0x0800255f
  {
  case 0:
  rDiv = 1;
 8002534:	2301      	movs	r3, #1
 8002536:	73bb      	strb	r3, [r7, #14]
  break;
 8002538:	e014      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 1:
  rDiv = 2;
 800253a:	2302      	movs	r3, #2
 800253c:	73bb      	strb	r3, [r7, #14]
  break;
 800253e:	e011      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 2:
  rDiv = 4;
 8002540:	2304      	movs	r3, #4
 8002542:	73bb      	strb	r3, [r7, #14]
  break;
 8002544:	e00e      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 3:
  rDiv = 8;
 8002546:	2308      	movs	r3, #8
 8002548:	73bb      	strb	r3, [r7, #14]
  break;
 800254a:	e00b      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 4:
  rDiv = 16;
 800254c:	2310      	movs	r3, #16
 800254e:	73bb      	strb	r3, [r7, #14]
  break;
 8002550:	e008      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 5:
  rDiv = 32;
 8002552:	2320      	movs	r3, #32
 8002554:	73bb      	strb	r3, [r7, #14]
  break;
 8002556:	e005      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 6:
  rDiv = 64;
 8002558:	2340      	movs	r3, #64	@ 0x40
 800255a:	73bb      	strb	r3, [r7, #14]
  break;
 800255c:	e002      	b.n	8002564 <si5351_setupRdiv+0xd4>

  case 7:
  rDiv = 128;
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	73bb      	strb	r3, [r7, #14]
  break;
 8002562:	bf00      	nop
  }

  switch(output)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d00e      	beq.n	8002588 <si5351_setupRdiv+0xf8>
 800256a:	2b02      	cmp	r3, #2
 800256c:	dc10      	bgt.n	8002590 <si5351_setupRdiv+0x100>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <si5351_setupRdiv+0xe8>
 8002572:	2b01      	cmp	r3, #1
 8002574:	d004      	beq.n	8002580 <si5351_setupRdiv+0xf0>
 8002576:	e00b      	b.n	8002590 <si5351_setupRdiv+0x100>
  {
  case 0:
  m_si5351Config.ms0_r_div = rDiv;
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	4a08      	ldr	r2, [pc, #32]	@ (800259c <si5351_setupRdiv+0x10c>)
 800257c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  break;
 800257e:	e007      	b.n	8002590 <si5351_setupRdiv+0x100>

  case 1:
  m_si5351Config.ms1_r_div = rDiv;
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	4a06      	ldr	r2, [pc, #24]	@ (800259c <si5351_setupRdiv+0x10c>)
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
  break;
 8002586:	e003      	b.n	8002590 <si5351_setupRdiv+0x100>

  case 2:
  m_si5351Config.ms2_r_div = rDiv;
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	4a04      	ldr	r2, [pc, #16]	@ (800259c <si5351_setupRdiv+0x10c>)
 800258c:	6353      	str	r3, [r2, #52]	@ 0x34
  break;
 800258e:	bf00      	nop
  }

  return ERROR_NONE;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000194 	.word	0x20000194

080025a0 <si5351_setupMultisynth>:
err_t si5351_setupMultisynth(uint8_t     output,
                                       si5351PLL_t pllSource,
                                       uint32_t    div,
                                       uint32_t    num,
                                       uint32_t    denom)
{
 80025a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a4:	b08d      	sub	sp, #52	@ 0x34
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	460b      	mov	r3, r1
 80025b2:	73bb      	strb	r3, [r7, #14]
  uint32_t P1;       /* Multisynth config register P1 */
  uint32_t P2;	     /* Multisynth config register P2 */
  uint32_t P3;	     /* Multisynth config register P3 */

  /* Basic validation */
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 80025b4:	4bb5      	ldr	r3, [pc, #724]	@ (800288c <si5351_setupMultisynth+0x2ec>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <si5351_setupMultisynth+0x20>
 80025bc:	2305      	movs	r3, #5
 80025be:	e22b      	b.n	8002a18 <si5351_setupMultisynth+0x478>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <si5351_setupMultisynth+0x2a>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e226      	b.n	8002a18 <si5351_setupMultisynth+0x478>
  //ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
  //ASSERT( denom <= 0xFFFFF,           ERROR_INVALIDPARAMETER ); /* 20-bit limit */


  /* Make sure the requested PLL has been initialised */
  if (pllSource == SI5351_PLL_A)
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <si5351_setupMultisynth+0x38>
  {
    ASSERT(m_si5351Config.plla_configured = 1, ERROR_INVALIDPARAMETER);
 80025d0:	4bae      	ldr	r3, [pc, #696]	@ (800288c <si5351_setupMultisynth+0x2ec>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	741a      	strb	r2, [r3, #16]
 80025d6:	e002      	b.n	80025de <si5351_setupMultisynth+0x3e>
  }
  else
  {
    ASSERT(m_si5351Config.pllb_configured = 1, ERROR_INVALIDPARAMETER);
 80025d8:	4bac      	ldr	r3, [pc, #688]	@ (800288c <si5351_setupMultisynth+0x2ec>)
 80025da:	2201      	movs	r2, #1
 80025dc:	761a      	strb	r2, [r3, #24]
   *
   * 	P3[19:0] = c
   */

  /* Set the main PLL config registers */
  if (num == 0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <si5351_setupMultisynth+0x5a>
  {
    /* Integer mode */
    P1 = 128 * div - 512;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	3b04      	subs	r3, #4
 80025ec:	01db      	lsls	r3, r3, #7
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    P2 = num;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    P3 = denom;
 80025f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f8:	e078      	b.n	80026ec <si5351_setupMultisynth+0x14c>
  }
  else
  {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num/(float)denom)) - 512);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	01db      	lsls	r3, r3, #7
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fee8 	bl	80003d4 <__aeabi_ui2d>
 8002604:	4604      	mov	r4, r0
 8002606:	460d      	mov	r5, r1
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fe fae3 	bl	8000bd4 <__aeabi_ui2f>
 800260e:	4606      	mov	r6, r0
 8002610:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002612:	f7fe fadf 	bl	8000bd4 <__aeabi_ui2f>
 8002616:	4603      	mov	r3, r0
 8002618:	4619      	mov	r1, r3
 800261a:	4630      	mov	r0, r6
 800261c:	f7fe fbe6 	bl	8000dec <__aeabi_fdiv>
 8002620:	4603      	mov	r3, r0
 8002622:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fb2c 	bl	8000c84 <__aeabi_fmul>
 800262c:	4603      	mov	r3, r0
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fef2 	bl	8000418 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f003 f9a8 	bl	8005990 <floor>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4620      	mov	r0, r4
 8002646:	4629      	mov	r1, r5
 8002648:	f7fd fd88 	bl	800015c <__adddf3>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800265c:	f7fd fd7c 	bl	8000158 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe f9de 	bl	8000a28 <__aeabi_d2uiz>
 800266c:	4603      	mov	r3, r0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	01db      	lsls	r3, r3, #7
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fead 	bl	80003d4 <__aeabi_ui2d>
 800267a:	4604      	mov	r4, r0
 800267c:	460d      	mov	r5, r1
 800267e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002680:	f7fd fea8 	bl	80003d4 <__aeabi_ui2d>
 8002684:	4680      	mov	r8, r0
 8002686:	4689      	mov	r9, r1
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fe faa3 	bl	8000bd4 <__aeabi_ui2f>
 800268e:	4606      	mov	r6, r0
 8002690:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002692:	f7fe fa9f 	bl	8000bd4 <__aeabi_ui2f>
 8002696:	4603      	mov	r3, r0
 8002698:	4619      	mov	r1, r3
 800269a:	4630      	mov	r0, r6
 800269c:	f7fe fba6 	bl	8000dec <__aeabi_fdiv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe faec 	bl	8000c84 <__aeabi_fmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd feb2 	bl	8000418 <__aeabi_f2d>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f003 f968 	bl	8005990 <floor>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4640      	mov	r0, r8
 80026c6:	4649      	mov	r1, r9
 80026c8:	f7fd fefe 	bl	80004c8 <__aeabi_dmul>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4620      	mov	r0, r4
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7fd fd40 	bl	8000158 <__aeabi_dsub>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f7fe f9a2 	bl	8000a28 <__aeabi_d2uiz>
 80026e4:	4603      	mov	r3, r0
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    P3 = denom;
 80026e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  switch (output)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d00e      	beq.n	8002716 <si5351_setupMultisynth+0x176>
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	dc10      	bgt.n	800271e <si5351_setupMultisynth+0x17e>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <si5351_setupMultisynth+0x166>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d004      	beq.n	800270e <si5351_setupMultisynth+0x16e>
 8002704:	e00b      	b.n	800271e <si5351_setupMultisynth+0x17e>
  {
    case 0:
      baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8002706:	232a      	movs	r3, #42	@ 0x2a
 8002708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 800270c:	e007      	b.n	800271e <si5351_setupMultisynth+0x17e>
    case 1:
      baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800270e:	2332      	movs	r3, #50	@ 0x32
 8002710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 8002714:	e003      	b.n	800271e <si5351_setupMultisynth+0x17e>
    case 2:
      baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8002716:	233a      	movs	r3, #58	@ 0x3a
 8002718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 800271c:	bf00      	nop
  }

  /* Set the MSx config registers */
  si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b2da      	uxtb	r2, r3
 8002724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f9a0 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+1, (P3 & 0x000000FF));
 8002730:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002734:	3301      	adds	r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f996 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16);	/* ToDo: Add DIVBY4 (>150MHz) and R0 support (<500kHz) later */
 8002744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002748:	3302      	adds	r3, #2
 800274a:	b2da      	uxtb	r2, r3
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 f988 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8);
 8002760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002764:	3303      	adds	r3, #3
 8002766:	b2da      	uxtb	r2, r3
 8002768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 f97d 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+4, (P1 & 0x000000FF));
 8002776:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800277a:	3304      	adds	r3, #4
 800277c:	b2db      	uxtb	r3, r3
 800277e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f973 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) );
 800278a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800278e:	3305      	adds	r3, #5
 8002790:	b2d8      	uxtb	r0, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	0b1b      	lsrs	r3, r3, #12
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f023 030f 	bic.w	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	f000 f95e 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8);
 80027b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027b8:	3306      	adds	r3, #6
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f000 f953 	bl	8002a70 <si5351_write8>
  si5351_write8( baseaddr+7, (P2 & 0x000000FF));
 80027ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027ce:	3307      	adds	r3, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f949 	bl	8002a70 <si5351_write8>


  if (pllSource == SI5351_PLL_A)
 80027de:	7bbb      	ldrb	r3, [r7, #14]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d168      	bne.n	80028b6 <si5351_setupMultisynth+0x316>
  {
          float fvco = m_si5351Config.plla_freq / (div + ( (float)num / (float)denom ));
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <si5351_setupMultisynth+0x2ec>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe f9f3 	bl	8000bd4 <__aeabi_ui2f>
 80027ee:	4604      	mov	r4, r0
 80027f0:	68b8      	ldr	r0, [r7, #8]
 80027f2:	f7fe f9ef 	bl	8000bd4 <__aeabi_ui2f>
 80027f6:	4605      	mov	r5, r0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe f9eb 	bl	8000bd4 <__aeabi_ui2f>
 80027fe:	4606      	mov	r6, r0
 8002800:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002802:	f7fe f9e7 	bl	8000bd4 <__aeabi_ui2f>
 8002806:	4603      	mov	r3, r0
 8002808:	4619      	mov	r1, r3
 800280a:	4630      	mov	r0, r6
 800280c:	f7fe faee 	bl	8000dec <__aeabi_fdiv>
 8002810:	4603      	mov	r3, r0
 8002812:	4619      	mov	r1, r3
 8002814:	4628      	mov	r0, r5
 8002816:	f7fe f92d 	bl	8000a74 <__addsf3>
 800281a:	4603      	mov	r3, r0
 800281c:	4619      	mov	r1, r3
 800281e:	4620      	mov	r0, r4
 8002820:	f7fe fae4 	bl	8000dec <__aeabi_fdiv>
 8002824:	4603      	mov	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]
          switch (output)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d030      	beq.n	8002890 <si5351_setupMultisynth+0x2f0>
 800282e:	2b02      	cmp	r3, #2
 8002830:	f300 80a6 	bgt.w	8002980 <si5351_setupMultisynth+0x3e0>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <si5351_setupMultisynth+0x29e>
 8002838:	2b01      	cmp	r3, #1
 800283a:	d013      	beq.n	8002864 <si5351_setupMultisynth+0x2c4>
 800283c:	e0a0      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 800283e:	69b8      	ldr	r0, [r7, #24]
 8002840:	f7fd fdea 	bl	8000418 <__aeabi_f2d>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f003 f8a0 	bl	8005990 <floor>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f8e6 	bl	8000a28 <__aeabi_d2uiz>
 800285c:	4603      	mov	r3, r0
 800285e:	4a0b      	ldr	r2, [pc, #44]	@ (800288c <si5351_setupMultisynth+0x2ec>)
 8002860:	6213      	str	r3, [r2, #32]
           break;
 8002862:	e08d      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 8002864:	69b8      	ldr	r0, [r7, #24]
 8002866:	f7fd fdd7 	bl	8000418 <__aeabi_f2d>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f003 f88d 	bl	8005990 <floor>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f8d3 	bl	8000a28 <__aeabi_d2uiz>
 8002882:	4603      	mov	r3, r0
 8002884:	4a01      	ldr	r2, [pc, #4]	@ (800288c <si5351_setupMultisynth+0x2ec>)
 8002886:	6253      	str	r3, [r2, #36]	@ 0x24
           break;
 8002888:	e07a      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
 800288a:	bf00      	nop
 800288c:	20000194 	.word	0x20000194
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8002890:	69b8      	ldr	r0, [r7, #24]
 8002892:	f7fd fdc1 	bl	8000418 <__aeabi_f2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f003 f877 	bl	8005990 <floor>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f8bd 	bl	8000a28 <__aeabi_d2uiz>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a24 <si5351_setupMultisynth+0x484>)
 80028b2:	6293      	str	r3, [r2, #40]	@ 0x28
           break;
 80028b4:	e064      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
          }
  }
  else
  {
          float fvco = m_si5351Config.pllb_freq / (div + ( (float)num / (float)denom));
 80028b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a24 <si5351_setupMultisynth+0x484>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f98a 	bl	8000bd4 <__aeabi_ui2f>
 80028c0:	4604      	mov	r4, r0
 80028c2:	68b8      	ldr	r0, [r7, #8]
 80028c4:	f7fe f986 	bl	8000bd4 <__aeabi_ui2f>
 80028c8:	4605      	mov	r5, r0
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe f982 	bl	8000bd4 <__aeabi_ui2f>
 80028d0:	4606      	mov	r6, r0
 80028d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80028d4:	f7fe f97e 	bl	8000bd4 <__aeabi_ui2f>
 80028d8:	4603      	mov	r3, r0
 80028da:	4619      	mov	r1, r3
 80028dc:	4630      	mov	r0, r6
 80028de:	f7fe fa85 	bl	8000dec <__aeabi_fdiv>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4628      	mov	r0, r5
 80028e8:	f7fe f8c4 	bl	8000a74 <__addsf3>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4619      	mov	r1, r3
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7fe fa7b 	bl	8000dec <__aeabi_fdiv>
 80028f6:	4603      	mov	r3, r0
 80028f8:	61fb      	str	r3, [r7, #28]
          switch (output)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d02c      	beq.n	800295a <si5351_setupMultisynth+0x3ba>
 8002900:	2b02      	cmp	r3, #2
 8002902:	dc3d      	bgt.n	8002980 <si5351_setupMultisynth+0x3e0>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <si5351_setupMultisynth+0x36e>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d013      	beq.n	8002934 <si5351_setupMultisynth+0x394>
 800290c:	e038      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
          {
           case 0:
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 800290e:	69f8      	ldr	r0, [r7, #28]
 8002910:	f7fd fd82 	bl	8000418 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f003 f838 	bl	8005990 <floor>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	f7fe f87e 	bl	8000a28 <__aeabi_d2uiz>
 800292c:	4603      	mov	r3, r0
 800292e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a24 <si5351_setupMultisynth+0x484>)
 8002930:	6213      	str	r3, [r2, #32]
           break;
 8002932:	e025      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
           case 1:
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 8002934:	69f8      	ldr	r0, [r7, #28]
 8002936:	f7fd fd6f 	bl	8000418 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f003 f825 	bl	8005990 <floor>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f86b 	bl	8000a28 <__aeabi_d2uiz>
 8002952:	4603      	mov	r3, r0
 8002954:	4a33      	ldr	r2, [pc, #204]	@ (8002a24 <si5351_setupMultisynth+0x484>)
 8002956:	6253      	str	r3, [r2, #36]	@ 0x24
           break;
 8002958:	e012      	b.n	8002980 <si5351_setupMultisynth+0x3e0>
           case 2:
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 800295a:	69f8      	ldr	r0, [r7, #28]
 800295c:	f7fd fd5c 	bl	8000418 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f003 f812 	bl	8005990 <floor>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f858 	bl	8000a28 <__aeabi_d2uiz>
 8002978:	4603      	mov	r3, r0
 800297a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <si5351_setupMultisynth+0x484>)
 800297c:	6293      	str	r3, [r2, #40]	@ 0x28
           break;
 800297e:	bf00      	nop
  }



  /* Configure the clk control and enable the output */
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 8002980:	230f      	movs	r3, #15
 8002982:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (pllSource == SI5351_PLL_B) clkControlReg |= (1 << 5); /* Uses PLLB */
 8002986:	7bbb      	ldrb	r3, [r7, #14]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <si5351_setupMultisynth+0x3f8>
 800298c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002990:	f043 0320 	orr.w	r3, r3, #32
 8002994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <si5351_setupMultisynth+0x40a>
 800299e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80029a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  switch (output)
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d020      	beq.n	80029f2 <si5351_setupMultisynth+0x452>
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	dc30      	bgt.n	8002a16 <si5351_setupMultisynth+0x476>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <si5351_setupMultisynth+0x41e>
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d00d      	beq.n	80029d8 <si5351_setupMultisynth+0x438>
 80029bc:	e02b      	b.n	8002a16 <si5351_setupMultisynth+0x476>
  {
    case 0:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg));
 80029be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80029c2:	4619      	mov	r1, r3
 80029c4:	2010      	movs	r0, #16
 80029c6:	f000 f853 	bl	8002a70 <si5351_write8>
 80029ca:	4603      	mov	r3, r0
 80029cc:	827b      	strh	r3, [r7, #18]
 80029ce:	8a7b      	ldrh	r3, [r7, #18]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <si5351_setupMultisynth+0x46c>
 80029d4:	8a7b      	ldrh	r3, [r7, #18]
 80029d6:	e01f      	b.n	8002a18 <si5351_setupMultisynth+0x478>
      break;
    case 1:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg));
 80029d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80029dc:	4619      	mov	r1, r3
 80029de:	2011      	movs	r0, #17
 80029e0:	f000 f846 	bl	8002a70 <si5351_write8>
 80029e4:	4603      	mov	r3, r0
 80029e6:	82bb      	strh	r3, [r7, #20]
 80029e8:	8abb      	ldrh	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d010      	beq.n	8002a10 <si5351_setupMultisynth+0x470>
 80029ee:	8abb      	ldrh	r3, [r7, #20]
 80029f0:	e012      	b.n	8002a18 <si5351_setupMultisynth+0x478>
      break;
    case 2:
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 80029f2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80029f6:	4619      	mov	r1, r3
 80029f8:	2012      	movs	r0, #18
 80029fa:	f000 f839 	bl	8002a70 <si5351_write8>
 80029fe:	4603      	mov	r3, r0
 8002a00:	82fb      	strh	r3, [r7, #22]
 8002a02:	8afb      	ldrh	r3, [r7, #22]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <si5351_setupMultisynth+0x474>
 8002a08:	8afb      	ldrh	r3, [r7, #22]
 8002a0a:	e005      	b.n	8002a18 <si5351_setupMultisynth+0x478>
      break;
 8002a0c:	bf00      	nop
 8002a0e:	e002      	b.n	8002a16 <si5351_setupMultisynth+0x476>
      break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <si5351_setupMultisynth+0x476>
      break;
 8002a14:	bf00      	nop
  }

  return ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3734      	adds	r7, #52	@ 0x34
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a22:	bf00      	nop
 8002a24:	20000194 	.word	0x20000194

08002a28 <si5351_enableOutputs>:
/*!
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t si5351_enableOutputs(uint8_t enabled)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  /* Make sure we've called init first */
  ASSERT(m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <si5351_enableOutputs+0x44>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <si5351_enableOutputs+0x16>
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	e011      	b.n	8002a62 <si5351_enableOutputs+0x3a>

  /* Enabled desired outputs (see Register 3) */
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00: 0xFF));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <si5351_enableOutputs+0x20>
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <si5351_enableOutputs+0x22>
 8002a48:	23ff      	movs	r3, #255	@ 0xff
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	f000 f80f 	bl	8002a70 <si5351_write8>
 8002a52:	4603      	mov	r3, r0
 8002a54:	81fb      	strh	r3, [r7, #14]
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <si5351_enableOutputs+0x38>
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	e000      	b.n	8002a62 <si5351_enableOutputs+0x3a>

  return ERROR_NONE;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000194 	.word	0x20000194

08002a70 <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af04      	add	r7, sp, #16
 8002a76:	4603      	mov	r3, r0
 8002a78:	460a      	mov	r2, r1
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8002a84:	bf00      	nop
 8002a86:	2364      	movs	r3, #100	@ 0x64
 8002a88:	2203      	movs	r2, #3
 8002a8a:	21c0      	movs	r1, #192	@ 0xc0
 8002a8c:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <si5351_write8+0x50>)
 8002a8e:	f001 fb65 	bl	800415c <HAL_I2C_IsDeviceReady>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f6      	bne.n	8002a86 <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	2364      	movs	r3, #100	@ 0x64
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	1dbb      	adds	r3, r7, #6
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	21c0      	movs	r1, #192	@ 0xc0
 8002aac:	4804      	ldr	r0, [pc, #16]	@ (8002ac0 <si5351_write8+0x50>)
 8002aae:	f000 ffe7 	bl	8003a80 <HAL_I2C_Mem_Write>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000078 	.word	0x20000078

08002ac4 <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8002ad4:	bf00      	nop
 8002ad6:	2364      	movs	r3, #100	@ 0x64
 8002ad8:	2203      	movs	r2, #3
 8002ada:	21c0      	movs	r1, #192	@ 0xc0
 8002adc:	480c      	ldr	r0, [pc, #48]	@ (8002b10 <si5351_read8+0x4c>)
 8002ade:	f001 fb3d 	bl	800415c <HAL_I2C_IsDeviceReady>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f6      	bne.n	8002ad6 <si5351_read8+0x12>

    status = HAL_I2C_Mem_Read(&hi2c1,							// i2c handle
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	2364      	movs	r3, #100	@ 0x64
 8002aee:	9302      	str	r3, [sp, #8]
 8002af0:	2301      	movs	r3, #1
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	463b      	mov	r3, r7
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2301      	movs	r3, #1
 8002afa:	21c0      	movs	r1, #192	@ 0xc0
 8002afc:	4804      	ldr	r0, [pc, #16]	@ (8002b10 <si5351_read8+0x4c>)
 8002afe:	f001 f8b9 	bl	8003c74 <HAL_I2C_Mem_Read>
 8002b02:	4603      	mov	r3, r0
 8002b04:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000078 	.word	0x20000078

08002b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_MspInit+0x5c>)
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	4a14      	ldr	r2, [pc, #80]	@ (8002b70 <HAL_MspInit+0x5c>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6193      	str	r3, [r2, #24]
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <HAL_MspInit+0x5c>)
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_MspInit+0x5c>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <HAL_MspInit+0x5c>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_MspInit+0x5c>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_MspInit+0x60>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <HAL_MspInit+0x60>)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010000 	.word	0x40010000

08002b78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0318 	add.w	r3, r7, #24
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2b      	ldr	r2, [pc, #172]	@ (8002c40 <HAL_I2C_MspInit+0xc8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d124      	bne.n	8002be2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb0:	23c0      	movs	r3, #192	@ 0xc0
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb4:	2312      	movs	r3, #18
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f107 0318 	add.w	r3, r7, #24
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4821      	ldr	r0, [pc, #132]	@ (8002c48 <HAL_I2C_MspInit+0xd0>)
 8002bc4:	f000 fc7c 	bl	80034c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002bce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bd2:	61d3      	str	r3, [r2, #28]
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002be0:	e029      	b.n	8002c36 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_I2C_MspInit+0xd4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d124      	bne.n	8002c36 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002bf2:	f043 0308 	orr.w	r3, r3, #8
 8002bf6:	6193      	str	r3, [r2, #24]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c0a:	2312      	movs	r3, #18
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0318 	add.w	r3, r7, #24
 8002c16:	4619      	mov	r1, r3
 8002c18:	480b      	ldr	r0, [pc, #44]	@ (8002c48 <HAL_I2C_MspInit+0xd0>)
 8002c1a:	f000 fc51 	bl	80034c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_I2C_MspInit+0xcc>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	@ 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40005400 	.word	0x40005400
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40010c00 	.word	0x40010c00
 8002c4c:	40005800 	.word	0x40005800

08002c50 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d124      	bne.n	8002cba <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c70:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ca0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x7c>)
 8002cb6:	f000 fc03 	bl	80034c0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010800 	.word	0x40010800

08002cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <NMI_Handler+0x4>

08002cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <HardFault_Handler+0x4>

08002ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <MemManage_Handler+0x4>

08002ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <BusFault_Handler+0x4>

08002cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <UsageFault_Handler+0x4>

08002cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d20:	f000 faaa 	bl	8003278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d34:	f7ff fff8 	bl	8002d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d38:	480b      	ldr	r0, [pc, #44]	@ (8002d68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d3a:	490c      	ldr	r1, [pc, #48]	@ (8002d6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4e:	4a09      	ldr	r2, [pc, #36]	@ (8002d74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d50:	4c09      	ldr	r4, [pc, #36]	@ (8002d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5e:	f002 fd09 	bl	8005774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d62:	f7fe ff5d 	bl	8001c20 <main>
  bx lr
 8002d66:	4770      	bx	lr
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002d70:	08007de0 	.word	0x08007de0
  ldr r2, =_sbss
 8002d74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002d78:	20000510 	.word	0x20000510

08002d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC1_2_IRQHandler>

08002d7e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
	...

08002d8c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af04      	add	r7, sp, #16
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	9302      	str	r3, [sp, #8]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	1dfb      	adds	r3, r7, #7
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2301      	movs	r3, #1
 8002da6:	2200      	movs	r2, #0
 8002da8:	2178      	movs	r1, #120	@ 0x78
 8002daa:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <ssd1306_WriteCommand+0x2c>)
 8002dac:	f000 fe68 	bl	8003a80 <HAL_I2C_Mem_Write>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	200000cc 	.word	0x200000cc

08002dbc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f04f 32ff 	mov.w	r2, #4294967295
 8002dce:	9202      	str	r2, [sp, #8]
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	2178      	movs	r1, #120	@ 0x78
 8002ddc:	4803      	ldr	r0, [pc, #12]	@ (8002dec <ssd1306_WriteData+0x30>)
 8002dde:	f000 fe4f 	bl	8003a80 <HAL_I2C_Mem_Write>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200000cc 	.word	0x200000cc

08002df0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002df4:	f7ff ffc3 	bl	8002d7e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002df8:	2064      	movs	r0, #100	@ 0x64
 8002dfa:	f000 fa59 	bl	80032b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f000 f9d6 	bl	80031b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e04:	2020      	movs	r0, #32
 8002e06:	f7ff ffc1 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7ff ffbe 	bl	8002d8c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e10:	20b0      	movs	r0, #176	@ 0xb0
 8002e12:	f7ff ffbb 	bl	8002d8c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e16:	20c8      	movs	r0, #200	@ 0xc8
 8002e18:	f7ff ffb8 	bl	8002d8c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7ff ffb5 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e22:	2010      	movs	r0, #16
 8002e24:	f7ff ffb2 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e28:	2040      	movs	r0, #64	@ 0x40
 8002e2a:	f7ff ffaf 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e2e:	20ff      	movs	r0, #255	@ 0xff
 8002e30:	f000 f9aa 	bl	8003188 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e34:	20a1      	movs	r0, #161	@ 0xa1
 8002e36:	f7ff ffa9 	bl	8002d8c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e3a:	20a6      	movs	r0, #166	@ 0xa6
 8002e3c:	f7ff ffa6 	bl	8002d8c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e40:	20a8      	movs	r0, #168	@ 0xa8
 8002e42:	f7ff ffa3 	bl	8002d8c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002e46:	201f      	movs	r0, #31
 8002e48:	f7ff ffa0 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e4c:	20a4      	movs	r0, #164	@ 0xa4
 8002e4e:	f7ff ff9d 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e52:	20d3      	movs	r0, #211	@ 0xd3
 8002e54:	f7ff ff9a 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff ff97 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e5e:	20d5      	movs	r0, #213	@ 0xd5
 8002e60:	f7ff ff94 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e64:	20f0      	movs	r0, #240	@ 0xf0
 8002e66:	f7ff ff91 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e6a:	20d9      	movs	r0, #217	@ 0xd9
 8002e6c:	f7ff ff8e 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002e70:	2022      	movs	r0, #34	@ 0x22
 8002e72:	f7ff ff8b 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002e76:	20da      	movs	r0, #218	@ 0xda
 8002e78:	f7ff ff88 	bl	8002d8c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7ff ff85 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002e82:	20db      	movs	r0, #219	@ 0xdb
 8002e84:	f7ff ff82 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002e88:	2020      	movs	r0, #32
 8002e8a:	f7ff ff7f 	bl	8002d8c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002e8e:	208d      	movs	r0, #141	@ 0x8d
 8002e90:	f7ff ff7c 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002e94:	2014      	movs	r0, #20
 8002e96:	f7ff ff79 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f000 f988 	bl	80031b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f000 f80f 	bl	8002ec4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002ea6:	f000 f825 	bl	8002ef4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <ssd1306_Init+0xd0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <ssd1306_Init+0xd0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002eb6:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <ssd1306_Init+0xd0>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	711a      	strb	r2, [r3, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200003cc 	.word	0x200003cc

08002ec4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <ssd1306_Fill+0x14>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <ssd1306_Fill+0x16>
 8002ed8:	23ff      	movs	r3, #255	@ 0xff
 8002eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4803      	ldr	r0, [pc, #12]	@ (8002ef0 <ssd1306_Fill+0x2c>)
 8002ee2:	f002 fc39 	bl	8005758 <memset>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200001cc 	.word	0x200001cc

08002ef4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]
 8002efe:	e016      	b.n	8002f2e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	3b50      	subs	r3, #80	@ 0x50
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff40 	bl	8002d8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7ff ff3d 	bl	8002d8c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f12:	2010      	movs	r0, #16
 8002f14:	f7ff ff3a 	bl	8002d8c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	01db      	lsls	r3, r3, #7
 8002f1c:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <ssd1306_UpdateScreen+0x4c>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	2180      	movs	r1, #128	@ 0x80
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff4a 	bl	8002dbc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d9e5      	bls.n	8002f00 <ssd1306_UpdateScreen+0xc>
    }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200001cc 	.word	0x200001cc

08002f44 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	71bb      	strb	r3, [r7, #6]
 8002f52:	4613      	mov	r3, r2
 8002f54:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db3d      	blt.n	8002fda <ssd1306_DrawPixel+0x96>
 8002f5e:	79bb      	ldrb	r3, [r7, #6]
 8002f60:	2b1f      	cmp	r3, #31
 8002f62:	d83a      	bhi.n	8002fda <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f64:	797b      	ldrb	r3, [r7, #5]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d11a      	bne.n	8002fa0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f6a:	79fa      	ldrb	r2, [r7, #7]
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	b2d8      	uxtb	r0, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	01db      	lsls	r3, r3, #7
 8002f76:	4413      	add	r3, r2
 8002f78:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe4 <ssd1306_DrawPixel+0xa0>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	79bb      	ldrb	r3, [r7, #6]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b259      	sxtb	r1, r3
 8002f90:	79fa      	ldrb	r2, [r7, #7]
 8002f92:	4603      	mov	r3, r0
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	4413      	add	r3, r2
 8002f98:	b2c9      	uxtb	r1, r1
 8002f9a:	4a12      	ldr	r2, [pc, #72]	@ (8002fe4 <ssd1306_DrawPixel+0xa0>)
 8002f9c:	54d1      	strb	r1, [r2, r3]
 8002f9e:	e01d      	b.n	8002fdc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fa0:	79fa      	ldrb	r2, [r7, #7]
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	08db      	lsrs	r3, r3, #3
 8002fa6:	b2d8      	uxtb	r0, r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	01db      	lsls	r3, r3, #7
 8002fac:	4413      	add	r3, r2
 8002fae:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe4 <ssd1306_DrawPixel+0xa0>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
 8002fb2:	b25a      	sxtb	r2, r3
 8002fb4:	79bb      	ldrb	r3, [r7, #6]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	b259      	sxtb	r1, r3
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	4603      	mov	r3, r0
 8002fce:	01db      	lsls	r3, r3, #7
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b2c9      	uxtb	r1, r1
 8002fd4:	4a03      	ldr	r2, [pc, #12]	@ (8002fe4 <ssd1306_DrawPixel+0xa0>)
 8002fd6:	54d1      	strb	r1, [r2, r3]
 8002fd8:	e000      	b.n	8002fdc <ssd1306_DrawPixel+0x98>
        return;
 8002fda:	bf00      	nop
    }
}
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	200001cc 	.word	0x200001cc

08002fe8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b1f      	cmp	r3, #31
 8002ffe:	d902      	bls.n	8003006 <ssd1306_WriteChar+0x1e>
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b7e      	cmp	r3, #126	@ 0x7e
 8003004:	d901      	bls.n	800300a <ssd1306_WriteChar+0x22>
        return 0;
 8003006:	2300      	movs	r3, #0
 8003008:	e079      	b.n	80030fe <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <ssd1306_WriteChar+0x34>
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	3b20      	subs	r3, #32
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	e000      	b.n	800301e <ssd1306_WriteChar+0x36>
 800301c:	783b      	ldrb	r3, [r7, #0]
 800301e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003020:	4b39      	ldr	r3, [pc, #228]	@ (8003108 <ssd1306_WriteChar+0x120>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	4413      	add	r3, r2
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	dc06      	bgt.n	800303c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800302e:	4b36      	ldr	r3, [pc, #216]	@ (8003108 <ssd1306_WriteChar+0x120>)
 8003030:	885b      	ldrh	r3, [r3, #2]
 8003032:	461a      	mov	r2, r3
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003038:	2b20      	cmp	r3, #32
 800303a:	dd01      	ble.n	8003040 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800303c:	2300      	movs	r3, #0
 800303e:	e05e      	b.n	80030fe <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e04d      	b.n	80030e2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	3b20      	subs	r3, #32
 800304c:	7879      	ldrb	r1, [r7, #1]
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4619      	mov	r1, r3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	440b      	add	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e036      	b.n	80030d4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <ssd1306_WriteChar+0x120>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4413      	add	r3, r2
 8003082:	b2d8      	uxtb	r0, r3
 8003084:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <ssd1306_WriteChar+0x120>)
 8003086:	885b      	ldrh	r3, [r3, #2]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	4413      	add	r3, r2
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003096:	4619      	mov	r1, r3
 8003098:	f7ff ff54 	bl	8002f44 <ssd1306_DrawPixel>
 800309c:	e017      	b.n	80030ce <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800309e:	4b1a      	ldr	r3, [pc, #104]	@ (8003108 <ssd1306_WriteChar+0x120>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	b2d8      	uxtb	r0, r3
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <ssd1306_WriteChar+0x120>)
 80030ae:	885b      	ldrh	r3, [r3, #2]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff ff3b 	bl	8002f44 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3c4      	bcc.n	8003066 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	787b      	ldrb	r3, [r7, #1]
 80030e4:	461a      	mov	r2, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d3ac      	bcc.n	8003046 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <ssd1306_WriteChar+0x120>)
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <ssd1306_WriteChar+0x120>)
 80030fa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	@ 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}
 8003106:	bf00      	nop
 8003108:	200003cc 	.word	0x200003cc

0800310c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4638      	mov	r0, r7
 8003116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800311a:	e013      	b.n	8003144 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	7818      	ldrb	r0, [r3, #0]
 8003120:	7e3b      	ldrb	r3, [r7, #24]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	463b      	mov	r3, r7
 8003126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003128:	f7ff ff5e 	bl	8002fe8 <ssd1306_WriteChar>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d002      	beq.n	800313e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	e008      	b.n	8003150 <ssd1306_WriteString+0x44>
        }
        str++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3301      	adds	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e7      	bne.n	800311c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	781b      	ldrb	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	460a      	mov	r2, r1
 8003162:	71fb      	strb	r3, [r7, #7]
 8003164:	4613      	mov	r3, r2
 8003166:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <ssd1306_SetCursor+0x2c>)
 800316e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003170:	79bb      	ldrb	r3, [r7, #6]
 8003172:	b29a      	uxth	r2, r3
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <ssd1306_SetCursor+0x2c>)
 8003176:	805a      	strh	r2, [r3, #2]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	200003cc 	.word	0x200003cc

08003188 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003192:	2381      	movs	r3, #129	@ 0x81
 8003194:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fdf7 	bl	8002d8c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fdf3 	bl	8002d8c <ssd1306_WriteCommand>
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80031c0:	23af      	movs	r3, #175	@ 0xaf
 80031c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <ssd1306_SetDisplayOn+0x38>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	715a      	strb	r2, [r3, #5]
 80031ca:	e004      	b.n	80031d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80031cc:	23ae      	movs	r3, #174	@ 0xae
 80031ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <ssd1306_SetDisplayOn+0x38>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fdd7 	bl	8002d8c <ssd1306_WriteCommand>
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200003cc 	.word	0x200003cc

080031ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f0:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <HAL_Init+0x28>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a07      	ldr	r2, [pc, #28]	@ (8003214 <HAL_Init+0x28>)
 80031f6:	f043 0310 	orr.w	r3, r3, #16
 80031fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031fc:	2003      	movs	r0, #3
 80031fe:	f000 f92b 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003202:	200f      	movs	r0, #15
 8003204:	f000 f808 	bl	8003218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003208:	f7ff fc84 	bl	8002b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40022000 	.word	0x40022000

08003218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003220:	4b12      	ldr	r3, [pc, #72]	@ (800326c <HAL_InitTick+0x54>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <HAL_InitTick+0x58>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4619      	mov	r1, r3
 800322a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800322e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f935 	bl	80034a6 <HAL_SYSTICK_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e00e      	b.n	8003264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d80a      	bhi.n	8003262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800324c:	2200      	movs	r2, #0
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f000 f90b 	bl	800346e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003258:	4a06      	ldr	r2, [pc, #24]	@ (8003274 <HAL_InitTick+0x5c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000000 	.word	0x20000000
 8003270:	20000008 	.word	0x20000008
 8003274:	20000004 	.word	0x20000004

08003278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_IncTick+0x1c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_IncTick+0x20>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4413      	add	r3, r2
 8003288:	4a03      	ldr	r2, [pc, #12]	@ (8003298 <HAL_IncTick+0x20>)
 800328a:	6013      	str	r3, [r2, #0]
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	20000008 	.word	0x20000008
 8003298:	200003d4 	.word	0x200003d4

0800329c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return uwTick;
 80032a0:	4b02      	ldr	r3, [pc, #8]	@ (80032ac <HAL_GetTick+0x10>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	200003d4 	.word	0x200003d4

080032b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff fff0 	bl	800329c <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d005      	beq.n	80032d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <HAL_Delay+0x44>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d6:	bf00      	nop
 80032d8:	f7ff ffe0 	bl	800329c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d8f7      	bhi.n	80032d8 <HAL_Delay+0x28>
  {
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008

080032f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332a:	4a04      	ldr	r2, [pc, #16]	@ (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60d3      	str	r3, [r2, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <__NVIC_GetPriorityGrouping+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0307 	and.w	r3, r3, #7
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	@ (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	@ (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f1c3 0307 	rsb	r3, r3, #7
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf28      	it	cs
 80033ce:	2304      	movcs	r3, #4
 80033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d902      	bls.n	80033e0 <NVIC_EncodePriority+0x30>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3b03      	subs	r3, #3
 80033de:	e000      	b.n	80033e2 <NVIC_EncodePriority+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43d9      	mvns	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	4313      	orrs	r3, r2
         );
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	@ 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff90 	bl	800335c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff49 	bl	80032f8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff5e 	bl	8003340 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff90 	bl	80033b0 <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5f 	bl	800335c <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffb0 	bl	8003414 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b08b      	sub	sp, #44	@ 0x2c
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d2:	e169      	b.n	80037a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034d4:	2201      	movs	r2, #1
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	f040 8158 	bne.w	80037a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003760 <HAL_GPIO_Init+0x2a0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d05e      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 80034fc:	4a98      	ldr	r2, [pc, #608]	@ (8003760 <HAL_GPIO_Init+0x2a0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d875      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 8003502:	4a98      	ldr	r2, [pc, #608]	@ (8003764 <HAL_GPIO_Init+0x2a4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d058      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 8003508:	4a96      	ldr	r2, [pc, #600]	@ (8003764 <HAL_GPIO_Init+0x2a4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d86f      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 800350e:	4a96      	ldr	r2, [pc, #600]	@ (8003768 <HAL_GPIO_Init+0x2a8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d052      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 8003514:	4a94      	ldr	r2, [pc, #592]	@ (8003768 <HAL_GPIO_Init+0x2a8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d869      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 800351a:	4a94      	ldr	r2, [pc, #592]	@ (800376c <HAL_GPIO_Init+0x2ac>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04c      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 8003520:	4a92      	ldr	r2, [pc, #584]	@ (800376c <HAL_GPIO_Init+0x2ac>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d863      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 8003526:	4a92      	ldr	r2, [pc, #584]	@ (8003770 <HAL_GPIO_Init+0x2b0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d046      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 800352c:	4a90      	ldr	r2, [pc, #576]	@ (8003770 <HAL_GPIO_Init+0x2b0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d85d      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 8003532:	2b12      	cmp	r3, #18
 8003534:	d82a      	bhi.n	800358c <HAL_GPIO_Init+0xcc>
 8003536:	2b12      	cmp	r3, #18
 8003538:	d859      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 800353a:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <HAL_GPIO_Init+0x80>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	080035bb 	.word	0x080035bb
 8003544:	08003595 	.word	0x08003595
 8003548:	080035a7 	.word	0x080035a7
 800354c:	080035e9 	.word	0x080035e9
 8003550:	080035ef 	.word	0x080035ef
 8003554:	080035ef 	.word	0x080035ef
 8003558:	080035ef 	.word	0x080035ef
 800355c:	080035ef 	.word	0x080035ef
 8003560:	080035ef 	.word	0x080035ef
 8003564:	080035ef 	.word	0x080035ef
 8003568:	080035ef 	.word	0x080035ef
 800356c:	080035ef 	.word	0x080035ef
 8003570:	080035ef 	.word	0x080035ef
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035ef 	.word	0x080035ef
 800357c:	080035ef 	.word	0x080035ef
 8003580:	080035ef 	.word	0x080035ef
 8003584:	0800359d 	.word	0x0800359d
 8003588:	080035b1 	.word	0x080035b1
 800358c:	4a79      	ldr	r2, [pc, #484]	@ (8003774 <HAL_GPIO_Init+0x2b4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003592:	e02c      	b.n	80035ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	623b      	str	r3, [r7, #32]
          break;
 800359a:	e029      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	3304      	adds	r3, #4
 80035a2:	623b      	str	r3, [r7, #32]
          break;
 80035a4:	e024      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	3308      	adds	r3, #8
 80035ac:	623b      	str	r3, [r7, #32]
          break;
 80035ae:	e01f      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	330c      	adds	r3, #12
 80035b6:	623b      	str	r3, [r7, #32]
          break;
 80035b8:	e01a      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035c2:	2304      	movs	r3, #4
 80035c4:	623b      	str	r3, [r7, #32]
          break;
 80035c6:	e013      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d0:	2308      	movs	r3, #8
 80035d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	611a      	str	r2, [r3, #16]
          break;
 80035da:	e009      	b.n	80035f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035dc:	2308      	movs	r3, #8
 80035de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	615a      	str	r2, [r3, #20]
          break;
 80035e6:	e003      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
          break;
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          break;
 80035ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2bff      	cmp	r3, #255	@ 0xff
 80035f4:	d801      	bhi.n	80035fa <HAL_GPIO_Init+0x13a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	e001      	b.n	80035fe <HAL_GPIO_Init+0x13e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2bff      	cmp	r3, #255	@ 0xff
 8003604:	d802      	bhi.n	800360c <HAL_GPIO_Init+0x14c>
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	e002      	b.n	8003612 <HAL_GPIO_Init+0x152>
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	3b08      	subs	r3, #8
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	210f      	movs	r1, #15
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80b1 	beq.w	80037a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003640:	4b4d      	ldr	r3, [pc, #308]	@ (8003778 <HAL_GPIO_Init+0x2b8>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4a4c      	ldr	r2, [pc, #304]	@ (8003778 <HAL_GPIO_Init+0x2b8>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6193      	str	r3, [r2, #24]
 800364c:	4b4a      	ldr	r3, [pc, #296]	@ (8003778 <HAL_GPIO_Init+0x2b8>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003658:	4a48      	ldr	r2, [pc, #288]	@ (800377c <HAL_GPIO_Init+0x2bc>)
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	3302      	adds	r3, #2
 8003660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	220f      	movs	r2, #15
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a40      	ldr	r2, [pc, #256]	@ (8003780 <HAL_GPIO_Init+0x2c0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <HAL_GPIO_Init+0x1ec>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3f      	ldr	r2, [pc, #252]	@ (8003784 <HAL_GPIO_Init+0x2c4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00d      	beq.n	80036a8 <HAL_GPIO_Init+0x1e8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3e      	ldr	r2, [pc, #248]	@ (8003788 <HAL_GPIO_Init+0x2c8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <HAL_GPIO_Init+0x1e4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3d      	ldr	r2, [pc, #244]	@ (800378c <HAL_GPIO_Init+0x2cc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_GPIO_Init+0x1e0>
 800369c:	2303      	movs	r3, #3
 800369e:	e006      	b.n	80036ae <HAL_GPIO_Init+0x1ee>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e004      	b.n	80036ae <HAL_GPIO_Init+0x1ee>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e002      	b.n	80036ae <HAL_GPIO_Init+0x1ee>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_GPIO_Init+0x1ee>
 80036ac:	2300      	movs	r3, #0
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	f002 0203 	and.w	r2, r2, #3
 80036b4:	0092      	lsls	r2, r2, #2
 80036b6:	4093      	lsls	r3, r2
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036be:	492f      	ldr	r1, [pc, #188]	@ (800377c <HAL_GPIO_Init+0x2bc>)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	492c      	ldr	r1, [pc, #176]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]
 80036e4:	e006      	b.n	80036f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4928      	ldr	r1, [pc, #160]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003700:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	4922      	ldr	r1, [pc, #136]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	43db      	mvns	r3, r3
 8003716:	491e      	ldr	r1, [pc, #120]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003718:	4013      	ands	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d006      	beq.n	8003736 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003728:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4918      	ldr	r1, [pc, #96]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	43db      	mvns	r3, r3
 800373e:	4914      	ldr	r1, [pc, #80]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003740:	4013      	ands	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d021      	beq.n	8003794 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003750:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	490e      	ldr	r1, [pc, #56]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	e021      	b.n	80037a2 <HAL_GPIO_Init+0x2e2>
 800375e:	bf00      	nop
 8003760:	10320000 	.word	0x10320000
 8003764:	10310000 	.word	0x10310000
 8003768:	10220000 	.word	0x10220000
 800376c:	10210000 	.word	0x10210000
 8003770:	10120000 	.word	0x10120000
 8003774:	10110000 	.word	0x10110000
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	40010800 	.word	0x40010800
 8003784:	40010c00 	.word	0x40010c00
 8003788:	40011000 	.word	0x40011000
 800378c:	40011400 	.word	0x40011400
 8003790:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	43db      	mvns	r3, r3
 800379c:	4909      	ldr	r1, [pc, #36]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 800379e:	4013      	ands	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	3301      	adds	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f47f ae8e 	bne.w	80034d4 <HAL_GPIO_Init+0x14>
  }
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	372c      	adds	r7, #44	@ 0x2c
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40010400 	.word	0x40010400

080037c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e001      	b.n	80037ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e12b      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff f9aa 	bl	8002b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800384a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800385a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800385c:	f001 fd2a 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a81      	ldr	r2, [pc, #516]	@ (8003a6c <HAL_I2C_Init+0x274>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d807      	bhi.n	800387c <HAL_I2C_Init+0x84>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a80      	ldr	r2, [pc, #512]	@ (8003a70 <HAL_I2C_Init+0x278>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e006      	b.n	800388a <HAL_I2C_Init+0x92>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a74 <HAL_I2C_Init+0x27c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0e7      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a78      	ldr	r2, [pc, #480]	@ (8003a78 <HAL_I2C_Init+0x280>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a6c <HAL_I2C_Init+0x274>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d802      	bhi.n	80038cc <HAL_I2C_Init+0xd4>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	e009      	b.n	80038e0 <HAL_I2C_Init+0xe8>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	4a69      	ldr	r2, [pc, #420]	@ (8003a7c <HAL_I2C_Init+0x284>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	3301      	adds	r3, #1
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	495c      	ldr	r1, [pc, #368]	@ (8003a6c <HAL_I2C_Init+0x274>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d819      	bhi.n	8003934 <HAL_I2C_Init+0x13c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e59      	subs	r1, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fbb1 f3f3 	udiv	r3, r1, r3
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003914:	400b      	ands	r3, r1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_I2C_Init+0x138>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e59      	subs	r1, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fbb1 f3f3 	udiv	r3, r1, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	e051      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003930:	2304      	movs	r3, #4
 8003932:	e04f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_I2C_Init+0x168>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e58      	subs	r0, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e012      	b.n	8003986 <HAL_I2C_Init+0x18e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x196>
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10e      	bne.n	80039b4 <HAL_I2C_Init+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e58      	subs	r0, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	440b      	add	r3, r1
 80039a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b2:	e00f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6809      	ldr	r1, [r1, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6911      	ldr	r1, [r2, #16]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	000186a0 	.word	0x000186a0
 8003a70:	001e847f 	.word	0x001e847f
 8003a74:	003d08ff 	.word	0x003d08ff
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	10624dd3 	.word	0x10624dd3

08003a80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	817b      	strh	r3, [r7, #10]
 8003a92:	460b      	mov	r3, r1
 8003a94:	813b      	strh	r3, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a9a:	f7ff fbff 	bl	800329c <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	f040 80d9 	bne.w	8003c60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2319      	movs	r3, #25
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	496d      	ldr	r1, [pc, #436]	@ (8003c6c <HAL_I2C_Mem_Write+0x1ec>)
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fdfb 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e0cc      	b.n	8003c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_I2C_Mem_Write+0x56>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0c5      	b.n	8003c62 <HAL_I2C_Mem_Write+0x1e2>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d007      	beq.n	8003afc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2221      	movs	r2, #33	@ 0x21
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2240      	movs	r2, #64	@ 0x40
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c70 <HAL_I2C_Mem_Write+0x1f0>)
 8003b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b3e:	88f8      	ldrh	r0, [r7, #6]
 8003b40:	893a      	ldrh	r2, [r7, #8]
 8003b42:	8979      	ldrh	r1, [r7, #10]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fc32 	bl	80043b8 <I2C_RequestMemoryWrite>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d052      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e081      	b.n	8003c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fec0 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d107      	bne.n	8003b86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06b      	b.n	8003c62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d11b      	bne.n	8003c00 <HAL_I2C_Mem_Write+0x180>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d017      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1aa      	bne.n	8003b5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 feb3 	bl	8004978 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e016      	b.n	8003c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	00100002 	.word	0x00100002
 8003c70:	ffff0000 	.word	0xffff0000

08003c74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	@ 0x30
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	817b      	strh	r3, [r7, #10]
 8003c86:	460b      	mov	r3, r1
 8003c88:	813b      	strh	r3, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c92:	f7ff fb03 	bl	800329c <HAL_GetTick>
 8003c96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	f040 8250 	bne.w	8004146 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2319      	movs	r3, #25
 8003cac:	2201      	movs	r2, #1
 8003cae:	4982      	ldr	r1, [pc, #520]	@ (8003eb8 <HAL_I2C_Mem_Read+0x244>)
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fcff 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e243      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_I2C_Mem_Read+0x5a>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e23c      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d007      	beq.n	8003cf4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2222      	movs	r2, #34	@ 0x22
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2240      	movs	r2, #64	@ 0x40
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a62      	ldr	r2, [pc, #392]	@ (8003ebc <HAL_I2C_Mem_Read+0x248>)
 8003d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d36:	88f8      	ldrh	r0, [r7, #6]
 8003d38:	893a      	ldrh	r2, [r7, #8]
 8003d3a:	8979      	ldrh	r1, [r7, #10]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	4603      	mov	r3, r0
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fbcc 	bl	80044e4 <I2C_RequestMemoryRead>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e1f8      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d113      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e1cc      	b.n	8004120 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d11e      	bne.n	8003dcc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9e:	b672      	cpsid	i
}
 8003da0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc8:	b662      	cpsie	i
}
 8003dca:	e035      	b.n	8003e38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d11e      	bne.n	8003e12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003de4:	b672      	cpsid	i
}
 8003de6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e0e:	b662      	cpsie	i
}
 8003e10:	e012      	b.n	8003e38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e38:	e172      	b.n	8004120 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	f200 811f 	bhi.w	8004082 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d123      	bne.n	8003e94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fdd9 	bl	8004a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e173      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e92:	e145      	b.n	8004120 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d152      	bne.n	8003f42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4906      	ldr	r1, [pc, #24]	@ (8003ec0 <HAL_I2C_Mem_Read+0x24c>)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc04 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e148      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
 8003eb6:	bf00      	nop
 8003eb8:	00100002 	.word	0x00100002
 8003ebc:	ffff0000 	.word	0xffff0000
 8003ec0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec4:	b672      	cpsid	i
}
 8003ec6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f0a:	b662      	cpsie	i
}
 8003f0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f40:	e0ee      	b.n	8004120 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4981      	ldr	r1, [pc, #516]	@ (8004150 <HAL_I2C_Mem_Read+0x4dc>)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fbb1 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0f5      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f6c:	b672      	cpsid	i
}
 8003f6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8004154 <HAL_I2C_Mem_Read+0x4e0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8004158 <HAL_I2C_Mem_Read+0x4e4>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	0a1a      	lsrs	r2, r3, #8
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00da      	lsls	r2, r3, #3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d118      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fea:	b662      	cpsie	i
}
 8003fec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0a6      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d1d9      	bne.n	8003fbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800404a:	b662      	cpsie	i
}
 800404c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004080:	e04e      	b.n	8004120 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004084:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fcbe 	bl	8004a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e058      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d124      	bne.n	8004120 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f ae88 	bne.w	8003e3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	@ 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	00010004 	.word	0x00010004
 8004154:	20000000 	.word	0x20000000
 8004158:	14f8b589 	.word	0x14f8b589

0800415c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	@ 0x28
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	460b      	mov	r3, r1
 800416a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800416c:	f7ff f896 	bl	800329c <HAL_GetTick>
 8004170:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b20      	cmp	r3, #32
 8004180:	f040 8111 	bne.w	80043a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2319      	movs	r3, #25
 800418a:	2201      	movs	r2, #1
 800418c:	4988      	ldr	r1, [pc, #544]	@ (80043b0 <HAL_I2C_IsDeviceReady+0x254>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa90 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
 800419c:	e104      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_I2C_IsDeviceReady+0x50>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0fd      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d007      	beq.n	80041d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2224      	movs	r2, #36	@ 0x24
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a70      	ldr	r2, [pc, #448]	@ (80043b4 <HAL_I2C_IsDeviceReady+0x258>)
 80041f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004204:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa4e 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422c:	d103      	bne.n	8004236 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0b6      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004248:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800424a:	f7ff f827 	bl	800329c <HAL_GetTick>
 800424e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800427e:	e025      	b.n	80042cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004280:	f7ff f80c 	bl	800329c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <HAL_I2C_IsDeviceReady+0x13a>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	22a0      	movs	r2, #160	@ 0xa0
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80042d6:	d005      	beq.n	80042e4 <HAL_I2C_IsDeviceReady+0x188>
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_I2C_IsDeviceReady+0x188>
 80042de:	7dbb      	ldrb	r3, [r7, #22]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0cd      	beq.n	8004280 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d129      	bne.n	800434e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004308:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2319      	movs	r3, #25
 8004326:	2201      	movs	r2, #1
 8004328:	4921      	ldr	r1, [pc, #132]	@ (80043b0 <HAL_I2C_IsDeviceReady+0x254>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f9c2 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e036      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e02c      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004366:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2319      	movs	r3, #25
 800436e:	2201      	movs	r2, #1
 8004370:	490f      	ldr	r1, [pc, #60]	@ (80043b0 <HAL_I2C_IsDeviceReady+0x254>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f99e 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e012      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3301      	adds	r3, #1
 8004386:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	f4ff af32 	bcc.w	80041f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00100002 	.word	0x00100002
 80043b4:	ffff0000 	.word	0xffff0000

080043b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	460b      	mov	r3, r1
 80043cc:	813b      	strh	r3, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f960 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004408:	d103      	bne.n	8004412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e05f      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	492d      	ldr	r1, [pc, #180]	@ (80044e0 <I2C_RequestMemoryWrite+0x128>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f9bb 	bl	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e04c      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	6a39      	ldr	r1, [r7, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa46 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	2b04      	cmp	r3, #4
 8004468:	d107      	bne.n	800447a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e02b      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]
 800448e:	e021      	b.n	80044d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	b29b      	uxth	r3, r3
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a0:	6a39      	ldr	r1, [r7, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fa20 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d107      	bne.n	80044c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e005      	b.n	80044d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ca:	893b      	ldrh	r3, [r7, #8]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00010002 	.word	0x00010002

080044e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800450c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2200      	movs	r2, #0
 8004526:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8c2 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004544:	d103      	bne.n	800454e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0aa      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	4952      	ldr	r1, [pc, #328]	@ (80046b0 <I2C_RequestMemoryRead+0x1cc>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f91d 	bl	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e097      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	6a39      	ldr	r1, [r7, #32]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f9a8 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d107      	bne.n	80045b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e076      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	e021      	b.n	8004610 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f982 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e050      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004606:	893b      	ldrh	r3, [r7, #8]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004612:	6a39      	ldr	r1, [r7, #32]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f967 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	2b04      	cmp	r3, #4
 8004626:	d107      	bne.n	8004638 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e035      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800464a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2200      	movs	r2, #0
 8004654:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f82b 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d103      	bne.n	800467c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e013      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	4906      	ldr	r1, [pc, #24]	@ (80046b0 <I2C_RequestMemoryRead+0x1cc>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f886 	bl	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c4:	e048      	b.n	8004758 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d044      	beq.n	8004758 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7fe fde5 	bl	800329c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d139      	bne.n	8004758 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d10d      	bne.n	800470a <I2C_WaitOnFlagUntilTimeout+0x56>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	43da      	mvns	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4013      	ands	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	e00c      	b.n	8004724 <I2C_WaitOnFlagUntilTimeout+0x70>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	43da      	mvns	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	429a      	cmp	r2, r3
 8004728:	d116      	bne.n	8004758 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e023      	b.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10d      	bne.n	800477e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	43da      	mvns	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	e00c      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	43da      	mvns	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	429a      	cmp	r2, r3
 800479c:	d093      	beq.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b6:	e071      	b.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d123      	bne.n	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	f043 0204 	orr.w	r2, r3, #4
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e067      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d041      	beq.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7fe fd40 	bl	800329c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d136      	bne.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10c      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	e00b      	b.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	43da      	mvns	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4013      	ands	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e021      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10c      	bne.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	43da      	mvns	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4013      	ands	r3, r2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e00b      	b.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf14      	ite	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	2300      	moveq	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f47f af6d 	bne.w	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f4:	e034      	b.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8e3 	bl	8004ac2 <I2C_IsAcknowledgeFailed>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e034      	b.n	8004970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d028      	beq.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe fcc5 	bl	800329c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11d      	bne.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492e:	2b80      	cmp	r3, #128	@ 0x80
 8004930:	d016      	beq.n	8004960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e007      	b.n	8004970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496a:	2b80      	cmp	r3, #128	@ 0x80
 800496c:	d1c3      	bne.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004984:	e034      	b.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f89b 	bl	8004ac2 <I2C_IsAcknowledgeFailed>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e034      	b.n	8004a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d028      	beq.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fc7d 	bl	800329c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d11d      	bne.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d016      	beq.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e007      	b.n	8004a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d1c3      	bne.n	8004986 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a14:	e049      	b.n	8004aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d119      	bne.n	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0210 	mvn.w	r2, #16
 8004a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e030      	b.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7fe fc20 	bl	800329c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11d      	bne.n	8004aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b40      	cmp	r3, #64	@ 0x40
 8004a7a:	d016      	beq.n	8004aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e007      	b.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d1ae      	bne.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad8:	d11b      	bne.n	8004b12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ae2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f043 0204 	orr.w	r2, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
	...

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e272      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8087 	beq.w	8004c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b40:	4b92      	ldr	r3, [pc, #584]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d00c      	beq.n	8004b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 030c 	and.w	r3, r3, #12
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d112      	bne.n	8004b7e <HAL_RCC_OscConfig+0x5e>
 8004b58:	4b8c      	ldr	r3, [pc, #560]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b64:	d10b      	bne.n	8004b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b66:	4b89      	ldr	r3, [pc, #548]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d06c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x12c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d168      	bne.n	8004c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e24c      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x76>
 8004b88:	4b80      	ldr	r3, [pc, #512]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7f      	ldr	r2, [pc, #508]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e02e      	b.n	8004bf4 <HAL_RCC_OscConfig+0xd4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x98>
 8004b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7a      	ldr	r2, [pc, #488]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b78      	ldr	r3, [pc, #480]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a77      	ldr	r2, [pc, #476]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e01d      	b.n	8004bf4 <HAL_RCC_OscConfig+0xd4>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0xbc>
 8004bc2:	4b72      	ldr	r3, [pc, #456]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a71      	ldr	r2, [pc, #452]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b6f      	ldr	r3, [pc, #444]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0xd4>
 8004bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6a      	ldr	r2, [pc, #424]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b68      	ldr	r3, [pc, #416]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a67      	ldr	r2, [pc, #412]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d013      	beq.n	8004c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fb4e 	bl	800329c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe fb4a 	bl	800329c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e200      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b5d      	ldr	r3, [pc, #372]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0xe4>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe fb3a 	bl	800329c <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe fb36 	bl	800329c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	@ 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e1ec      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x10c>
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d063      	beq.n	8004d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c66:	4b49      	ldr	r3, [pc, #292]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d11c      	bne.n	8004cac <HAL_RCC_OscConfig+0x18c>
 8004c72:	4b46      	ldr	r3, [pc, #280]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d116      	bne.n	8004cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_RCC_OscConfig+0x176>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e1c0      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c96:	4b3d      	ldr	r3, [pc, #244]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4939      	ldr	r1, [pc, #228]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004caa:	e03a      	b.n	8004d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb4:	4b36      	ldr	r3, [pc, #216]	@ (8004d90 <HAL_RCC_OscConfig+0x270>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fe faef 	bl	800329c <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc2:	f7fe faeb 	bl	800329c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e1a1      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4927      	ldr	r1, [pc, #156]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
 8004cf4:	e015      	b.n	8004d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf6:	4b26      	ldr	r3, [pc, #152]	@ (8004d90 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fe face 	bl	800329c <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d04:	f7fe faca 	bl	800329c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e180      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d03a      	beq.n	8004da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d019      	beq.n	8004d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d36:	4b17      	ldr	r3, [pc, #92]	@ (8004d94 <HAL_RCC_OscConfig+0x274>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fe faae 	bl	800329c <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d44:	f7fe faaa 	bl	800329c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e160      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d62:	2001      	movs	r0, #1
 8004d64:	f000 faba 	bl	80052dc <RCC_Delay>
 8004d68:	e01c      	b.n	8004da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d70:	f7fe fa94 	bl	800329c <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d76:	e00f      	b.n	8004d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d78:	f7fe fa90 	bl	800329c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d908      	bls.n	8004d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e146      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	42420000 	.word	0x42420000
 8004d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d98:	4b92      	ldr	r3, [pc, #584]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e9      	bne.n	8004d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a6 	beq.w	8004efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db6:	4b8b      	ldr	r3, [pc, #556]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10d      	bne.n	8004dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc2:	4b88      	ldr	r3, [pc, #544]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4a87      	ldr	r2, [pc, #540]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	61d3      	str	r3, [r2, #28]
 8004dce:	4b85      	ldr	r3, [pc, #532]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b82      	ldr	r3, [pc, #520]	@ (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d118      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7e      	ldr	r2, [pc, #504]	@ (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df6:	f7fe fa51 	bl	800329c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfe:	f7fe fa4d 	bl	800329c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b64      	cmp	r3, #100	@ 0x64
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e103      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	4b75      	ldr	r3, [pc, #468]	@ (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x312>
 8004e24:	4b6f      	ldr	r3, [pc, #444]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6213      	str	r3, [r2, #32]
 8004e30:	e02d      	b.n	8004e8e <HAL_RCC_OscConfig+0x36e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x334>
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4a69      	ldr	r2, [pc, #420]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	6213      	str	r3, [r2, #32]
 8004e46:	4b67      	ldr	r3, [pc, #412]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	4a66      	ldr	r2, [pc, #408]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	6213      	str	r3, [r2, #32]
 8004e52:	e01c      	b.n	8004e8e <HAL_RCC_OscConfig+0x36e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d10c      	bne.n	8004e76 <HAL_RCC_OscConfig+0x356>
 8004e5c:	4b61      	ldr	r3, [pc, #388]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4a60      	ldr	r2, [pc, #384]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e62:	f043 0304 	orr.w	r3, r3, #4
 8004e66:	6213      	str	r3, [r2, #32]
 8004e68:	4b5e      	ldr	r3, [pc, #376]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6213      	str	r3, [r2, #32]
 8004e74:	e00b      	b.n	8004e8e <HAL_RCC_OscConfig+0x36e>
 8004e76:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	6213      	str	r3, [r2, #32]
 8004e82:	4b58      	ldr	r3, [pc, #352]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	4a57      	ldr	r2, [pc, #348]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	f023 0304 	bic.w	r3, r3, #4
 8004e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d015      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e96:	f7fe fa01 	bl	800329c <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fe f9fd 	bl	800329c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0b1      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ee      	beq.n	8004e9e <HAL_RCC_OscConfig+0x37e>
 8004ec0:	e014      	b.n	8004eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec2:	f7fe f9eb 	bl	800329c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eca:	f7fe f9e7 	bl	800329c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e09b      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee0:	4b40      	ldr	r3, [pc, #256]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ee      	bne.n	8004eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d105      	bne.n	8004efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8087 	beq.w	8005016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f08:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d061      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d146      	bne.n	8004faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1c:	4b33      	ldr	r3, [pc, #204]	@ (8004fec <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fe f9bb 	bl	800329c <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2a:	f7fe f9b7 	bl	800329c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e06d      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3c:	4b29      	ldr	r3, [pc, #164]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f50:	d108      	bne.n	8004f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4921      	ldr	r1, [pc, #132]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a19      	ldr	r1, [r3, #32]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	430b      	orrs	r3, r1
 8004f76:	491b      	ldr	r1, [pc, #108]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x4cc>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fe f98b 	bl	800329c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fe f987 	bl	800329c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e03d      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f9c:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x46a>
 8004fa8:	e035      	b.n	8005016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <HAL_RCC_OscConfig+0x4cc>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fe f974 	bl	800329c <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fe f970 	bl	800329c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e026      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x498>
 8004fd6:	e01e      	b.n	8005016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e019      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <HAL_RCC_OscConfig+0x500>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	429a      	cmp	r2, r3
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000

08005024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0d0      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005038:	4b6a      	ldr	r3, [pc, #424]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d910      	bls.n	8005068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b67      	ldr	r3, [pc, #412]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 0207 	bic.w	r2, r3, #7
 800504e:	4965      	ldr	r1, [pc, #404]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b63      	ldr	r3, [pc, #396]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0b8      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d020      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005080:	4b59      	ldr	r3, [pc, #356]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a58      	ldr	r2, [pc, #352]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800508a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005098:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a52      	ldr	r2, [pc, #328]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80050a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b50      	ldr	r3, [pc, #320]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	494d      	ldr	r1, [pc, #308]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d040      	beq.n	8005144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b47      	ldr	r3, [pc, #284]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d115      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e07f      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b41      	ldr	r3, [pc, #260]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e073      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	4b3d      	ldr	r3, [pc, #244]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e06b      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4b39      	ldr	r3, [pc, #228]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4936      	ldr	r1, [pc, #216]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005114:	f7fe f8c2 	bl	800329c <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fe f8be 	bl	800329c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e053      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b2d      	ldr	r3, [pc, #180]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 020c 	and.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1eb      	bne.n	800511c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005144:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d210      	bcs.n	8005174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b24      	ldr	r3, [pc, #144]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	4922      	ldr	r1, [pc, #136]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b20      	ldr	r3, [pc, #128]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e032      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005180:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4916      	ldr	r1, [pc, #88]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	490e      	ldr	r1, [pc, #56]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051b2:	f000 f821 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	490a      	ldr	r1, [pc, #40]	@ (80051ec <HAL_RCC_ClockConfig+0x1c8>)
 80051c4:	5ccb      	ldrb	r3, [r1, r3]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <HAL_RCC_ClockConfig+0x1cc>)
 80051cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ce:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <HAL_RCC_ClockConfig+0x1d0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe f820 	bl	8003218 <HAL_InitTick>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40021000 	.word	0x40021000
 80051ec:	08006888 	.word	0x08006888
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000004 	.word	0x20000004

080051f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <HAL_RCC_GetSysClockFreq+0x94>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b04      	cmp	r3, #4
 8005220:	d002      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x30>
 8005222:	2b08      	cmp	r3, #8
 8005224:	d003      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x36>
 8005226:	e027      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005228:	4b19      	ldr	r3, [pc, #100]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x98>)
 800522a:	613b      	str	r3, [r7, #16]
      break;
 800522c:	e027      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	0c9b      	lsrs	r3, r3, #18
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005238:	5cd3      	ldrb	r3, [r2, r3]
 800523a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005246:	4b11      	ldr	r3, [pc, #68]	@ (800528c <HAL_RCC_GetSysClockFreq+0x94>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	0c5b      	lsrs	r3, r3, #17
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005252:	5cd3      	ldrb	r3, [r2, r3]
 8005254:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a0d      	ldr	r2, [pc, #52]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x98>)
 800525a:	fb03 f202 	mul.w	r2, r3, r2
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e004      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0c      	ldr	r2, [pc, #48]	@ (800529c <HAL_RCC_GetSysClockFreq+0xa4>)
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	613b      	str	r3, [r7, #16]
      break;
 8005276:	e002      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x98>)
 800527a:	613b      	str	r3, [r7, #16]
      break;
 800527c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800527e:	693b      	ldr	r3, [r7, #16]
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	007a1200 	.word	0x007a1200
 8005294:	08007d80 	.word	0x08007d80
 8005298:	08007d90 	.word	0x08007d90
 800529c:	003d0900 	.word	0x003d0900

080052a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a4:	4b02      	ldr	r3, [pc, #8]	@ (80052b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	20000000 	.word	0x20000000

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052b8:	f7ff fff2 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4903      	ldr	r1, [pc, #12]	@ (80052d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000
 80052d8:	08006898 	.word	0x08006898

080052dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <RCC_Delay+0x34>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <RCC_Delay+0x38>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	0a5b      	lsrs	r3, r3, #9
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052f8:	bf00      	nop
  }
  while (Delay --);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	60fa      	str	r2, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f9      	bne.n	80052f8 <RCC_Delay+0x1c>
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	20000000 	.word	0x20000000
 8005314:	10624dd3 	.word	0x10624dd3

08005318 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e093      	b.n	8005454 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7fd fc85 	bl	8002c50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f000 f903 	bl	8005578 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	4313      	orrs	r3, r2
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80053b8:	f023 030c 	bic.w	r3, r3, #12
 80053bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	4313      	orrs	r3, r2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	011a      	lsls	r2, r3, #4
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	031b      	lsls	r3, r3, #12
 80053e8:	4313      	orrs	r3, r2
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4313      	orrs	r3, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800546c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005474:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800547c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005484:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d110      	bne.n	80054ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d102      	bne.n	8005498 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005492:	7b7b      	ldrb	r3, [r7, #13]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e069      	b.n	8005570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	e031      	b.n	8005512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d110      	bne.n	80054d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d102      	bne.n	80054c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ba:	7b3b      	ldrb	r3, [r7, #12]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e055      	b.n	8005570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054d4:	e01d      	b.n	8005512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d108      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e2:	7b7b      	ldrb	r3, [r7, #13]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054e8:	7b3b      	ldrb	r3, [r7, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e03e      	b.n	8005570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_TIM_Encoder_Start+0xc4>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d008      	beq.n	8005530 <HAL_TIM_Encoder_Start+0xd4>
 800551e:	e00f      	b.n	8005540 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f893 	bl	8005654 <TIM_CCxChannelCmd>
      break;
 800552e:	e016      	b.n	800555e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	2104      	movs	r1, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f88b 	bl	8005654 <TIM_CCxChannelCmd>
      break;
 800553e:	e00e      	b.n	800555e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2201      	movs	r2, #1
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f883 	bl	8005654 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2201      	movs	r2, #1
 8005554:	2104      	movs	r1, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f87c 	bl	8005654 <TIM_CCxChannelCmd>
      break;
 800555c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a2f      	ldr	r2, [pc, #188]	@ (8005648 <TIM_Base_SetConfig+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00b      	beq.n	80055a8 <TIM_Base_SetConfig+0x30>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005596:	d007      	beq.n	80055a8 <TIM_Base_SetConfig+0x30>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a2c      	ldr	r2, [pc, #176]	@ (800564c <TIM_Base_SetConfig+0xd4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_Base_SetConfig+0x30>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005650 <TIM_Base_SetConfig+0xd8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d108      	bne.n	80055ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a22      	ldr	r2, [pc, #136]	@ (8005648 <TIM_Base_SetConfig+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c8:	d007      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <TIM_Base_SetConfig+0xd4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005650 <TIM_Base_SetConfig+0xd8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a0d      	ldr	r2, [pc, #52]	@ (8005648 <TIM_Base_SetConfig+0xd0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]
  }
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800

08005654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2201      	movs	r2, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	43db      	mvns	r3, r3
 8005676:	401a      	ands	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e046      	b.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a16      	ldr	r2, [pc, #88]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00e      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d009      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a10      	ldr	r2, [pc, #64]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10c      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4313      	orrs	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800

08005758 <memset>:
 8005758:	4603      	mov	r3, r0
 800575a:	4402      	add	r2, r0
 800575c:	4293      	cmp	r3, r2
 800575e:	d100      	bne.n	8005762 <memset+0xa>
 8005760:	4770      	bx	lr
 8005762:	f803 1b01 	strb.w	r1, [r3], #1
 8005766:	e7f9      	b.n	800575c <memset+0x4>

08005768 <__errno>:
 8005768:	4b01      	ldr	r3, [pc, #4]	@ (8005770 <__errno+0x8>)
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	2000000c 	.word	0x2000000c

08005774 <__libc_init_array>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	2600      	movs	r6, #0
 8005778:	4d0c      	ldr	r5, [pc, #48]	@ (80057ac <__libc_init_array+0x38>)
 800577a:	4c0d      	ldr	r4, [pc, #52]	@ (80057b0 <__libc_init_array+0x3c>)
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	42a6      	cmp	r6, r4
 8005782:	d109      	bne.n	8005798 <__libc_init_array+0x24>
 8005784:	f001 f868 	bl	8006858 <_init>
 8005788:	2600      	movs	r6, #0
 800578a:	4d0a      	ldr	r5, [pc, #40]	@ (80057b4 <__libc_init_array+0x40>)
 800578c:	4c0a      	ldr	r4, [pc, #40]	@ (80057b8 <__libc_init_array+0x44>)
 800578e:	1b64      	subs	r4, r4, r5
 8005790:	10a4      	asrs	r4, r4, #2
 8005792:	42a6      	cmp	r6, r4
 8005794:	d105      	bne.n	80057a2 <__libc_init_array+0x2e>
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	f855 3b04 	ldr.w	r3, [r5], #4
 800579c:	4798      	blx	r3
 800579e:	3601      	adds	r6, #1
 80057a0:	e7ee      	b.n	8005780 <__libc_init_array+0xc>
 80057a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a6:	4798      	blx	r3
 80057a8:	3601      	adds	r6, #1
 80057aa:	e7f2      	b.n	8005792 <__libc_init_array+0x1e>
 80057ac:	08007dd8 	.word	0x08007dd8
 80057b0:	08007dd8 	.word	0x08007dd8
 80057b4:	08007dd8 	.word	0x08007dd8
 80057b8:	08007ddc 	.word	0x08007ddc

080057bc <pow>:
 80057bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c0:	4614      	mov	r4, r2
 80057c2:	461d      	mov	r5, r3
 80057c4:	4680      	mov	r8, r0
 80057c6:	4689      	mov	r9, r1
 80057c8:	f000 f9aa 	bl	8005b20 <__ieee754_pow>
 80057cc:	4622      	mov	r2, r4
 80057ce:	4606      	mov	r6, r0
 80057d0:	460f      	mov	r7, r1
 80057d2:	462b      	mov	r3, r5
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fb f910 	bl	80009fc <__aeabi_dcmpun>
 80057dc:	bbc8      	cbnz	r0, 8005852 <pow+0x96>
 80057de:	2200      	movs	r2, #0
 80057e0:	2300      	movs	r3, #0
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f7fb f8d7 	bl	8000998 <__aeabi_dcmpeq>
 80057ea:	b1b8      	cbz	r0, 800581c <pow+0x60>
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	4620      	mov	r0, r4
 80057f2:	4629      	mov	r1, r5
 80057f4:	f7fb f8d0 	bl	8000998 <__aeabi_dcmpeq>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d141      	bne.n	8005880 <pow+0xc4>
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f000 f844 	bl	800588c <finite>
 8005804:	b328      	cbz	r0, 8005852 <pow+0x96>
 8005806:	2200      	movs	r2, #0
 8005808:	2300      	movs	r3, #0
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f7fb f8cd 	bl	80009ac <__aeabi_dcmplt>
 8005812:	b1f0      	cbz	r0, 8005852 <pow+0x96>
 8005814:	f7ff ffa8 	bl	8005768 <__errno>
 8005818:	2322      	movs	r3, #34	@ 0x22
 800581a:	e019      	b.n	8005850 <pow+0x94>
 800581c:	4630      	mov	r0, r6
 800581e:	4639      	mov	r1, r7
 8005820:	f000 f834 	bl	800588c <finite>
 8005824:	b9c8      	cbnz	r0, 800585a <pow+0x9e>
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f000 f82f 	bl	800588c <finite>
 800582e:	b1a0      	cbz	r0, 800585a <pow+0x9e>
 8005830:	4620      	mov	r0, r4
 8005832:	4629      	mov	r1, r5
 8005834:	f000 f82a 	bl	800588c <finite>
 8005838:	b178      	cbz	r0, 800585a <pow+0x9e>
 800583a:	4632      	mov	r2, r6
 800583c:	463b      	mov	r3, r7
 800583e:	4630      	mov	r0, r6
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f8db 	bl	80009fc <__aeabi_dcmpun>
 8005846:	2800      	cmp	r0, #0
 8005848:	d0e4      	beq.n	8005814 <pow+0x58>
 800584a:	f7ff ff8d 	bl	8005768 <__errno>
 800584e:	2321      	movs	r3, #33	@ 0x21
 8005850:	6003      	str	r3, [r0, #0]
 8005852:	4630      	mov	r0, r6
 8005854:	4639      	mov	r1, r7
 8005856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800585a:	2200      	movs	r2, #0
 800585c:	2300      	movs	r3, #0
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7fb f899 	bl	8000998 <__aeabi_dcmpeq>
 8005866:	2800      	cmp	r0, #0
 8005868:	d0f3      	beq.n	8005852 <pow+0x96>
 800586a:	4640      	mov	r0, r8
 800586c:	4649      	mov	r1, r9
 800586e:	f000 f80d 	bl	800588c <finite>
 8005872:	2800      	cmp	r0, #0
 8005874:	d0ed      	beq.n	8005852 <pow+0x96>
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f000 f807 	bl	800588c <finite>
 800587e:	e7c8      	b.n	8005812 <pow+0x56>
 8005880:	2600      	movs	r6, #0
 8005882:	4f01      	ldr	r7, [pc, #4]	@ (8005888 <pow+0xcc>)
 8005884:	e7e5      	b.n	8005852 <pow+0x96>
 8005886:	bf00      	nop
 8005888:	3ff00000 	.word	0x3ff00000

0800588c <finite>:
 800588c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8005890:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005894:	0fc0      	lsrs	r0, r0, #31
 8005896:	4770      	bx	lr

08005898 <ceil>:
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80058a0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80058a4:	2e13      	cmp	r6, #19
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	460c      	mov	r4, r1
 80058ac:	4605      	mov	r5, r0
 80058ae:	4680      	mov	r8, r0
 80058b0:	dc2f      	bgt.n	8005912 <ceil+0x7a>
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	da11      	bge.n	80058da <ceil+0x42>
 80058b6:	a332      	add	r3, pc, #200	@ (adr r3, 8005980 <ceil+0xe8>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fc4e 	bl	800015c <__adddf3>
 80058c0:	2200      	movs	r2, #0
 80058c2:	2300      	movs	r3, #0
 80058c4:	f7fb f890 	bl	80009e8 <__aeabi_dcmpgt>
 80058c8:	b120      	cbz	r0, 80058d4 <ceil+0x3c>
 80058ca:	2c00      	cmp	r4, #0
 80058cc:	db51      	blt.n	8005972 <ceil+0xda>
 80058ce:	4325      	orrs	r5, r4
 80058d0:	d153      	bne.n	800597a <ceil+0xe2>
 80058d2:	462c      	mov	r4, r5
 80058d4:	4623      	mov	r3, r4
 80058d6:	462a      	mov	r2, r5
 80058d8:	e024      	b.n	8005924 <ceil+0x8c>
 80058da:	4f2b      	ldr	r7, [pc, #172]	@ (8005988 <ceil+0xf0>)
 80058dc:	4137      	asrs	r7, r6
 80058de:	ea01 0c07 	and.w	ip, r1, r7
 80058e2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80058e6:	d01d      	beq.n	8005924 <ceil+0x8c>
 80058e8:	a325      	add	r3, pc, #148	@ (adr r3, 8005980 <ceil+0xe8>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fc35 	bl	800015c <__adddf3>
 80058f2:	2200      	movs	r2, #0
 80058f4:	2300      	movs	r3, #0
 80058f6:	f7fb f877 	bl	80009e8 <__aeabi_dcmpgt>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0ea      	beq.n	80058d4 <ceil+0x3c>
 80058fe:	2c00      	cmp	r4, #0
 8005900:	bfc2      	ittt	gt
 8005902:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005906:	4133      	asrgt	r3, r6
 8005908:	18e4      	addgt	r4, r4, r3
 800590a:	2500      	movs	r5, #0
 800590c:	ea24 0407 	bic.w	r4, r4, r7
 8005910:	e7e0      	b.n	80058d4 <ceil+0x3c>
 8005912:	2e33      	cmp	r6, #51	@ 0x33
 8005914:	dd0a      	ble.n	800592c <ceil+0x94>
 8005916:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800591a:	d103      	bne.n	8005924 <ceil+0x8c>
 800591c:	f7fa fc1e 	bl	800015c <__adddf3>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	f04f 3cff 	mov.w	ip, #4294967295
 8005930:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005934:	fa2c f707 	lsr.w	r7, ip, r7
 8005938:	4238      	tst	r0, r7
 800593a:	d0f3      	beq.n	8005924 <ceil+0x8c>
 800593c:	a310      	add	r3, pc, #64	@ (adr r3, 8005980 <ceil+0xe8>)
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f7fa fc0b 	bl	800015c <__adddf3>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	f7fb f84d 	bl	80009e8 <__aeabi_dcmpgt>
 800594e:	2800      	cmp	r0, #0
 8005950:	d0c0      	beq.n	80058d4 <ceil+0x3c>
 8005952:	2c00      	cmp	r4, #0
 8005954:	dd0a      	ble.n	800596c <ceil+0xd4>
 8005956:	2e14      	cmp	r6, #20
 8005958:	d101      	bne.n	800595e <ceil+0xc6>
 800595a:	3401      	adds	r4, #1
 800595c:	e006      	b.n	800596c <ceil+0xd4>
 800595e:	2301      	movs	r3, #1
 8005960:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005964:	40b3      	lsls	r3, r6
 8005966:	441d      	add	r5, r3
 8005968:	45a8      	cmp	r8, r5
 800596a:	d8f6      	bhi.n	800595a <ceil+0xc2>
 800596c:	ea25 0507 	bic.w	r5, r5, r7
 8005970:	e7b0      	b.n	80058d4 <ceil+0x3c>
 8005972:	2500      	movs	r5, #0
 8005974:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005978:	e7ac      	b.n	80058d4 <ceil+0x3c>
 800597a:	2500      	movs	r5, #0
 800597c:	4c03      	ldr	r4, [pc, #12]	@ (800598c <ceil+0xf4>)
 800597e:	e7a9      	b.n	80058d4 <ceil+0x3c>
 8005980:	8800759c 	.word	0x8800759c
 8005984:	7e37e43c 	.word	0x7e37e43c
 8005988:	000fffff 	.word	0x000fffff
 800598c:	3ff00000 	.word	0x3ff00000

08005990 <floor>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005998:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800599c:	2e13      	cmp	r6, #19
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	460c      	mov	r4, r1
 80059a4:	4605      	mov	r5, r0
 80059a6:	4680      	mov	r8, r0
 80059a8:	dc35      	bgt.n	8005a16 <floor+0x86>
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	da17      	bge.n	80059de <floor+0x4e>
 80059ae:	a334      	add	r3, pc, #208	@ (adr r3, 8005a80 <floor+0xf0>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fa fbd2 	bl	800015c <__adddf3>
 80059b8:	2200      	movs	r2, #0
 80059ba:	2300      	movs	r3, #0
 80059bc:	f7fb f814 	bl	80009e8 <__aeabi_dcmpgt>
 80059c0:	b150      	cbz	r0, 80059d8 <floor+0x48>
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	da57      	bge.n	8005a76 <floor+0xe6>
 80059c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80059ca:	432c      	orrs	r4, r5
 80059cc:	2500      	movs	r5, #0
 80059ce:	42ac      	cmp	r4, r5
 80059d0:	4c2d      	ldr	r4, [pc, #180]	@ (8005a88 <floor+0xf8>)
 80059d2:	bf08      	it	eq
 80059d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80059d8:	4623      	mov	r3, r4
 80059da:	462a      	mov	r2, r5
 80059dc:	e024      	b.n	8005a28 <floor+0x98>
 80059de:	4f2b      	ldr	r7, [pc, #172]	@ (8005a8c <floor+0xfc>)
 80059e0:	4137      	asrs	r7, r6
 80059e2:	ea01 0c07 	and.w	ip, r1, r7
 80059e6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80059ea:	d01d      	beq.n	8005a28 <floor+0x98>
 80059ec:	a324      	add	r3, pc, #144	@ (adr r3, 8005a80 <floor+0xf0>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f7fa fbb3 	bl	800015c <__adddf3>
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	f7fa fff5 	bl	80009e8 <__aeabi_dcmpgt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0ea      	beq.n	80059d8 <floor+0x48>
 8005a02:	2c00      	cmp	r4, #0
 8005a04:	bfbe      	ittt	lt
 8005a06:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005a0a:	4133      	asrlt	r3, r6
 8005a0c:	18e4      	addlt	r4, r4, r3
 8005a0e:	2500      	movs	r5, #0
 8005a10:	ea24 0407 	bic.w	r4, r4, r7
 8005a14:	e7e0      	b.n	80059d8 <floor+0x48>
 8005a16:	2e33      	cmp	r6, #51	@ 0x33
 8005a18:	dd0a      	ble.n	8005a30 <floor+0xa0>
 8005a1a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005a1e:	d103      	bne.n	8005a28 <floor+0x98>
 8005a20:	f7fa fb9c 	bl	800015c <__adddf3>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a30:	f04f 3cff 	mov.w	ip, #4294967295
 8005a34:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005a38:	fa2c f707 	lsr.w	r7, ip, r7
 8005a3c:	4207      	tst	r7, r0
 8005a3e:	d0f3      	beq.n	8005a28 <floor+0x98>
 8005a40:	a30f      	add	r3, pc, #60	@ (adr r3, 8005a80 <floor+0xf0>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f7fa fb89 	bl	800015c <__adddf3>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f7fa ffcb 	bl	80009e8 <__aeabi_dcmpgt>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0c0      	beq.n	80059d8 <floor+0x48>
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	da0a      	bge.n	8005a70 <floor+0xe0>
 8005a5a:	2e14      	cmp	r6, #20
 8005a5c:	d101      	bne.n	8005a62 <floor+0xd2>
 8005a5e:	3401      	adds	r4, #1
 8005a60:	e006      	b.n	8005a70 <floor+0xe0>
 8005a62:	2301      	movs	r3, #1
 8005a64:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005a68:	40b3      	lsls	r3, r6
 8005a6a:	441d      	add	r5, r3
 8005a6c:	4545      	cmp	r5, r8
 8005a6e:	d3f6      	bcc.n	8005a5e <floor+0xce>
 8005a70:	ea25 0507 	bic.w	r5, r5, r7
 8005a74:	e7b0      	b.n	80059d8 <floor+0x48>
 8005a76:	2500      	movs	r5, #0
 8005a78:	462c      	mov	r4, r5
 8005a7a:	e7ad      	b.n	80059d8 <floor+0x48>
 8005a7c:	f3af 8000 	nop.w
 8005a80:	8800759c 	.word	0x8800759c
 8005a84:	7e37e43c 	.word	0x7e37e43c
 8005a88:	bff00000 	.word	0xbff00000
 8005a8c:	000fffff 	.word	0x000fffff

08005a90 <round>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005a96:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8005a9a:	2a13      	cmp	r2, #19
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	dc1a      	bgt.n	8005ada <round+0x4a>
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	da0b      	bge.n	8005ac0 <round+0x30>
 8005aa8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005aac:	3201      	adds	r2, #1
 8005aae:	bf04      	itt	eq
 8005ab0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ab4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8005ab8:	2200      	movs	r2, #0
 8005aba:	461d      	mov	r5, r3
 8005abc:	4614      	mov	r4, r2
 8005abe:	e016      	b.n	8005aee <round+0x5e>
 8005ac0:	4815      	ldr	r0, [pc, #84]	@ (8005b18 <round+0x88>)
 8005ac2:	4110      	asrs	r0, r2
 8005ac4:	4001      	ands	r1, r0
 8005ac6:	4321      	orrs	r1, r4
 8005ac8:	d011      	beq.n	8005aee <round+0x5e>
 8005aca:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005ace:	fa41 f202 	asr.w	r2, r1, r2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	ea23 0300 	bic.w	r3, r3, r0
 8005ad8:	e7ee      	b.n	8005ab8 <round+0x28>
 8005ada:	2a33      	cmp	r2, #51	@ 0x33
 8005adc:	dd0a      	ble.n	8005af4 <round+0x64>
 8005ade:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005ae2:	d104      	bne.n	8005aee <round+0x5e>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	f7fa fb39 	bl	800015c <__adddf3>
 8005aea:	4604      	mov	r4, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005afc:	40f8      	lsrs	r0, r7
 8005afe:	4220      	tst	r0, r4
 8005b00:	d0f5      	beq.n	8005aee <round+0x5e>
 8005b02:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005b06:	2201      	movs	r2, #1
 8005b08:	408a      	lsls	r2, r1
 8005b0a:	1912      	adds	r2, r2, r4
 8005b0c:	bf28      	it	cs
 8005b0e:	3301      	addcs	r3, #1
 8005b10:	ea22 0200 	bic.w	r2, r2, r0
 8005b14:	e7d1      	b.n	8005aba <round+0x2a>
 8005b16:	bf00      	nop
 8005b18:	000fffff 	.word	0x000fffff
 8005b1c:	00000000 	.word	0x00000000

08005b20 <__ieee754_pow>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	b091      	sub	sp, #68	@ 0x44
 8005b26:	e9cd 2300 	strd	r2, r3, [sp]
 8005b2a:	468b      	mov	fp, r1
 8005b2c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8005b30:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8005b34:	4682      	mov	sl, r0
 8005b36:	ea57 0001 	orrs.w	r0, r7, r1
 8005b3a:	d112      	bne.n	8005b62 <__ieee754_pow+0x42>
 8005b3c:	4653      	mov	r3, sl
 8005b3e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8005b42:	18db      	adds	r3, r3, r3
 8005b44:	4152      	adcs	r2, r2
 8005b46:	4298      	cmp	r0, r3
 8005b48:	4b93      	ldr	r3, [pc, #588]	@ (8005d98 <__ieee754_pow+0x278>)
 8005b4a:	4193      	sbcs	r3, r2
 8005b4c:	f080 84cd 	bcs.w	80064ea <__ieee754_pow+0x9ca>
 8005b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b54:	4650      	mov	r0, sl
 8005b56:	4659      	mov	r1, fp
 8005b58:	f7fa fb00 	bl	800015c <__adddf3>
 8005b5c:	b011      	add	sp, #68	@ 0x44
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	4b8e      	ldr	r3, [pc, #568]	@ (8005d9c <__ieee754_pow+0x27c>)
 8005b64:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8005b68:	429d      	cmp	r5, r3
 8005b6a:	465e      	mov	r6, fp
 8005b6c:	46d1      	mov	r9, sl
 8005b6e:	d80b      	bhi.n	8005b88 <__ieee754_pow+0x68>
 8005b70:	d105      	bne.n	8005b7e <__ieee754_pow+0x5e>
 8005b72:	f1ba 0f00 	cmp.w	sl, #0
 8005b76:	d1eb      	bne.n	8005b50 <__ieee754_pow+0x30>
 8005b78:	42af      	cmp	r7, r5
 8005b7a:	d8e9      	bhi.n	8005b50 <__ieee754_pow+0x30>
 8005b7c:	e001      	b.n	8005b82 <__ieee754_pow+0x62>
 8005b7e:	429f      	cmp	r7, r3
 8005b80:	d802      	bhi.n	8005b88 <__ieee754_pow+0x68>
 8005b82:	429f      	cmp	r7, r3
 8005b84:	d10f      	bne.n	8005ba6 <__ieee754_pow+0x86>
 8005b86:	b171      	cbz	r1, 8005ba6 <__ieee754_pow+0x86>
 8005b88:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005b8c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005b90:	ea56 0609 	orrs.w	r6, r6, r9
 8005b94:	d1dc      	bne.n	8005b50 <__ieee754_pow+0x30>
 8005b96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b9a:	18db      	adds	r3, r3, r3
 8005b9c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005ba0:	4152      	adcs	r2, r2
 8005ba2:	429e      	cmp	r6, r3
 8005ba4:	e7d0      	b.n	8005b48 <__ieee754_pow+0x28>
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	462b      	mov	r3, r5
 8005baa:	da42      	bge.n	8005c32 <__ieee754_pow+0x112>
 8005bac:	4a7c      	ldr	r2, [pc, #496]	@ (8005da0 <__ieee754_pow+0x280>)
 8005bae:	4297      	cmp	r7, r2
 8005bb0:	d856      	bhi.n	8005c60 <__ieee754_pow+0x140>
 8005bb2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005bb6:	4297      	cmp	r7, r2
 8005bb8:	f240 84a6 	bls.w	8006508 <__ieee754_pow+0x9e8>
 8005bbc:	153a      	asrs	r2, r7, #20
 8005bbe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005bc2:	2a14      	cmp	r2, #20
 8005bc4:	dd18      	ble.n	8005bf8 <__ieee754_pow+0xd8>
 8005bc6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005bca:	fa21 f402 	lsr.w	r4, r1, r2
 8005bce:	fa04 f202 	lsl.w	r2, r4, r2
 8005bd2:	428a      	cmp	r2, r1
 8005bd4:	f040 8498 	bne.w	8006508 <__ieee754_pow+0x9e8>
 8005bd8:	f004 0401 	and.w	r4, r4, #1
 8005bdc:	f1c4 0402 	rsb	r4, r4, #2
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d159      	bne.n	8005c98 <__ieee754_pow+0x178>
 8005be4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005be8:	d149      	bne.n	8005c7e <__ieee754_pow+0x15e>
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	4650      	mov	r0, sl
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	f7fa fc69 	bl	80004c8 <__aeabi_dmul>
 8005bf6:	e7b1      	b.n	8005b5c <__ieee754_pow+0x3c>
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d14c      	bne.n	8005c96 <__ieee754_pow+0x176>
 8005bfc:	f1c2 0214 	rsb	r2, r2, #20
 8005c00:	fa47 f402 	asr.w	r4, r7, r2
 8005c04:	fa04 f202 	lsl.w	r2, r4, r2
 8005c08:	42ba      	cmp	r2, r7
 8005c0a:	f040 847a 	bne.w	8006502 <__ieee754_pow+0x9e2>
 8005c0e:	f004 0401 	and.w	r4, r4, #1
 8005c12:	f1c4 0402 	rsb	r4, r4, #2
 8005c16:	4a63      	ldr	r2, [pc, #396]	@ (8005da4 <__ieee754_pow+0x284>)
 8005c18:	4297      	cmp	r7, r2
 8005c1a:	d1e3      	bne.n	8005be4 <__ieee754_pow+0xc4>
 8005c1c:	f1b8 0f00 	cmp.w	r8, #0
 8005c20:	f280 846b 	bge.w	80064fa <__ieee754_pow+0x9da>
 8005c24:	4652      	mov	r2, sl
 8005c26:	465b      	mov	r3, fp
 8005c28:	2000      	movs	r0, #0
 8005c2a:	495e      	ldr	r1, [pc, #376]	@ (8005da4 <__ieee754_pow+0x284>)
 8005c2c:	f7fa fd76 	bl	800071c <__aeabi_ddiv>
 8005c30:	e794      	b.n	8005b5c <__ieee754_pow+0x3c>
 8005c32:	2400      	movs	r4, #0
 8005c34:	bb81      	cbnz	r1, 8005c98 <__ieee754_pow+0x178>
 8005c36:	4a59      	ldr	r2, [pc, #356]	@ (8005d9c <__ieee754_pow+0x27c>)
 8005c38:	4297      	cmp	r7, r2
 8005c3a:	d1ec      	bne.n	8005c16 <__ieee754_pow+0xf6>
 8005c3c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8005c40:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005c44:	ea53 0309 	orrs.w	r3, r3, r9
 8005c48:	f000 844f 	beq.w	80064ea <__ieee754_pow+0x9ca>
 8005c4c:	4b56      	ldr	r3, [pc, #344]	@ (8005da8 <__ieee754_pow+0x288>)
 8005c4e:	429d      	cmp	r5, r3
 8005c50:	d908      	bls.n	8005c64 <__ieee754_pow+0x144>
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	f280 844c 	bge.w	80064f2 <__ieee754_pow+0x9d2>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	e77d      	b.n	8005b5c <__ieee754_pow+0x3c>
 8005c60:	2402      	movs	r4, #2
 8005c62:	e7e7      	b.n	8005c34 <__ieee754_pow+0x114>
 8005c64:	f1b8 0f00 	cmp.w	r8, #0
 8005c68:	f04f 0000 	mov.w	r0, #0
 8005c6c:	f04f 0100 	mov.w	r1, #0
 8005c70:	f6bf af74 	bge.w	8005b5c <__ieee754_pow+0x3c>
 8005c74:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005c78:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005c7c:	e76e      	b.n	8005b5c <__ieee754_pow+0x3c>
 8005c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8005dac <__ieee754_pow+0x28c>)
 8005c80:	4590      	cmp	r8, r2
 8005c82:	d109      	bne.n	8005c98 <__ieee754_pow+0x178>
 8005c84:	2e00      	cmp	r6, #0
 8005c86:	db07      	blt.n	8005c98 <__ieee754_pow+0x178>
 8005c88:	4650      	mov	r0, sl
 8005c8a:	4659      	mov	r1, fp
 8005c8c:	b011      	add	sp, #68	@ 0x44
 8005c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c92:	f000 bd0f 	b.w	80066b4 <__ieee754_sqrt>
 8005c96:	2400      	movs	r4, #0
 8005c98:	4650      	mov	r0, sl
 8005c9a:	4659      	mov	r1, fp
 8005c9c:	9302      	str	r3, [sp, #8]
 8005c9e:	f000 fc69 	bl	8006574 <fabs>
 8005ca2:	9b02      	ldr	r3, [sp, #8]
 8005ca4:	f1b9 0f00 	cmp.w	r9, #0
 8005ca8:	d127      	bne.n	8005cfa <__ieee754_pow+0x1da>
 8005caa:	4a3e      	ldr	r2, [pc, #248]	@ (8005da4 <__ieee754_pow+0x284>)
 8005cac:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8005cb0:	4594      	cmp	ip, r2
 8005cb2:	d000      	beq.n	8005cb6 <__ieee754_pow+0x196>
 8005cb4:	bb0d      	cbnz	r5, 8005cfa <__ieee754_pow+0x1da>
 8005cb6:	f1b8 0f00 	cmp.w	r8, #0
 8005cba:	da05      	bge.n	8005cc8 <__ieee754_pow+0x1a8>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	4938      	ldr	r1, [pc, #224]	@ (8005da4 <__ieee754_pow+0x284>)
 8005cc4:	f7fa fd2a 	bl	800071c <__aeabi_ddiv>
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	f6bf af47 	bge.w	8005b5c <__ieee754_pow+0x3c>
 8005cce:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005cd2:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005cd6:	4325      	orrs	r5, r4
 8005cd8:	d108      	bne.n	8005cec <__ieee754_pow+0x1cc>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f7fa fa39 	bl	8000158 <__aeabi_dsub>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	e79f      	b.n	8005c2c <__ieee754_pow+0x10c>
 8005cec:	2c01      	cmp	r4, #1
 8005cee:	f47f af35 	bne.w	8005b5c <__ieee754_pow+0x3c>
 8005cf2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	e730      	b.n	8005b5c <__ieee754_pow+0x3c>
 8005cfa:	0ff2      	lsrs	r2, r6, #31
 8005cfc:	3a01      	subs	r2, #1
 8005cfe:	ea52 0c04 	orrs.w	ip, r2, r4
 8005d02:	d102      	bne.n	8005d0a <__ieee754_pow+0x1ea>
 8005d04:	4652      	mov	r2, sl
 8005d06:	465b      	mov	r3, fp
 8005d08:	e7e9      	b.n	8005cde <__ieee754_pow+0x1be>
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	3c01      	subs	r4, #1
 8005d10:	4314      	orrs	r4, r2
 8005d12:	bf14      	ite	ne
 8005d14:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005da4 <__ieee754_pow+0x284>
 8005d18:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005db0 <__ieee754_pow+0x290>
 8005d1c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005d20:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005d24:	f240 8104 	bls.w	8005f30 <__ieee754_pow+0x410>
 8005d28:	4b22      	ldr	r3, [pc, #136]	@ (8005db4 <__ieee754_pow+0x294>)
 8005d2a:	429f      	cmp	r7, r3
 8005d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005da8 <__ieee754_pow+0x288>)
 8005d2e:	d913      	bls.n	8005d58 <__ieee754_pow+0x238>
 8005d30:	429d      	cmp	r5, r3
 8005d32:	d808      	bhi.n	8005d46 <__ieee754_pow+0x226>
 8005d34:	f1b8 0f00 	cmp.w	r8, #0
 8005d38:	da08      	bge.n	8005d4c <__ieee754_pow+0x22c>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	b011      	add	sp, #68	@ 0x44
 8005d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d42:	f000 bcb1 	b.w	80066a8 <__math_oflow>
 8005d46:	f1b8 0f00 	cmp.w	r8, #0
 8005d4a:	dcf6      	bgt.n	8005d3a <__ieee754_pow+0x21a>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	b011      	add	sp, #68	@ 0x44
 8005d50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	f000 bca3 	b.w	800669e <__math_uflow>
 8005d58:	429d      	cmp	r5, r3
 8005d5a:	d20c      	bcs.n	8005d76 <__ieee754_pow+0x256>
 8005d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d60:	2200      	movs	r2, #0
 8005d62:	2300      	movs	r3, #0
 8005d64:	f7fa fe22 	bl	80009ac <__aeabi_dcmplt>
 8005d68:	3800      	subs	r0, #0
 8005d6a:	bf18      	it	ne
 8005d6c:	2001      	movne	r0, #1
 8005d6e:	f1b8 0f00 	cmp.w	r8, #0
 8005d72:	daec      	bge.n	8005d4e <__ieee754_pow+0x22e>
 8005d74:	e7e2      	b.n	8005d3c <__ieee754_pow+0x21c>
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <__ieee754_pow+0x284>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	d91c      	bls.n	8005db8 <__ieee754_pow+0x298>
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	2300      	movs	r3, #0
 8005d84:	f7fa fe12 	bl	80009ac <__aeabi_dcmplt>
 8005d88:	3800      	subs	r0, #0
 8005d8a:	bf18      	it	ne
 8005d8c:	2001      	movne	r0, #1
 8005d8e:	f1b8 0f00 	cmp.w	r8, #0
 8005d92:	dcd3      	bgt.n	8005d3c <__ieee754_pow+0x21c>
 8005d94:	e7db      	b.n	8005d4e <__ieee754_pow+0x22e>
 8005d96:	bf00      	nop
 8005d98:	fff00000 	.word	0xfff00000
 8005d9c:	7ff00000 	.word	0x7ff00000
 8005da0:	433fffff 	.word	0x433fffff
 8005da4:	3ff00000 	.word	0x3ff00000
 8005da8:	3fefffff 	.word	0x3fefffff
 8005dac:	3fe00000 	.word	0x3fe00000
 8005db0:	bff00000 	.word	0xbff00000
 8005db4:	43f00000 	.word	0x43f00000
 8005db8:	4b59      	ldr	r3, [pc, #356]	@ (8005f20 <__ieee754_pow+0x400>)
 8005dba:	f7fa f9cd 	bl	8000158 <__aeabi_dsub>
 8005dbe:	a350      	add	r3, pc, #320	@ (adr r3, 8005f00 <__ieee754_pow+0x3e0>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	f7fa fb7e 	bl	80004c8 <__aeabi_dmul>
 8005dcc:	a34e      	add	r3, pc, #312	@ (adr r3, 8005f08 <__ieee754_pow+0x3e8>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa fb75 	bl	80004c8 <__aeabi_dmul>
 8005dde:	2200      	movs	r2, #0
 8005de0:	4682      	mov	sl, r0
 8005de2:	468b      	mov	fp, r1
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	4b4e      	ldr	r3, [pc, #312]	@ (8005f24 <__ieee754_pow+0x404>)
 8005dea:	f7fa fb6d 	bl	80004c8 <__aeabi_dmul>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	a147      	add	r1, pc, #284	@ (adr r1, 8005f10 <__ieee754_pow+0x3f0>)
 8005df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005df8:	f7fa f9ae 	bl	8000158 <__aeabi_dsub>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	462b      	mov	r3, r5
 8005e00:	f7fa fb62 	bl	80004c8 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	2000      	movs	r0, #0
 8005e0a:	4947      	ldr	r1, [pc, #284]	@ (8005f28 <__ieee754_pow+0x408>)
 8005e0c:	f7fa f9a4 	bl	8000158 <__aeabi_dsub>
 8005e10:	4622      	mov	r2, r4
 8005e12:	4680      	mov	r8, r0
 8005e14:	4689      	mov	r9, r1
 8005e16:	462b      	mov	r3, r5
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f7fa fb54 	bl	80004c8 <__aeabi_dmul>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4640      	mov	r0, r8
 8005e26:	4649      	mov	r1, r9
 8005e28:	f7fa fb4e 	bl	80004c8 <__aeabi_dmul>
 8005e2c:	a33a      	add	r3, pc, #232	@ (adr r3, 8005f18 <__ieee754_pow+0x3f8>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fb49 	bl	80004c8 <__aeabi_dmul>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	f7fa f98b 	bl	8000158 <__aeabi_dsub>
 8005e42:	2400      	movs	r4, #0
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4680      	mov	r8, r0
 8005e4a:	4689      	mov	r9, r1
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa f984 	bl	800015c <__adddf3>
 8005e54:	4632      	mov	r2, r6
 8005e56:	463b      	mov	r3, r7
 8005e58:	4620      	mov	r0, r4
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	f7fa f97c 	bl	8000158 <__aeabi_dsub>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4640      	mov	r0, r8
 8005e66:	4649      	mov	r1, r9
 8005e68:	f7fa f976 	bl	8000158 <__aeabi_dsub>
 8005e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e74:	2300      	movs	r3, #0
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	460f      	mov	r7, r1
 8005e80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e84:	465b      	mov	r3, fp
 8005e86:	4652      	mov	r2, sl
 8005e88:	f7fa f966 	bl	8000158 <__aeabi_dsub>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	462b      	mov	r3, r5
 8005e90:	f7fa fb1a 	bl	80004c8 <__aeabi_dmul>
 8005e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4689      	mov	r9, r1
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa fb12 	bl	80004c8 <__aeabi_dmul>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	4649      	mov	r1, r9
 8005eac:	f7fa f956 	bl	800015c <__adddf3>
 8005eb0:	465b      	mov	r3, fp
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	4652      	mov	r2, sl
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7fa fb04 	bl	80004c8 <__aeabi_dmul>
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa f946 	bl	800015c <__adddf3>
 8005ed0:	4b16      	ldr	r3, [pc, #88]	@ (8005f2c <__ieee754_pow+0x40c>)
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	460d      	mov	r5, r1
 8005ed8:	468b      	mov	fp, r1
 8005eda:	f340 81fd 	ble.w	80062d8 <__ieee754_pow+0x7b8>
 8005ede:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005ee2:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005ee6:	4303      	orrs	r3, r0
 8005ee8:	f000 81dc 	beq.w	80062a4 <__ieee754_pow+0x784>
 8005eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f7fa fd5a 	bl	80009ac <__aeabi_dcmplt>
 8005ef8:	3800      	subs	r0, #0
 8005efa:	bf18      	it	ne
 8005efc:	2001      	movne	r0, #1
 8005efe:	e71d      	b.n	8005d3c <__ieee754_pow+0x21c>
 8005f00:	60000000 	.word	0x60000000
 8005f04:	3ff71547 	.word	0x3ff71547
 8005f08:	f85ddf44 	.word	0xf85ddf44
 8005f0c:	3e54ae0b 	.word	0x3e54ae0b
 8005f10:	55555555 	.word	0x55555555
 8005f14:	3fd55555 	.word	0x3fd55555
 8005f18:	652b82fe 	.word	0x652b82fe
 8005f1c:	3ff71547 	.word	0x3ff71547
 8005f20:	3ff00000 	.word	0x3ff00000
 8005f24:	3fd00000 	.word	0x3fd00000
 8005f28:	3fe00000 	.word	0x3fe00000
 8005f2c:	408fffff 	.word	0x408fffff
 8005f30:	4ad3      	ldr	r2, [pc, #844]	@ (8006280 <__ieee754_pow+0x760>)
 8005f32:	4032      	ands	r2, r6
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	f040 817a 	bne.w	800622e <__ieee754_pow+0x70e>
 8005f3a:	4bd2      	ldr	r3, [pc, #840]	@ (8006284 <__ieee754_pow+0x764>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f7fa fac3 	bl	80004c8 <__aeabi_dmul>
 8005f42:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8005f46:	460b      	mov	r3, r1
 8005f48:	151a      	asrs	r2, r3, #20
 8005f4a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005f4e:	4422      	add	r2, r4
 8005f50:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f52:	4acd      	ldr	r2, [pc, #820]	@ (8006288 <__ieee754_pow+0x768>)
 8005f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f58:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005f62:	dd08      	ble.n	8005f76 <__ieee754_pow+0x456>
 8005f64:	4ac9      	ldr	r2, [pc, #804]	@ (800628c <__ieee754_pow+0x76c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	f340 8163 	ble.w	8006232 <__ieee754_pow+0x712>
 8005f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f6e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005f72:	3301      	adds	r3, #1
 8005f74:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f76:	2600      	movs	r6, #0
 8005f78:	00f3      	lsls	r3, r6, #3
 8005f7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f7c:	4bc4      	ldr	r3, [pc, #784]	@ (8006290 <__ieee754_pow+0x770>)
 8005f7e:	4629      	mov	r1, r5
 8005f80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005f8e:	4623      	mov	r3, r4
 8005f90:	4682      	mov	sl, r0
 8005f92:	f7fa f8e1 	bl	8000158 <__aeabi_dsub>
 8005f96:	4652      	mov	r2, sl
 8005f98:	462b      	mov	r3, r5
 8005f9a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005f9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fa2:	f7fa f8db 	bl	800015c <__adddf3>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	2000      	movs	r0, #0
 8005fac:	49b9      	ldr	r1, [pc, #740]	@ (8006294 <__ieee754_pow+0x774>)
 8005fae:	f7fa fbb5 	bl	800071c <__aeabi_ddiv>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fbe:	f7fa fa83 	bl	80004c8 <__aeabi_dmul>
 8005fc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fc6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005fca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	46ab      	mov	fp, r5
 8005fd4:	106d      	asrs	r5, r5, #1
 8005fd6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005fe0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005fe4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	4614      	mov	r4, r2
 8005fee:	461d      	mov	r5, r3
 8005ff0:	f7fa fa6a 	bl	80004c8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ffc:	f7fa f8ac 	bl	8000158 <__aeabi_dsub>
 8006000:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006004:	4606      	mov	r6, r0
 8006006:	460f      	mov	r7, r1
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f8a4 	bl	8000158 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4650      	mov	r0, sl
 8006016:	4659      	mov	r1, fp
 8006018:	f7fa f89e 	bl	8000158 <__aeabi_dsub>
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	f7fa fa52 	bl	80004c8 <__aeabi_dmul>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa f894 	bl	8000158 <__aeabi_dsub>
 8006030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006034:	f7fa fa48 	bl	80004c8 <__aeabi_dmul>
 8006038:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800603c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	f7fa fa40 	bl	80004c8 <__aeabi_dmul>
 8006048:	a37b      	add	r3, pc, #492	@ (adr r3, 8006238 <__ieee754_pow+0x718>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	4604      	mov	r4, r0
 8006050:	460d      	mov	r5, r1
 8006052:	f7fa fa39 	bl	80004c8 <__aeabi_dmul>
 8006056:	a37a      	add	r3, pc, #488	@ (adr r3, 8006240 <__ieee754_pow+0x720>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa f87e 	bl	800015c <__adddf3>
 8006060:	4622      	mov	r2, r4
 8006062:	462b      	mov	r3, r5
 8006064:	f7fa fa30 	bl	80004c8 <__aeabi_dmul>
 8006068:	a377      	add	r3, pc, #476	@ (adr r3, 8006248 <__ieee754_pow+0x728>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa f875 	bl	800015c <__adddf3>
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	f7fa fa27 	bl	80004c8 <__aeabi_dmul>
 800607a:	a375      	add	r3, pc, #468	@ (adr r3, 8006250 <__ieee754_pow+0x730>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa f86c 	bl	800015c <__adddf3>
 8006084:	4622      	mov	r2, r4
 8006086:	462b      	mov	r3, r5
 8006088:	f7fa fa1e 	bl	80004c8 <__aeabi_dmul>
 800608c:	a372      	add	r3, pc, #456	@ (adr r3, 8006258 <__ieee754_pow+0x738>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa f863 	bl	800015c <__adddf3>
 8006096:	4622      	mov	r2, r4
 8006098:	462b      	mov	r3, r5
 800609a:	f7fa fa15 	bl	80004c8 <__aeabi_dmul>
 800609e:	a370      	add	r3, pc, #448	@ (adr r3, 8006260 <__ieee754_pow+0x740>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa f85a 	bl	800015c <__adddf3>
 80060a8:	4622      	mov	r2, r4
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	462b      	mov	r3, r5
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa fa08 	bl	80004c8 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4630      	mov	r0, r6
 80060be:	4639      	mov	r1, r7
 80060c0:	f7fa fa02 	bl	80004c8 <__aeabi_dmul>
 80060c4:	4604      	mov	r4, r0
 80060c6:	460d      	mov	r5, r1
 80060c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	f7fa f844 	bl	800015c <__adddf3>
 80060d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060d8:	f7fa f9f6 	bl	80004c8 <__aeabi_dmul>
 80060dc:	4622      	mov	r2, r4
 80060de:	462b      	mov	r3, r5
 80060e0:	f7fa f83c 	bl	800015c <__adddf3>
 80060e4:	4642      	mov	r2, r8
 80060e6:	4682      	mov	sl, r0
 80060e8:	468b      	mov	fp, r1
 80060ea:	464b      	mov	r3, r9
 80060ec:	4640      	mov	r0, r8
 80060ee:	4649      	mov	r1, r9
 80060f0:	f7fa f9ea 	bl	80004c8 <__aeabi_dmul>
 80060f4:	2200      	movs	r2, #0
 80060f6:	4b68      	ldr	r3, [pc, #416]	@ (8006298 <__ieee754_pow+0x778>)
 80060f8:	4606      	mov	r6, r0
 80060fa:	460f      	mov	r7, r1
 80060fc:	f7fa f82e 	bl	800015c <__adddf3>
 8006100:	4652      	mov	r2, sl
 8006102:	465b      	mov	r3, fp
 8006104:	f7fa f82a 	bl	800015c <__adddf3>
 8006108:	2400      	movs	r4, #0
 800610a:	460d      	mov	r5, r1
 800610c:	4622      	mov	r2, r4
 800610e:	460b      	mov	r3, r1
 8006110:	4640      	mov	r0, r8
 8006112:	4649      	mov	r1, r9
 8006114:	f7fa f9d8 	bl	80004c8 <__aeabi_dmul>
 8006118:	2200      	movs	r2, #0
 800611a:	4680      	mov	r8, r0
 800611c:	4689      	mov	r9, r1
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	4b5d      	ldr	r3, [pc, #372]	@ (8006298 <__ieee754_pow+0x778>)
 8006124:	f7fa f818 	bl	8000158 <__aeabi_dsub>
 8006128:	4632      	mov	r2, r6
 800612a:	463b      	mov	r3, r7
 800612c:	f7fa f814 	bl	8000158 <__aeabi_dsub>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4650      	mov	r0, sl
 8006136:	4659      	mov	r1, fp
 8006138:	f7fa f80e 	bl	8000158 <__aeabi_dsub>
 800613c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006140:	f7fa f9c2 	bl	80004c8 <__aeabi_dmul>
 8006144:	4622      	mov	r2, r4
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800614e:	462b      	mov	r3, r5
 8006150:	f7fa f9ba 	bl	80004c8 <__aeabi_dmul>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4630      	mov	r0, r6
 800615a:	4639      	mov	r1, r7
 800615c:	f7f9 fffe 	bl	800015c <__adddf3>
 8006160:	2400      	movs	r4, #0
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4640      	mov	r0, r8
 800616c:	4649      	mov	r1, r9
 800616e:	f7f9 fff5 	bl	800015c <__adddf3>
 8006172:	a33d      	add	r3, pc, #244	@ (adr r3, 8006268 <__ieee754_pow+0x748>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	4620      	mov	r0, r4
 800617a:	460d      	mov	r5, r1
 800617c:	f7fa f9a4 	bl	80004c8 <__aeabi_dmul>
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006188:	4620      	mov	r0, r4
 800618a:	4629      	mov	r1, r5
 800618c:	f7f9 ffe4 	bl	8000158 <__aeabi_dsub>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4630      	mov	r0, r6
 8006196:	4639      	mov	r1, r7
 8006198:	f7f9 ffde 	bl	8000158 <__aeabi_dsub>
 800619c:	a334      	add	r3, pc, #208	@ (adr r3, 8006270 <__ieee754_pow+0x750>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f991 	bl	80004c8 <__aeabi_dmul>
 80061a6:	a334      	add	r3, pc, #208	@ (adr r3, 8006278 <__ieee754_pow+0x758>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7fa f988 	bl	80004c8 <__aeabi_dmul>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	f7f9 ffcc 	bl	800015c <__adddf3>
 80061c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061c6:	4b35      	ldr	r3, [pc, #212]	@ (800629c <__ieee754_pow+0x77c>)
 80061c8:	2400      	movs	r4, #0
 80061ca:	4413      	add	r3, r2
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7f9 ffc4 	bl	800015c <__adddf3>
 80061d4:	4682      	mov	sl, r0
 80061d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061d8:	468b      	mov	fp, r1
 80061da:	f7fa f90b 	bl	80003f4 <__aeabi_i2d>
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061e4:	4b2e      	ldr	r3, [pc, #184]	@ (80062a0 <__ieee754_pow+0x780>)
 80061e6:	4413      	add	r3, r2
 80061e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ec:	4652      	mov	r2, sl
 80061ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061f2:	465b      	mov	r3, fp
 80061f4:	f7f9 ffb2 	bl	800015c <__adddf3>
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	f7f9 ffae 	bl	800015c <__adddf3>
 8006200:	4632      	mov	r2, r6
 8006202:	463b      	mov	r3, r7
 8006204:	f7f9 ffaa 	bl	800015c <__adddf3>
 8006208:	4632      	mov	r2, r6
 800620a:	463b      	mov	r3, r7
 800620c:	4620      	mov	r0, r4
 800620e:	460d      	mov	r5, r1
 8006210:	f7f9 ffa2 	bl	8000158 <__aeabi_dsub>
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	f7f9 ff9e 	bl	8000158 <__aeabi_dsub>
 800621c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006220:	f7f9 ff9a 	bl	8000158 <__aeabi_dsub>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4650      	mov	r0, sl
 800622a:	4659      	mov	r1, fp
 800622c:	e61c      	b.n	8005e68 <__ieee754_pow+0x348>
 800622e:	2400      	movs	r4, #0
 8006230:	e68a      	b.n	8005f48 <__ieee754_pow+0x428>
 8006232:	2601      	movs	r6, #1
 8006234:	e6a0      	b.n	8005f78 <__ieee754_pow+0x458>
 8006236:	bf00      	nop
 8006238:	4a454eef 	.word	0x4a454eef
 800623c:	3fca7e28 	.word	0x3fca7e28
 8006240:	93c9db65 	.word	0x93c9db65
 8006244:	3fcd864a 	.word	0x3fcd864a
 8006248:	a91d4101 	.word	0xa91d4101
 800624c:	3fd17460 	.word	0x3fd17460
 8006250:	518f264d 	.word	0x518f264d
 8006254:	3fd55555 	.word	0x3fd55555
 8006258:	db6fabff 	.word	0xdb6fabff
 800625c:	3fdb6db6 	.word	0x3fdb6db6
 8006260:	33333303 	.word	0x33333303
 8006264:	3fe33333 	.word	0x3fe33333
 8006268:	e0000000 	.word	0xe0000000
 800626c:	3feec709 	.word	0x3feec709
 8006270:	dc3a03fd 	.word	0xdc3a03fd
 8006274:	3feec709 	.word	0x3feec709
 8006278:	145b01f5 	.word	0x145b01f5
 800627c:	be3e2fe0 	.word	0xbe3e2fe0
 8006280:	7ff00000 	.word	0x7ff00000
 8006284:	43400000 	.word	0x43400000
 8006288:	0003988e 	.word	0x0003988e
 800628c:	000bb679 	.word	0x000bb679
 8006290:	08007db8 	.word	0x08007db8
 8006294:	3ff00000 	.word	0x3ff00000
 8006298:	40080000 	.word	0x40080000
 800629c:	08007d98 	.word	0x08007d98
 80062a0:	08007da8 	.word	0x08007da8
 80062a4:	a39a      	add	r3, pc, #616	@ (adr r3, 8006510 <__ieee754_pow+0x9f0>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	4630      	mov	r0, r6
 80062ac:	4639      	mov	r1, r7
 80062ae:	f7f9 ff55 	bl	800015c <__adddf3>
 80062b2:	4642      	mov	r2, r8
 80062b4:	e9cd 0100 	strd	r0, r1, [sp]
 80062b8:	464b      	mov	r3, r9
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	f7f9 ff4b 	bl	8000158 <__aeabi_dsub>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ca:	f7fa fb8d 	bl	80009e8 <__aeabi_dcmpgt>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f47f ae0c 	bne.w	8005eec <__ieee754_pow+0x3cc>
 80062d4:	4ba0      	ldr	r3, [pc, #640]	@ (8006558 <__ieee754_pow+0xa38>)
 80062d6:	e022      	b.n	800631e <__ieee754_pow+0x7fe>
 80062d8:	4ca0      	ldr	r4, [pc, #640]	@ (800655c <__ieee754_pow+0xa3c>)
 80062da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062de:	42a3      	cmp	r3, r4
 80062e0:	d919      	bls.n	8006316 <__ieee754_pow+0x7f6>
 80062e2:	4b9f      	ldr	r3, [pc, #636]	@ (8006560 <__ieee754_pow+0xa40>)
 80062e4:	440b      	add	r3, r1
 80062e6:	4303      	orrs	r3, r0
 80062e8:	d009      	beq.n	80062fe <__ieee754_pow+0x7de>
 80062ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	f7fa fb5b 	bl	80009ac <__aeabi_dcmplt>
 80062f6:	3800      	subs	r0, #0
 80062f8:	bf18      	it	ne
 80062fa:	2001      	movne	r0, #1
 80062fc:	e527      	b.n	8005d4e <__ieee754_pow+0x22e>
 80062fe:	4642      	mov	r2, r8
 8006300:	464b      	mov	r3, r9
 8006302:	f7f9 ff29 	bl	8000158 <__aeabi_dsub>
 8006306:	4632      	mov	r2, r6
 8006308:	463b      	mov	r3, r7
 800630a:	f7fa fb63 	bl	80009d4 <__aeabi_dcmpge>
 800630e:	2800      	cmp	r0, #0
 8006310:	d1eb      	bne.n	80062ea <__ieee754_pow+0x7ca>
 8006312:	4b94      	ldr	r3, [pc, #592]	@ (8006564 <__ieee754_pow+0xa44>)
 8006314:	e003      	b.n	800631e <__ieee754_pow+0x7fe>
 8006316:	4a94      	ldr	r2, [pc, #592]	@ (8006568 <__ieee754_pow+0xa48>)
 8006318:	4293      	cmp	r3, r2
 800631a:	f240 80e1 	bls.w	80064e0 <__ieee754_pow+0x9c0>
 800631e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8006322:	151b      	asrs	r3, r3, #20
 8006324:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006328:	fa4a fa03 	asr.w	sl, sl, r3
 800632c:	44da      	add	sl, fp
 800632e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006332:	488e      	ldr	r0, [pc, #568]	@ (800656c <__ieee754_pow+0xa4c>)
 8006334:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006338:	4108      	asrs	r0, r1
 800633a:	ea00 030a 	and.w	r3, r0, sl
 800633e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006342:	f1c1 0114 	rsb	r1, r1, #20
 8006346:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800634a:	4640      	mov	r0, r8
 800634c:	fa4a fa01 	asr.w	sl, sl, r1
 8006350:	f1bb 0f00 	cmp.w	fp, #0
 8006354:	4649      	mov	r1, r9
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	bfb8      	it	lt
 800635c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006360:	f7f9 fefa 	bl	8000158 <__aeabi_dsub>
 8006364:	4680      	mov	r8, r0
 8006366:	4689      	mov	r9, r1
 8006368:	2400      	movs	r4, #0
 800636a:	4632      	mov	r2, r6
 800636c:	463b      	mov	r3, r7
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7f9 fef3 	bl	800015c <__adddf3>
 8006376:	a368      	add	r3, pc, #416	@ (adr r3, 8006518 <__ieee754_pow+0x9f8>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	4620      	mov	r0, r4
 800637e:	460d      	mov	r5, r1
 8006380:	f7fa f8a2 	bl	80004c8 <__aeabi_dmul>
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	e9cd 0100 	strd	r0, r1, [sp]
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7f9 fee2 	bl	8000158 <__aeabi_dsub>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	f7f9 fedc 	bl	8000158 <__aeabi_dsub>
 80063a0:	a35f      	add	r3, pc, #380	@ (adr r3, 8006520 <__ieee754_pow+0xa00>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7fa f88f 	bl	80004c8 <__aeabi_dmul>
 80063aa:	a35f      	add	r3, pc, #380	@ (adr r3, 8006528 <__ieee754_pow+0xa08>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	4680      	mov	r8, r0
 80063b2:	4689      	mov	r9, r1
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7fa f886 	bl	80004c8 <__aeabi_dmul>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4640      	mov	r0, r8
 80063c2:	4649      	mov	r1, r9
 80063c4:	f7f9 feca 	bl	800015c <__adddf3>
 80063c8:	4604      	mov	r4, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d4:	f7f9 fec2 	bl	800015c <__adddf3>
 80063d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	f7f9 feba 	bl	8000158 <__aeabi_dsub>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4620      	mov	r0, r4
 80063ea:	4629      	mov	r1, r5
 80063ec:	f7f9 feb4 	bl	8000158 <__aeabi_dsub>
 80063f0:	4642      	mov	r2, r8
 80063f2:	4606      	mov	r6, r0
 80063f4:	460f      	mov	r7, r1
 80063f6:	464b      	mov	r3, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7fa f864 	bl	80004c8 <__aeabi_dmul>
 8006400:	a34b      	add	r3, pc, #300	@ (adr r3, 8006530 <__ieee754_pow+0xa10>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	f7fa f85d 	bl	80004c8 <__aeabi_dmul>
 800640e:	a34a      	add	r3, pc, #296	@ (adr r3, 8006538 <__ieee754_pow+0xa18>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7f9 fea0 	bl	8000158 <__aeabi_dsub>
 8006418:	4622      	mov	r2, r4
 800641a:	462b      	mov	r3, r5
 800641c:	f7fa f854 	bl	80004c8 <__aeabi_dmul>
 8006420:	a347      	add	r3, pc, #284	@ (adr r3, 8006540 <__ieee754_pow+0xa20>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7f9 fe99 	bl	800015c <__adddf3>
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	f7fa f84b 	bl	80004c8 <__aeabi_dmul>
 8006432:	a345      	add	r3, pc, #276	@ (adr r3, 8006548 <__ieee754_pow+0xa28>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 fe8e 	bl	8000158 <__aeabi_dsub>
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	f7fa f842 	bl	80004c8 <__aeabi_dmul>
 8006444:	a342      	add	r3, pc, #264	@ (adr r3, 8006550 <__ieee754_pow+0xa30>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 fe87 	bl	800015c <__adddf3>
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f7f9 fe7b 	bl	8000158 <__aeabi_dsub>
 8006462:	4604      	mov	r4, r0
 8006464:	460d      	mov	r5, r1
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7fa f82b 	bl	80004c8 <__aeabi_dmul>
 8006472:	2200      	movs	r2, #0
 8006474:	e9cd 0100 	strd	r0, r1, [sp]
 8006478:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800647c:	4620      	mov	r0, r4
 800647e:	4629      	mov	r1, r5
 8006480:	f7f9 fe6a 	bl	8000158 <__aeabi_dsub>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800648c:	f7fa f946 	bl	800071c <__aeabi_ddiv>
 8006490:	4632      	mov	r2, r6
 8006492:	4604      	mov	r4, r0
 8006494:	460d      	mov	r5, r1
 8006496:	463b      	mov	r3, r7
 8006498:	4640      	mov	r0, r8
 800649a:	4649      	mov	r1, r9
 800649c:	f7fa f814 	bl	80004c8 <__aeabi_dmul>
 80064a0:	4632      	mov	r2, r6
 80064a2:	463b      	mov	r3, r7
 80064a4:	f7f9 fe5a 	bl	800015c <__adddf3>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7f9 fe52 	bl	8000158 <__aeabi_dsub>
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	f7f9 fe4e 	bl	8000158 <__aeabi_dsub>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	2000      	movs	r0, #0
 80064c2:	492b      	ldr	r1, [pc, #172]	@ (8006570 <__ieee754_pow+0xa50>)
 80064c4:	f7f9 fe48 	bl	8000158 <__aeabi_dsub>
 80064c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80064cc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80064d0:	da09      	bge.n	80064e6 <__ieee754_pow+0x9c6>
 80064d2:	4652      	mov	r2, sl
 80064d4:	f000 f854 	bl	8006580 <scalbn>
 80064d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064dc:	f7ff bb89 	b.w	8005bf2 <__ieee754_pow+0xd2>
 80064e0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80064e4:	e740      	b.n	8006368 <__ieee754_pow+0x848>
 80064e6:	4621      	mov	r1, r4
 80064e8:	e7f6      	b.n	80064d8 <__ieee754_pow+0x9b8>
 80064ea:	2000      	movs	r0, #0
 80064ec:	4920      	ldr	r1, [pc, #128]	@ (8006570 <__ieee754_pow+0xa50>)
 80064ee:	f7ff bb35 	b.w	8005b5c <__ieee754_pow+0x3c>
 80064f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064f6:	f7ff bb31 	b.w	8005b5c <__ieee754_pow+0x3c>
 80064fa:	4650      	mov	r0, sl
 80064fc:	4659      	mov	r1, fp
 80064fe:	f7ff bb2d 	b.w	8005b5c <__ieee754_pow+0x3c>
 8006502:	460c      	mov	r4, r1
 8006504:	f7ff bb87 	b.w	8005c16 <__ieee754_pow+0xf6>
 8006508:	2400      	movs	r4, #0
 800650a:	f7ff bb69 	b.w	8005be0 <__ieee754_pow+0xc0>
 800650e:	bf00      	nop
 8006510:	652b82fe 	.word	0x652b82fe
 8006514:	3c971547 	.word	0x3c971547
 8006518:	00000000 	.word	0x00000000
 800651c:	3fe62e43 	.word	0x3fe62e43
 8006520:	fefa39ef 	.word	0xfefa39ef
 8006524:	3fe62e42 	.word	0x3fe62e42
 8006528:	0ca86c39 	.word	0x0ca86c39
 800652c:	be205c61 	.word	0xbe205c61
 8006530:	72bea4d0 	.word	0x72bea4d0
 8006534:	3e663769 	.word	0x3e663769
 8006538:	c5d26bf1 	.word	0xc5d26bf1
 800653c:	3ebbbd41 	.word	0x3ebbbd41
 8006540:	af25de2c 	.word	0xaf25de2c
 8006544:	3f11566a 	.word	0x3f11566a
 8006548:	16bebd93 	.word	0x16bebd93
 800654c:	3f66c16c 	.word	0x3f66c16c
 8006550:	5555553e 	.word	0x5555553e
 8006554:	3fc55555 	.word	0x3fc55555
 8006558:	40900000 	.word	0x40900000
 800655c:	4090cbff 	.word	0x4090cbff
 8006560:	3f6f3400 	.word	0x3f6f3400
 8006564:	4090cc00 	.word	0x4090cc00
 8006568:	3fe00000 	.word	0x3fe00000
 800656c:	fff00000 	.word	0xfff00000
 8006570:	3ff00000 	.word	0x3ff00000

08006574 <fabs>:
 8006574:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006578:	4619      	mov	r1, r3
 800657a:	4770      	bx	lr
 800657c:	0000      	movs	r0, r0
	...

08006580 <scalbn>:
 8006580:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006584:	4616      	mov	r6, r2
 8006586:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800658a:	4683      	mov	fp, r0
 800658c:	468c      	mov	ip, r1
 800658e:	460b      	mov	r3, r1
 8006590:	b982      	cbnz	r2, 80065b4 <scalbn+0x34>
 8006592:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006596:	4303      	orrs	r3, r0
 8006598:	d035      	beq.n	8006606 <scalbn+0x86>
 800659a:	4b2d      	ldr	r3, [pc, #180]	@ (8006650 <scalbn+0xd0>)
 800659c:	2200      	movs	r2, #0
 800659e:	f7f9 ff93 	bl	80004c8 <__aeabi_dmul>
 80065a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006654 <scalbn+0xd4>)
 80065a4:	4683      	mov	fp, r0
 80065a6:	429e      	cmp	r6, r3
 80065a8:	468c      	mov	ip, r1
 80065aa:	da0d      	bge.n	80065c8 <scalbn+0x48>
 80065ac:	a324      	add	r3, pc, #144	@ (adr r3, 8006640 <scalbn+0xc0>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	e019      	b.n	80065e8 <scalbn+0x68>
 80065b4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80065b8:	42ba      	cmp	r2, r7
 80065ba:	d109      	bne.n	80065d0 <scalbn+0x50>
 80065bc:	4602      	mov	r2, r0
 80065be:	f7f9 fdcd 	bl	800015c <__adddf3>
 80065c2:	4683      	mov	fp, r0
 80065c4:	468c      	mov	ip, r1
 80065c6:	e01e      	b.n	8006606 <scalbn+0x86>
 80065c8:	460b      	mov	r3, r1
 80065ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80065ce:	3a36      	subs	r2, #54	@ 0x36
 80065d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80065d4:	428e      	cmp	r6, r1
 80065d6:	dd0a      	ble.n	80065ee <scalbn+0x6e>
 80065d8:	a31b      	add	r3, pc, #108	@ (adr r3, 8006648 <scalbn+0xc8>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	4665      	mov	r5, ip
 80065e0:	f363 051e 	bfi	r5, r3, #0, #31
 80065e4:	4629      	mov	r1, r5
 80065e6:	481c      	ldr	r0, [pc, #112]	@ (8006658 <scalbn+0xd8>)
 80065e8:	f7f9 ff6e 	bl	80004c8 <__aeabi_dmul>
 80065ec:	e7e9      	b.n	80065c2 <scalbn+0x42>
 80065ee:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80065f2:	4432      	add	r2, r6
 80065f4:	428a      	cmp	r2, r1
 80065f6:	dcef      	bgt.n	80065d8 <scalbn+0x58>
 80065f8:	2a00      	cmp	r2, #0
 80065fa:	dd08      	ble.n	800660e <scalbn+0x8e>
 80065fc:	f36f 531e 	bfc	r3, #20, #11
 8006600:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006604:	46ac      	mov	ip, r5
 8006606:	4658      	mov	r0, fp
 8006608:	4661      	mov	r1, ip
 800660a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800660e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006612:	da09      	bge.n	8006628 <scalbn+0xa8>
 8006614:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006618:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800661c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006620:	480e      	ldr	r0, [pc, #56]	@ (800665c <scalbn+0xdc>)
 8006622:	f041 011f 	orr.w	r1, r1, #31
 8006626:	e7c1      	b.n	80065ac <scalbn+0x2c>
 8006628:	3236      	adds	r2, #54	@ 0x36
 800662a:	f36f 531e 	bfc	r3, #20, #11
 800662e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006632:	4658      	mov	r0, fp
 8006634:	4629      	mov	r1, r5
 8006636:	2200      	movs	r2, #0
 8006638:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <scalbn+0xe0>)
 800663a:	e7d5      	b.n	80065e8 <scalbn+0x68>
 800663c:	f3af 8000 	nop.w
 8006640:	c2f8f359 	.word	0xc2f8f359
 8006644:	01a56e1f 	.word	0x01a56e1f
 8006648:	8800759c 	.word	0x8800759c
 800664c:	7e37e43c 	.word	0x7e37e43c
 8006650:	43500000 	.word	0x43500000
 8006654:	ffff3cb0 	.word	0xffff3cb0
 8006658:	8800759c 	.word	0x8800759c
 800665c:	c2f8f359 	.word	0xc2f8f359
 8006660:	3c900000 	.word	0x3c900000

08006664 <with_errno>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4604      	mov	r4, r0
 8006668:	460d      	mov	r5, r1
 800666a:	4616      	mov	r6, r2
 800666c:	f7ff f87c 	bl	8005768 <__errno>
 8006670:	4629      	mov	r1, r5
 8006672:	6006      	str	r6, [r0, #0]
 8006674:	4620      	mov	r0, r4
 8006676:	bd70      	pop	{r4, r5, r6, pc}

08006678 <xflow>:
 8006678:	b513      	push	{r0, r1, r4, lr}
 800667a:	4604      	mov	r4, r0
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	b10c      	cbz	r4, 8006686 <xflow+0xe>
 8006682:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006686:	e9cd 2300 	strd	r2, r3, [sp]
 800668a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668e:	f7f9 ff1b 	bl	80004c8 <__aeabi_dmul>
 8006692:	2222      	movs	r2, #34	@ 0x22
 8006694:	b002      	add	sp, #8
 8006696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669a:	f7ff bfe3 	b.w	8006664 <with_errno>

0800669e <__math_uflow>:
 800669e:	2200      	movs	r2, #0
 80066a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80066a4:	f7ff bfe8 	b.w	8006678 <xflow>

080066a8 <__math_oflow>:
 80066a8:	2200      	movs	r2, #0
 80066aa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80066ae:	f7ff bfe3 	b.w	8006678 <xflow>
	...

080066b4 <__ieee754_sqrt>:
 80066b4:	4a65      	ldr	r2, [pc, #404]	@ (800684c <__ieee754_sqrt+0x198>)
 80066b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	438a      	bics	r2, r1
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	460b      	mov	r3, r1
 80066c2:	4604      	mov	r4, r0
 80066c4:	d10e      	bne.n	80066e4 <__ieee754_sqrt+0x30>
 80066c6:	4602      	mov	r2, r0
 80066c8:	f7f9 fefe 	bl	80004c8 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4630      	mov	r0, r6
 80066d2:	4639      	mov	r1, r7
 80066d4:	f7f9 fd42 	bl	800015c <__adddf3>
 80066d8:	4606      	mov	r6, r0
 80066da:	460f      	mov	r7, r1
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	2900      	cmp	r1, #0
 80066e6:	dc0c      	bgt.n	8006702 <__ieee754_sqrt+0x4e>
 80066e8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80066ec:	4302      	orrs	r2, r0
 80066ee:	d0f5      	beq.n	80066dc <__ieee754_sqrt+0x28>
 80066f0:	b189      	cbz	r1, 8006716 <__ieee754_sqrt+0x62>
 80066f2:	4602      	mov	r2, r0
 80066f4:	f7f9 fd30 	bl	8000158 <__aeabi_dsub>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	f7fa f80e 	bl	800071c <__aeabi_ddiv>
 8006700:	e7ea      	b.n	80066d8 <__ieee754_sqrt+0x24>
 8006702:	150a      	asrs	r2, r1, #20
 8006704:	d115      	bne.n	8006732 <__ieee754_sqrt+0x7e>
 8006706:	2100      	movs	r1, #0
 8006708:	e009      	b.n	800671e <__ieee754_sqrt+0x6a>
 800670a:	0ae3      	lsrs	r3, r4, #11
 800670c:	3a15      	subs	r2, #21
 800670e:	0564      	lsls	r4, r4, #21
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0fa      	beq.n	800670a <__ieee754_sqrt+0x56>
 8006714:	e7f7      	b.n	8006706 <__ieee754_sqrt+0x52>
 8006716:	460a      	mov	r2, r1
 8006718:	e7fa      	b.n	8006710 <__ieee754_sqrt+0x5c>
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	3101      	adds	r1, #1
 800671e:	02d8      	lsls	r0, r3, #11
 8006720:	d5fb      	bpl.n	800671a <__ieee754_sqrt+0x66>
 8006722:	1e48      	subs	r0, r1, #1
 8006724:	1a12      	subs	r2, r2, r0
 8006726:	f1c1 0020 	rsb	r0, r1, #32
 800672a:	fa24 f000 	lsr.w	r0, r4, r0
 800672e:	4303      	orrs	r3, r0
 8006730:	408c      	lsls	r4, r1
 8006732:	2700      	movs	r7, #0
 8006734:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8006738:	2116      	movs	r1, #22
 800673a:	07d2      	lsls	r2, r2, #31
 800673c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006740:	463a      	mov	r2, r7
 8006742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800674a:	bf5c      	itt	pl
 800674c:	005b      	lslpl	r3, r3, #1
 800674e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006752:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006756:	bf58      	it	pl
 8006758:	0064      	lslpl	r4, r4, #1
 800675a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800675e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006762:	0064      	lsls	r4, r4, #1
 8006764:	1815      	adds	r5, r2, r0
 8006766:	429d      	cmp	r5, r3
 8006768:	bfde      	ittt	le
 800676a:	182a      	addle	r2, r5, r0
 800676c:	1b5b      	suble	r3, r3, r5
 800676e:	183f      	addle	r7, r7, r0
 8006770:	0fe5      	lsrs	r5, r4, #31
 8006772:	3901      	subs	r1, #1
 8006774:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006778:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800677c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006780:	d1f0      	bne.n	8006764 <__ieee754_sqrt+0xb0>
 8006782:	460d      	mov	r5, r1
 8006784:	2620      	movs	r6, #32
 8006786:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800678a:	4293      	cmp	r3, r2
 800678c:	eb00 0c01 	add.w	ip, r0, r1
 8006790:	dc02      	bgt.n	8006798 <__ieee754_sqrt+0xe4>
 8006792:	d113      	bne.n	80067bc <__ieee754_sqrt+0x108>
 8006794:	45a4      	cmp	ip, r4
 8006796:	d811      	bhi.n	80067bc <__ieee754_sqrt+0x108>
 8006798:	f1bc 0f00 	cmp.w	ip, #0
 800679c:	eb0c 0100 	add.w	r1, ip, r0
 80067a0:	da3e      	bge.n	8006820 <__ieee754_sqrt+0x16c>
 80067a2:	2900      	cmp	r1, #0
 80067a4:	db3c      	blt.n	8006820 <__ieee754_sqrt+0x16c>
 80067a6:	f102 0e01 	add.w	lr, r2, #1
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	4672      	mov	r2, lr
 80067ae:	45a4      	cmp	ip, r4
 80067b0:	bf88      	it	hi
 80067b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80067b6:	eba4 040c 	sub.w	r4, r4, ip
 80067ba:	4405      	add	r5, r0
 80067bc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80067c0:	3e01      	subs	r6, #1
 80067c2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80067c6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80067ca:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80067ce:	d1dc      	bne.n	800678a <__ieee754_sqrt+0xd6>
 80067d0:	431c      	orrs	r4, r3
 80067d2:	d01a      	beq.n	800680a <__ieee754_sqrt+0x156>
 80067d4:	4c1e      	ldr	r4, [pc, #120]	@ (8006850 <__ieee754_sqrt+0x19c>)
 80067d6:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006854 <__ieee754_sqrt+0x1a0>
 80067da:	e9d4 0100 	ldrd	r0, r1, [r4]
 80067de:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067e2:	f7f9 fcb9 	bl	8000158 <__aeabi_dsub>
 80067e6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4650      	mov	r0, sl
 80067f0:	4659      	mov	r1, fp
 80067f2:	f7fa f8e5 	bl	80009c0 <__aeabi_dcmple>
 80067f6:	b140      	cbz	r0, 800680a <__ieee754_sqrt+0x156>
 80067f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80067fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006800:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006804:	d10e      	bne.n	8006824 <__ieee754_sqrt+0x170>
 8006806:	4635      	mov	r5, r6
 8006808:	3701      	adds	r7, #1
 800680a:	107b      	asrs	r3, r7, #1
 800680c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006810:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006814:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8006818:	086b      	lsrs	r3, r5, #1
 800681a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800681e:	e75b      	b.n	80066d8 <__ieee754_sqrt+0x24>
 8006820:	4696      	mov	lr, r2
 8006822:	e7c2      	b.n	80067aa <__ieee754_sqrt+0xf6>
 8006824:	f7f9 fc9a 	bl	800015c <__adddf3>
 8006828:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	f7fa f8ba 	bl	80009ac <__aeabi_dcmplt>
 8006838:	b120      	cbz	r0, 8006844 <__ieee754_sqrt+0x190>
 800683a:	1cab      	adds	r3, r5, #2
 800683c:	bf08      	it	eq
 800683e:	3701      	addeq	r7, #1
 8006840:	3502      	adds	r5, #2
 8006842:	e7e2      	b.n	800680a <__ieee754_sqrt+0x156>
 8006844:	1c6b      	adds	r3, r5, #1
 8006846:	f023 0501 	bic.w	r5, r3, #1
 800684a:	e7de      	b.n	800680a <__ieee754_sqrt+0x156>
 800684c:	7ff00000 	.word	0x7ff00000
 8006850:	08007dd0 	.word	0x08007dd0
 8006854:	08007dc8 	.word	0x08007dc8

08006858 <_init>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr

08006864 <_fini>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	bf00      	nop
 8006868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686a:	bc08      	pop	{r3}
 800686c:	469e      	mov	lr, r3
 800686e:	4770      	bx	lr
