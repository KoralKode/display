
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  080050e8  080050e8  000060e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006658  08006658  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006660  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000005c  080066bc  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080066bc  00008520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c70d  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e50  00000000  00000000  00014792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000165e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00017358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017de1  00000000  00000000  00017ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f79e  00000000  00000000  0002fbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6c6  00000000  00000000  0003f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caa22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  000caa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ce914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080050d0 	.word	0x080050d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080050d0 	.word	0x080050d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <int_to_str>:

    return ERROR_NONE;
}


void int_to_str(int num, char *str) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <int_to_str+0x60>
        str[0] = '0';
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2230      	movs	r2, #48	@ 0x30
 8000aa0:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e039      	b.n	8000b20 <int_to_str+0x98>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <int_to_str+0xa0>)
 8000ab0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab4:	1099      	asrs	r1, r3, #2
 8000ab6:	17d3      	asrs	r3, r2, #31
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	460b      	mov	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad1      	subs	r1, r2, r3
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	1c59      	adds	r1, r3, #1
 8000aca:	61f9      	str	r1, [r7, #28]
 8000acc:	3230      	adds	r2, #48	@ 0x30
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <int_to_str+0xa0>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1092      	asrs	r2, r2, #2
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dcde      	bgt.n	8000aac <int_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 8000af2:	e00b      	b.n	8000b0c <int_to_str+0x84>
        str[j++] = tmp[i];
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	61ba      	str	r2, [r7, #24]
 8000afa:	461a      	mov	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dcee      	bgt.n	8000af4 <int_to_str+0x6c>
    }
    str[j] = '\0';
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	66666667 	.word	0x66666667

08000b2c <get_encoder>:

int get_encoder(){
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <get_encoder+0x18>)
 8000b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	da00      	bge.n	8000b3a <get_encoder+0xe>
 8000b38:	3303      	adds	r3, #3
 8000b3a:	109b      	asrs	r3, r3, #2
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <set_encoder>:

void set_encoder(int e){
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	009a      	lsls	r2, r3, #2
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <set_encoder+0x1c>)
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <print_interface_mode0>:


void print_interface_mode0(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2001      	movs	r0, #1
 8000b72:	f001 f903 	bl	8001d7c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 ffb6 	bl	8001ae8 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <print_interface_mode0+0xac>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b84:	4824      	ldr	r0, [pc, #144]	@ (8000c18 <print_interface_mode0+0xb0>)
 8000b86:	f001 f8d3 	bl	8001d30 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <print_interface_mode0+0xac>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	9200      	str	r2, [sp, #0]
 8000b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b92:	4822      	ldr	r0, [pc, #136]	@ (8000c1c <print_interface_mode0+0xb4>)
 8000b94:	f001 f8cc 	bl	8001d30 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8000b98:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <print_interface_mode0+0xac>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	9200      	str	r2, [sp, #0]
 8000b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba0:	481f      	ldr	r0, [pc, #124]	@ (8000c20 <print_interface_mode0+0xb8>)
 8000ba2:	f001 f8c5 	bl	8001d30 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 f8e7 	bl	8001d7c <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb6:	481b      	ldr	r0, [pc, #108]	@ (8000c24 <print_interface_mode0+0xbc>)
 8000bb8:	f001 f8ba 	bl	8001d30 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc4:	4815      	ldr	r0, [pc, #84]	@ (8000c1c <print_interface_mode0+0xb4>)
 8000bc6:	f001 f8b3 	bl	8001d30 <ssd1306_WriteString>
	if(choiced_channel==0){
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <print_interface_mode0+0xc0>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d107      	bne.n	8000be2 <print_interface_mode0+0x7a>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bda:	4814      	ldr	r0, [pc, #80]	@ (8000c2c <print_interface_mode0+0xc4>)
 8000bdc:	f001 f8a8 	bl	8001d30 <ssd1306_WriteString>
 8000be0:	e012      	b.n	8000c08 <print_interface_mode0+0xa0>
	}else if(choiced_channel==1){
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <print_interface_mode0+0xc0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d107      	bne.n	8000bfa <print_interface_mode0+0x92>
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	9200      	str	r2, [sp, #0]
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <print_interface_mode0+0xc8>)
 8000bf4:	f001 f89c 	bl	8001d30 <ssd1306_WriteString>
 8000bf8:	e006      	b.n	8000c08 <print_interface_mode0+0xa0>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <print_interface_mode0+0xcc>)
 8000c04:	f001 f894 	bl	8001d30 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000c08:	f000 ff86 	bl	8001b18 <ssd1306_UpdateScreen>
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	080065e4 	.word	0x080065e4
 8000c18:	200001c4 	.word	0x200001c4
 8000c1c:	080050e8 	.word	0x080050e8
 8000c20:	200001cb 	.word	0x200001cb
 8000c24:	200001d2 	.word	0x200001d2
 8000c28:	200001da 	.word	0x200001da
 8000c2c:	080050ec 	.word	0x080050ec
 8000c30:	080050f0 	.word	0x080050f0
 8000c34:	080050f4 	.word	0x080050f4

08000c38 <print_interface_mode1>:

void print_interface_mode1(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2001      	movs	r0, #1
 8000c42:	f001 f89b 	bl	8001d7c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 ff4e 	bl	8001ae8 <ssd1306_Fill>
	if(choiced_num==0){
 8000c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc0 <print_interface_mode1+0x188>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d139      	bne.n	8000cc8 <print_interface_mode1+0x90>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000c54:	4b5b      	ldr	r3, [pc, #364]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	4a59      	ldr	r2, [pc, #356]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fa73 	bl	8000150 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	813b      	strh	r3, [r7, #8]
		for(int i=size;i<6;++i){
 8000c6e:	893b      	ldrh	r3, [r7, #8]
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <print_interface_mode1+0x50>
			ssd1306_WriteString("0", Font_7x10, White);
 8000c74:	4b55      	ldr	r3, [pc, #340]	@ (8000dcc <print_interface_mode1+0x194>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	9200      	str	r2, [sp, #0]
 8000c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c7c:	4854      	ldr	r0, [pc, #336]	@ (8000dd0 <print_interface_mode1+0x198>)
 8000c7e:	f001 f857 	bl	8001d30 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	ddf2      	ble.n	8000c74 <print_interface_mode1+0x3c>
		}
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4613      	mov	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000c9c:	1898      	adds	r0, r3, r2
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <print_interface_mode1+0x194>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca6:	f001 f843 	bl	8001d30 <ssd1306_WriteString>


		ssd1306_WriteString("   ", Font_7x10, White);
 8000caa:	4b48      	ldr	r3, [pc, #288]	@ (8000dcc <print_interface_mode1+0x194>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb2:	4848      	ldr	r0, [pc, #288]	@ (8000dd4 <print_interface_mode1+0x19c>)
 8000cb4:	f001 f83c 	bl	8001d30 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <print_interface_mode1+0x1a0>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	9200      	str	r2, [sp, #0]
 8000cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc0:	4846      	ldr	r0, [pc, #280]	@ (8000ddc <print_interface_mode1+0x1a4>)
 8000cc2:	f001 f835 	bl	8001d30 <ssd1306_WriteString>
 8000cc6:	e075      	b.n	8000db4 <print_interface_mode1+0x17c>
	}else{
		uint16_t size=strlen(num_string[choiced_channel]);
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4613      	mov	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa39 	bl	8000150 <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	817b      	strh	r3, [r7, #10]
		for(int i=5;i>size-1;--i){
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e017      	b.n	8000d18 <print_interface_mode1+0xe0>
			if(i==choiced_num-1){
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <print_interface_mode1+0x188>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d107      	bne.n	8000d04 <print_interface_mode1+0xcc>
				ssd1306_WriteString("0", Font_11x18, White);
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <print_interface_mode1+0x1a0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	9200      	str	r2, [sp, #0]
 8000cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfc:	4834      	ldr	r0, [pc, #208]	@ (8000dd0 <print_interface_mode1+0x198>)
 8000cfe:	f001 f817 	bl	8001d30 <ssd1306_WriteString>
 8000d02:	e006      	b.n	8000d12 <print_interface_mode1+0xda>
			}else{
				ssd1306_WriteString("0", Font_7x10, White);
 8000d04:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <print_interface_mode1+0x194>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	9200      	str	r2, [sp, #0]
 8000d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0c:	4830      	ldr	r0, [pc, #192]	@ (8000dd0 <print_interface_mode1+0x198>)
 8000d0e:	f001 f80f 	bl	8001d30 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	897b      	ldrh	r3, [r7, #10]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dae3      	bge.n	8000ce8 <print_interface_mode1+0xb0>
			}
		}
		for(int i=0;i<size;++i){
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e034      	b.n	8000d90 <print_interface_mode1+0x158>
			if(i==size-choiced_num){
 8000d26:	897b      	ldrh	r3, [r7, #10]
 8000d28:	4a25      	ldr	r2, [pc, #148]	@ (8000dc0 <print_interface_mode1+0x188>)
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d115      	bne.n	8000d60 <print_interface_mode1+0x128>

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000d34:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	441a      	add	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	713b      	strb	r3, [r7, #4]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <print_interface_mode1+0x1a0>)
 8000d52:	1d38      	adds	r0, r7, #4
 8000d54:	2201      	movs	r2, #1
 8000d56:	9200      	str	r2, [sp, #0]
 8000d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5a:	f000 ffe9 	bl	8001d30 <ssd1306_WriteString>
 8000d5e:	e014      	b.n	8000d8a <print_interface_mode1+0x152>
			}else{

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000d68:	460b      	mov	r3, r1
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	441a      	add	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	703b      	strb	r3, [r7, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <print_interface_mode1+0x194>)
 8000d7e:	4638      	mov	r0, r7
 8000d80:	2201      	movs	r2, #1
 8000d82:	9200      	str	r2, [sp, #0]
 8000d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d86:	f000 ffd3 	bl	8001d30 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	897b      	ldrh	r3, [r7, #10]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbc6      	blt.n	8000d26 <print_interface_mode1+0xee>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <print_interface_mode1+0x194>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <print_interface_mode1+0x19c>)
 8000da2:	f000 ffc5 	bl	8001d30 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <print_interface_mode1+0x194>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <print_interface_mode1+0x1a4>)
 8000db0:	f000 ffbe 	bl	8001d30 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000db4:	f000 feb0 	bl	8001b18 <ssd1306_UpdateScreen>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001d9 	.word	0x200001d9
 8000dc4:	200001da 	.word	0x200001da
 8000dc8:	200001c4 	.word	0x200001c4
 8000dcc:	080065e4 	.word	0x080065e4
 8000dd0:	080050f8 	.word	0x080050f8
 8000dd4:	080050e8 	.word	0x080050e8
 8000dd8:	080065f0 	.word	0x080065f0
 8000ddc:	080050fc 	.word	0x080050fc

08000de0 <int_mode_0>:

void int_mode_0(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000de4:	2102      	movs	r1, #2
 8000de6:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <int_mode_0+0x7c>)
 8000de8:	f001 fb2a 	bl	8002440 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <int_mode_0+0x18>
		choice=1;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <int_mode_0+0x80>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);  // Ждём отпускания
 8000df8:	bf00      	nop
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <int_mode_0+0x7c>)
 8000dfe:	f001 fb1f 	bl	8002440 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f8      	beq.n	8000dfa <int_mode_0+0x1a>
	if(choice==0){
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <int_mode_0+0x80>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d111      	bne.n	8000e34 <int_mode_0+0x54>
		choiced_channel=get_encoder()%3;
 8000e10:	f7ff fe8c 	bl	8000b2c <get_encoder>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <int_mode_0+0x84>)
 8000e18:	fb83 3102 	smull	r3, r1, r3, r2
 8000e1c:	17d3      	asrs	r3, r2, #31
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	460b      	mov	r3, r1
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	440b      	add	r3, r1
 8000e26:	1ad1      	subs	r1, r2, r3
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <int_mode_0+0x88>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 8000e2e:	f7ff fe9b 	bl	8000b68 <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 8000e32:	e011      	b.n	8000e58 <int_mode_0+0x78>
	}else if(choice==1){
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <int_mode_0+0x80>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10d      	bne.n	8000e58 <int_mode_0+0x78>
		set_encoder(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fe83 	bl	8000b48 <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <int_mode_0+0x8c>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <int_mode_0+0x90>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
		choice=0;
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <int_mode_0+0x80>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8000e54:	f7ff fef0 	bl	8000c38 <print_interface_mode1>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	200001c0 	.word	0x200001c0
 8000e64:	55555556 	.word	0x55555556
 8000e68:	200001da 	.word	0x200001da
 8000e6c:	200001d9 	.word	0x200001d9
 8000e70:	200001db 	.word	0x200001db

08000e74 <min_freq>:



void min_freq(){
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='8';
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <min_freq+0x38>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <min_freq+0x3c>)
 8000e80:	460b      	mov	r3, r1
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	4413      	add	r3, r2
 8000e88:	2238      	movs	r2, #56	@ 0x38
 8000e8a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='\0';
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <min_freq+0x38>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <min_freq+0x3c>)
 8000e94:	460b      	mov	r3, r1
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	1a5b      	subs	r3, r3, r1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001da 	.word	0x200001da
 8000eb0:	200001c4 	.word	0x200001c4

08000eb4 <max_freq>:

void max_freq(){
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='1';
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <max_freq+0xa4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4a27      	ldr	r2, [pc, #156]	@ (8000f5c <max_freq+0xa8>)
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	2231      	movs	r2, #49	@ 0x31
 8000eca:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='6';
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <max_freq+0xa4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <max_freq+0xa8>)
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	4413      	add	r3, r2
 8000edc:	3301      	adds	r3, #1
 8000ede:	2236      	movs	r2, #54	@ 0x36
 8000ee0:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][2]='0';
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <max_freq+0xa4>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <max_freq+0xa8>)
 8000eea:	460b      	mov	r3, r1
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	1a5b      	subs	r3, r3, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	2230      	movs	r2, #48	@ 0x30
 8000ef6:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][3]='0';
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <max_freq+0xa4>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <max_freq+0xa8>)
 8000f00:	460b      	mov	r3, r1
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	4413      	add	r3, r2
 8000f08:	3303      	adds	r3, #3
 8000f0a:	2230      	movs	r2, #48	@ 0x30
 8000f0c:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][4]='0';
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <max_freq+0xa4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <max_freq+0xa8>)
 8000f16:	460b      	mov	r3, r1
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	1a5b      	subs	r3, r3, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3304      	adds	r3, #4
 8000f20:	2230      	movs	r2, #48	@ 0x30
 8000f22:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][5]='0';
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <max_freq+0xa4>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f5c <max_freq+0xa8>)
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	4413      	add	r3, r2
 8000f34:	3305      	adds	r3, #5
 8000f36:	2230      	movs	r2, #48	@ 0x30
 8000f38:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][6]='\0';
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <max_freq+0xa4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <max_freq+0xa8>)
 8000f42:	460b      	mov	r3, r1
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	4413      	add	r3, r2
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	200001da 	.word	0x200001da
 8000f5c:	200001c4 	.word	0x200001c4

08000f60 <int_mode_1>:

void int_mode_1(){
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000f66:	2102      	movs	r1, #2
 8000f68:	4895      	ldr	r0, [pc, #596]	@ (80011c0 <int_mode_1+0x260>)
 8000f6a:	f001 fa69 	bl	8002440 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d11b      	bne.n	8000fac <int_mode_1+0x4c>
		if(choice==0){
 8000f74:	4b93      	ldr	r3, [pc, #588]	@ (80011c4 <int_mode_1+0x264>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <int_mode_1+0x3c>

			choice=1;
 8000f7c:	4b91      	ldr	r3, [pc, #580]	@ (80011c4 <int_mode_1+0x264>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 8000f82:	4b91      	ldr	r3, [pc, #580]	@ (80011c8 <int_mode_1+0x268>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d010      	beq.n	8000fac <int_mode_1+0x4c>
				prev_encoder=1000;
 8000f8a:	4b90      	ldr	r3, [pc, #576]	@ (80011cc <int_mode_1+0x26c>)
 8000f8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f90:	601a      	str	r2, [r3, #0]
				set_encoder(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f96:	f7ff fdd7 	bl	8000b48 <set_encoder>
 8000f9a:	e007      	b.n	8000fac <int_mode_1+0x4c>

			}
		}else{
			choice=0;
 8000f9c:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <int_mode_1+0x264>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
			set_encoder(choiced_num);
 8000fa2:	4b89      	ldr	r3, [pc, #548]	@ (80011c8 <int_mode_1+0x268>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fdce 	bl	8000b48 <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);  // Ждём отпускания
 8000fac:	bf00      	nop
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4883      	ldr	r0, [pc, #524]	@ (80011c0 <int_mode_1+0x260>)
 8000fb2:	f001 fa45 	bl	8002440 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f8      	beq.n	8000fae <int_mode_1+0x4e>
	if(choice==0){
 8000fbc:	4b81      	ldr	r3, [pc, #516]	@ (80011c4 <int_mode_1+0x264>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d113      	bne.n	8000fec <int_mode_1+0x8c>
		choiced_num=get_encoder()%7;
 8000fc4:	f7ff fdb2 	bl	8000b2c <get_encoder>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b81      	ldr	r3, [pc, #516]	@ (80011d0 <int_mode_1+0x270>)
 8000fcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	1099      	asrs	r1, r3, #2
 8000fd4:	17d3      	asrs	r3, r2, #31
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	460b      	mov	r3, r1
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1a5b      	subs	r3, r3, r1
 8000fde:	1ad1      	subs	r1, r2, r3
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	4b79      	ldr	r3, [pc, #484]	@ (80011c8 <int_mode_1+0x268>)
 8000fe4:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8000fe6:	f7ff fe27 	bl	8000c38 <print_interface_mode1>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
			print_interface_mode1();

		}
	}
}
 8000fea:	e0e4      	b.n	80011b6 <int_mode_1+0x256>
	}else if(choice==1){
 8000fec:	4b75      	ldr	r3, [pc, #468]	@ (80011c4 <int_mode_1+0x264>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f040 80e0 	bne.w	80011b6 <int_mode_1+0x256>
		if(choiced_num==0){
 8000ff6:	4b74      	ldr	r3, [pc, #464]	@ (80011c8 <int_mode_1+0x268>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d131      	bne.n	8001062 <int_mode_1+0x102>
			choice=0;
 8000ffe:	4b71      	ldr	r3, [pc, #452]	@ (80011c4 <int_mode_1+0x264>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 8001004:	4b73      	ldr	r3, [pc, #460]	@ (80011d4 <int_mode_1+0x274>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
			if(freq[choiced_channel]<8){
 800100a:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <int_mode_1+0x278>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <int_mode_1+0x27c>)
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	2b07      	cmp	r3, #7
 8001018:	dc09      	bgt.n	800102e <int_mode_1+0xce>
				freq[choiced_channel]=8;
 800101a:	4b6f      	ldr	r3, [pc, #444]	@ (80011d8 <int_mode_1+0x278>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b6e      	ldr	r3, [pc, #440]	@ (80011dc <int_mode_1+0x27c>)
 8001022:	2208      	movs	r2, #8
 8001024:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 8001028:	f7ff ff24 	bl	8000e74 <min_freq>
 800102c:	e011      	b.n	8001052 <int_mode_1+0xf2>
			}else if(freq[choiced_channel]>160000){
 800102e:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <int_mode_1+0x278>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b69      	ldr	r3, [pc, #420]	@ (80011dc <int_mode_1+0x27c>)
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	4a69      	ldr	r2, [pc, #420]	@ (80011e0 <int_mode_1+0x280>)
 800103c:	4293      	cmp	r3, r2
 800103e:	dd08      	ble.n	8001052 <int_mode_1+0xf2>
				freq[choiced_channel]=160000;
 8001040:	4b65      	ldr	r3, [pc, #404]	@ (80011d8 <int_mode_1+0x278>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <int_mode_1+0x27c>)
 8001048:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <int_mode_1+0x280>)
 800104a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 800104e:	f7ff ff31 	bl	8000eb4 <max_freq>
			set_encoder(choiced_channel);
 8001052:	4b61      	ldr	r3, [pc, #388]	@ (80011d8 <int_mode_1+0x278>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fd76 	bl	8000b48 <set_encoder>
			print_interface_mode0();
 800105c:	f7ff fd84 	bl	8000b68 <print_interface_mode0>
}
 8001060:	e0a9      	b.n	80011b6 <int_mode_1+0x256>
			int delta = get_encoder();
 8001062:	f7ff fd63 	bl	8000b2c <get_encoder>
 8001066:	6078      	str	r0, [r7, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);
 8001068:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <int_mode_1+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f9c7 	bl	8000404 <__aeabi_i2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	4b53      	ldr	r3, [pc, #332]	@ (80011c8 <int_mode_1+0x268>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3b01      	subs	r3, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9bf 	bl	8000404 <__aeabi_i2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4955      	ldr	r1, [pc, #340]	@ (80011e4 <int_mode_1+0x284>)
 8001090:	f003 f912 	bl	80042b8 <pow>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff fa1c 	bl	80004d8 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4614      	mov	r4, r2
 80010a6:	461d      	mov	r5, r3
 80010a8:	4b4b      	ldr	r3, [pc, #300]	@ (80011d8 <int_mode_1+0x278>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <int_mode_1+0x27c>)
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9a5 	bl	8000404 <__aeabi_i2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff f853 	bl	800016c <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4943      	ldr	r1, [pc, #268]	@ (80011d8 <int_mode_1+0x278>)
 80010cc:	7809      	ldrb	r1, [r1, #0]
 80010ce:	460c      	mov	r4, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fcb0 	bl	8000a38 <__aeabi_d2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a40      	ldr	r2, [pc, #256]	@ (80011dc <int_mode_1+0x27c>)
 80010dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<0){
 80010e0:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <int_mode_1+0x278>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <int_mode_1+0x27c>)
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da10      	bge.n	8001112 <int_mode_1+0x1b2>
				freq[choiced_channel]=1000000+freq[choiced_channel];
 80010f0:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <int_mode_1+0x278>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <int_mode_1+0x27c>)
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	4a36      	ldr	r2, [pc, #216]	@ (80011d8 <int_mode_1+0x278>)
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	4611      	mov	r1, r2
 8001102:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 8001106:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800110a:	4a34      	ldr	r2, [pc, #208]	@ (80011dc <int_mode_1+0x27c>)
 800110c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001110:	e03a      	b.n	8001188 <int_mode_1+0x228>
			}else if(freq[choiced_channel]>999999){
 8001112:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <int_mode_1+0x278>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <int_mode_1+0x27c>)
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	4a32      	ldr	r2, [pc, #200]	@ (80011e8 <int_mode_1+0x288>)
 8001120:	4293      	cmp	r3, r2
 8001122:	dd31      	ble.n	8001188 <int_mode_1+0x228>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <int_mode_1+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f969 	bl	8000404 <__aeabi_i2d>
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <int_mode_1+0x268>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4926      	ldr	r1, [pc, #152]	@ (80011e4 <int_mode_1+0x284>)
 800114c:	f003 f8b4 	bl	80042b8 <pow>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff f9be 	bl	80004d8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <int_mode_1+0x28c>)
 800116a:	f7fe ffff 	bl	800016c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4919      	ldr	r1, [pc, #100]	@ (80011d8 <int_mode_1+0x278>)
 8001174:	7809      	ldrb	r1, [r1, #0]
 8001176:	460c      	mov	r4, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc5c 	bl	8000a38 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <int_mode_1+0x27c>)
 8001184:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			prev_encoder=delta;
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <int_mode_1+0x26c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <int_mode_1+0x278>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <int_mode_1+0x27c>)
 8001196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <int_mode_1+0x278>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	460b      	mov	r3, r1
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	1a5b      	subs	r3, r3, r1
 80011a6:	4912      	ldr	r1, [pc, #72]	@ (80011f0 <int_mode_1+0x290>)
 80011a8:	440b      	add	r3, r1
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f7ff fc6b 	bl	8000a88 <int_to_str>
			print_interface_mode1();
 80011b2:	f7ff fd41 	bl	8000c38 <print_interface_mode1>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010800 	.word	0x40010800
 80011c4:	200001c0 	.word	0x200001c0
 80011c8:	200001d9 	.word	0x200001d9
 80011cc:	200001bc 	.word	0x200001bc
 80011d0:	92492493 	.word	0x92492493
 80011d4:	200001db 	.word	0x200001db
 80011d8:	200001da 	.word	0x200001da
 80011dc:	200001b0 	.word	0x200001b0
 80011e0:	00027100 	.word	0x00027100
 80011e4:	40240000 	.word	0x40240000
 80011e8:	000f423f 	.word	0x000f423f
 80011ec:	401c0000 	.word	0x401c0000
 80011f0:	200001c4 	.word	0x200001c4

080011f4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001204:	d108      	bne.n	8001218 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
    	if(interface_mode==0){
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x20>
    		int_mode_0();
 800120e:	f7ff fde7 	bl	8000de0 <int_mode_0>
    	}else{
    		int_mode_1();
    	}
    }
}
 8001212:	e001      	b.n	8001218 <HAL_TIM_PeriodElapsedCallback+0x24>
    		int_mode_1();
 8001214:	f7ff fea4 	bl	8000f60 <int_mode_1>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200001db 	.word	0x200001db

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fdf2 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f850 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 f9a2 	bl	8001578 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001234:	f000 f892 	bl	800135c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001238:	f000 f8ec 	bl	8001414 <MX_TIM1_Init>
  MX_I2C2_Init();
 800123c:	f000 f8bc 	bl	80013b8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001240:	f000 f940 	bl	80014c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001244:	213c      	movs	r1, #60	@ 0x3c
 8001246:	481a      	ldr	r0, [pc, #104]	@ (80012b0 <main+0x8c>)
 8001248:	f002 fb15 	bl	8003876 <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 800124c:	f000 fbe2 	bl	8001a14 <ssd1306_Init>
  //si5351_Init();
  set_encoder(0);//выставление энкодера в 0
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fc79 	bl	8000b48 <set_encoder>
      freq[0]=8;//начальная минимальная частота канала 0
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <main+0x90>)
 8001258:	2208      	movs	r2, #8
 800125a:	601a      	str	r2, [r3, #0]
      freq[1]=8;//начальная минимальная частота канала 1
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <main+0x90>)
 800125e:	2208      	movs	r2, #8
 8001260:	605a      	str	r2, [r3, #4]
      freq[2]=8;//начальная минимальная частота канала 2
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <main+0x90>)
 8001264:	2208      	movs	r2, #8
 8001266:	609a      	str	r2, [r3, #8]
      choice=0;//переменная для считывания был ли нажат энкодер
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <main+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
      choiced_channel=2;
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <main+0x98>)
 8001270:	2202      	movs	r2, #2
 8001272:	701a      	strb	r2, [r3, #0]
      min_freq();
 8001274:	f7ff fdfe 	bl	8000e74 <min_freq>
      choiced_channel=1;
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <main+0x98>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
      min_freq();
 800127e:	f7ff fdf9 	bl	8000e74 <min_freq>
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <main+0x9c>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <main+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
      min_freq();
 800128e:	f7ff fdf1 	bl	8000e74 <min_freq>
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <main+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
      prev_encoder=8;
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <main+0xa4>)
 800129a:	2208      	movs	r2, #8
 800129c:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 800129e:	f7ff fc63 	bl	8000b68 <print_interface_mode0>
  si5351_set_frequency(0, 8000);//устанвливаем частоту в минимальную
  si5351_set_frequency(1, 8000);//устанвливаем частоту в минимальную
  si5351_set_frequency(2, 8000);//устанвливаем частоту в минимальную
  si5351_enableOutputs(0xFF);//включаем все выходы
  */
  print_interface_mode0();//выводим на экран начальный интерфейс
 80012a2:	f7ff fc61 	bl	8000b68 <print_interface_mode0>
  HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 80012a6:	4809      	ldr	r0, [pc, #36]	@ (80012cc <main+0xa8>)
 80012a8:	f002 f9a2 	bl	80035f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <main+0x88>
 80012b0:	20000120 	.word	0x20000120
 80012b4:	200001b0 	.word	0x200001b0
 80012b8:	200001c0 	.word	0x200001c0
 80012bc:	200001da 	.word	0x200001da
 80012c0:	200001d9 	.word	0x200001d9
 80012c4:	200001db 	.word	0x200001db
 80012c8:	200001bc 	.word	0x200001bc
 80012cc:	20000168 	.word	0x20000168

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	@ 0x40
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	2228      	movs	r2, #40	@ 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ffb8 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800130e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fd6d 	bl	8002df8 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001324:	f000 f98e 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2102      	movs	r1, #2
 8001342:	4618      	mov	r0, r3
 8001344:	f001 ffda 	bl	80032fc <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800134e:	f000 f979 	bl	8001644 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	@ 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001362:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <MX_I2C1_Init+0x54>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001368:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <MX_I2C1_Init+0x58>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_I2C1_Init+0x50>)
 800137a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_I2C1_Init+0x50>)
 800139a:	f001 f881 	bl	80024a0 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f94e 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000078 	.word	0x20000078
 80013b0:	40005400 	.word	0x40005400
 80013b4:	000186a0 	.word	0x000186a0

080013b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <MX_I2C2_Init+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013c4:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_I2C2_Init+0x58>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013f6:	f001 f853 	bl	80024a0 <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001400:	f000 f920 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000cc 	.word	0x200000cc
 800140c:	40005800 	.word	0x40005800
 8001410:	000186a0 	.word	0x000186a0

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	@ 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2224      	movs	r2, #36	@ 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f002 ff16 	bl	8004254 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_TIM1_Init+0xa8>)
 8001432:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <MX_TIM1_Init+0xac>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <MX_TIM1_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <MX_TIM1_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_TIM1_Init+0xa8>)
 8001444:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_TIM1_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM1_Init+0xa8>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_TIM1_Init+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145c:	2303      	movs	r3, #3
 800145e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_TIM1_Init+0xa8>)
 8001488:	f002 f953 	bl	8003732 <HAL_TIM_Encoder_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001492:	f000 f8d7 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_TIM1_Init+0xa8>)
 80014a4:	f002 fe66 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ae:	f000 f8c9 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	@ 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000120 	.word	0x20000120
 80014c0:	40012c00 	.word	0x40012c00

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <MX_TIM2_Init+0xb0>)
 80014e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <MX_TIM2_Init+0xb0>)
 80014f0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_TIM2_Init+0xb0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_TIM2_Init+0xb0>)
 80014fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_TIM2_Init+0xb0>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_TIM2_Init+0xb0>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001510:	4818      	ldr	r0, [pc, #96]	@ (8001574 <MX_TIM2_Init+0xb0>)
 8001512:	f002 f8bf 	bl	8003694 <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800151c:	f000 f892 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4619      	mov	r1, r3
 800152e:	4811      	ldr	r0, [pc, #68]	@ (8001574 <MX_TIM2_Init+0xb0>)
 8001530:	f002 fe20 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800153a:	f000 f883 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	@ 0x60
 8001540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <MX_TIM2_Init+0xb0>)
 8001556:	f002 fb0d 	bl	8003b74 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001560:	f000 f870 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <MX_TIM2_Init+0xb0>)
 8001566:	f000 f975 	bl	8001854 <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000168 	.word	0x20000168

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <MX_GPIO_Init+0xc0>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a29      	ldr	r2, [pc, #164]	@ (8001638 <MX_GPIO_Init+0xc0>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <MX_GPIO_Init+0xc0>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a23      	ldr	r2, [pc, #140]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_GPIO_Init+0xc0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f2:	4812      	ldr	r0, [pc, #72]	@ (800163c <MX_GPIO_Init+0xc4>)
 80015f4:	f000 ff3b 	bl	800246e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2302      	movs	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	480a      	ldr	r0, [pc, #40]	@ (800163c <MX_GPIO_Init+0xc4>)
 8001612:	f000 fd91 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001616:	2301      	movs	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_GPIO_Init+0xc8>)
 800162a:	f000 fd85 	bl	8002138 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	40011000 	.word	0x40011000
 8001640:	40010800 	.word	0x40010800

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <Error_Handler+0x8>

08001650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_MspInit+0x5c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <HAL_MspInit+0x5c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_MspInit+0x5c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_MspInit+0x5c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_MspInit+0x5c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_MspInit+0x5c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_MspInit+0x60>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <HAL_MspInit+0x60>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000

080016b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a2b      	ldr	r2, [pc, #172]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d124      	bne.n	800171e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ec:	23c0      	movs	r3, #192	@ 0xc0
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4821      	ldr	r0, [pc, #132]	@ (8001784 <HAL_I2C_MspInit+0xd0>)
 8001700:	f000 fd1a 	bl	8002138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800170a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800170e:	61d3      	str	r3, [r2, #28]
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800171c:	e029      	b.n	8001772 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_I2C_MspInit+0xd4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d124      	bne.n	8001772 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001740:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	4619      	mov	r1, r3
 8001754:	480b      	ldr	r0, [pc, #44]	@ (8001784 <HAL_I2C_MspInit+0xd0>)
 8001756:	f000 fcef 	bl	8002138 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001760:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	@ 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40005400 	.word	0x40005400
 8001780:	40021000 	.word	0x40021000
 8001784:	40010c00 	.word	0x40010c00
 8001788:	40005800 	.word	0x40005800

0800178c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <HAL_TIM_Encoder_MspInit+0x74>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d124      	bne.n	80017f6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_TIM_Encoder_MspInit+0x78>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <HAL_TIM_Encoder_MspInit+0x78>)
 80017b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_TIM_Encoder_MspInit+0x78>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_TIM_Encoder_MspInit+0x78>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_TIM_Encoder_MspInit+0x78>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_TIM_Encoder_MspInit+0x78>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <HAL_TIM_Encoder_MspInit+0x7c>)
 80017f2:	f000 fca1 	bl	8002138 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012c00 	.word	0x40012c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40010800 	.word	0x40010800

0800180c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181c:	d113      	bne.n	8001846 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <HAL_TIM_PWM_MspInit+0x44>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0b      	ldr	r2, [pc, #44]	@ (8001850 <HAL_TIM_PWM_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_TIM_PWM_MspInit+0x44>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	201c      	movs	r0, #28
 800183c:	f000 fc45 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001840:	201c      	movs	r0, #28
 8001842:	f000 fc5e 	bl	8002102 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001872:	d12a      	bne.n	80018ca <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_TIM_MspPostInit+0x80>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <HAL_TIM_MspPostInit+0x80>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_TIM_MspPostInit+0x80>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001890:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <HAL_TIM_MspPostInit+0x84>)
 80018a2:	f000 fc49 	bl	8002138 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_TIM_MspPostInit+0x88>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <HAL_TIM_MspPostInit+0x88>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010800 	.word	0x40010800
 80018dc:	40010000 	.word	0x40010000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <NMI_Handler+0x4>

080018e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <MemManage_Handler+0x4>

080018f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 fab4 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <TIM2_IRQHandler+0x10>)
 800193e:	f002 f828 	bl	8003992 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000168 	.word	0x20000168

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff fff8 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195e:	490c      	ldr	r1, [pc, #48]	@ (8001990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001974:	4c09      	ldr	r4, [pc, #36]	@ (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f002 fc75 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fc4d 	bl	8001224 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001994:	08006660 	.word	0x08006660
  ldr r2, =_sbss
 8001998:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800199c:	20000520 	.word	0x20000520

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>

080019a2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
	...

080019b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	2200      	movs	r2, #0
 80019cc:	2178      	movs	r1, #120	@ 0x78
 80019ce:	4803      	ldr	r0, [pc, #12]	@ (80019dc <ssd1306_WriteCommand+0x2c>)
 80019d0:	f000 feaa 	bl	8002728 <HAL_I2C_Mem_Write>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200000cc 	.word	0x200000cc

080019e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	9202      	str	r2, [sp, #8]
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	2240      	movs	r2, #64	@ 0x40
 80019fe:	2178      	movs	r1, #120	@ 0x78
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <ssd1306_WriteData+0x30>)
 8001a02:	f000 fe91 	bl	8002728 <HAL_I2C_Mem_Write>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000cc 	.word	0x200000cc

08001a14 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a18:	f7ff ffc3 	bl	80019a2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a1c:	2064      	movs	r0, #100	@ 0x64
 8001a1e:	f000 fa59 	bl	8001ed4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f9d6 	bl	8001dd4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a28:	2020      	movs	r0, #32
 8001a2a:	f7ff ffc1 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff ffbe 	bl	80019b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a34:	20b0      	movs	r0, #176	@ 0xb0
 8001a36:	f7ff ffbb 	bl	80019b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a3a:	20c8      	movs	r0, #200	@ 0xc8
 8001a3c:	f7ff ffb8 	bl	80019b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff ffb5 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a46:	2010      	movs	r0, #16
 8001a48:	f7ff ffb2 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a4c:	2040      	movs	r0, #64	@ 0x40
 8001a4e:	f7ff ffaf 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a52:	20ff      	movs	r0, #255	@ 0xff
 8001a54:	f000 f9aa 	bl	8001dac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a58:	20a1      	movs	r0, #161	@ 0xa1
 8001a5a:	f7ff ffa9 	bl	80019b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a5e:	20a6      	movs	r0, #166	@ 0xa6
 8001a60:	f7ff ffa6 	bl	80019b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a64:	20a8      	movs	r0, #168	@ 0xa8
 8001a66:	f7ff ffa3 	bl	80019b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001a6a:	201f      	movs	r0, #31
 8001a6c:	f7ff ffa0 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a70:	20a4      	movs	r0, #164	@ 0xa4
 8001a72:	f7ff ff9d 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a76:	20d3      	movs	r0, #211	@ 0xd3
 8001a78:	f7ff ff9a 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ff97 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a82:	20d5      	movs	r0, #213	@ 0xd5
 8001a84:	f7ff ff94 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a88:	20f0      	movs	r0, #240	@ 0xf0
 8001a8a:	f7ff ff91 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a8e:	20d9      	movs	r0, #217	@ 0xd9
 8001a90:	f7ff ff8e 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a94:	2022      	movs	r0, #34	@ 0x22
 8001a96:	f7ff ff8b 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a9a:	20da      	movs	r0, #218	@ 0xda
 8001a9c:	f7ff ff88 	bl	80019b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff ff85 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001aa6:	20db      	movs	r0, #219	@ 0xdb
 8001aa8:	f7ff ff82 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001aac:	2020      	movs	r0, #32
 8001aae:	f7ff ff7f 	bl	80019b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ab2:	208d      	movs	r0, #141	@ 0x8d
 8001ab4:	f7ff ff7c 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ab8:	2014      	movs	r0, #20
 8001aba:	f7ff ff79 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 f988 	bl	8001dd4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f80f 	bl	8001ae8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001aca:	f000 f825 	bl	8001b18 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <ssd1306_Init+0xd0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <ssd1306_Init+0xd0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ada:	4b02      	ldr	r3, [pc, #8]	@ (8001ae4 <ssd1306_Init+0xd0>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	711a      	strb	r2, [r3, #4]
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200003dc 	.word	0x200003dc

08001ae8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <ssd1306_Fill+0x14>
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <ssd1306_Fill+0x16>
 8001afc:	23ff      	movs	r3, #255	@ 0xff
 8001afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b02:	4619      	mov	r1, r3
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <ssd1306_Fill+0x2c>)
 8001b06:	f002 fba5 	bl	8004254 <memset>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200001dc 	.word	0x200001dc

08001b18 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	e016      	b.n	8001b52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3b50      	subs	r3, #80	@ 0x50
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff40 	bl	80019b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff ff3d 	bl	80019b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b36:	2010      	movs	r0, #16
 8001b38:	f7ff ff3a 	bl	80019b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <ssd1306_UpdateScreen+0x4c>)
 8001b42:	4413      	add	r3, r2
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff4a 	bl	80019e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d9e5      	bls.n	8001b24 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200001dc 	.word	0x200001dc

08001b68 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	460b      	mov	r3, r1
 8001b74:	71bb      	strb	r3, [r7, #6]
 8001b76:	4613      	mov	r3, r2
 8001b78:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db3d      	blt.n	8001bfe <ssd1306_DrawPixel+0x96>
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	2b1f      	cmp	r3, #31
 8001b86:	d83a      	bhi.n	8001bfe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001b88:	797b      	ldrb	r3, [r7, #5]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d11a      	bne.n	8001bc4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	b2d8      	uxtb	r0, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <ssd1306_DrawPixel+0xa0>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b259      	sxtb	r1, r3
 8001bb4:	79fa      	ldrb	r2, [r7, #7]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	01db      	lsls	r3, r3, #7
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2c9      	uxtb	r1, r1
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <ssd1306_DrawPixel+0xa0>)
 8001bc0:	54d1      	strb	r1, [r2, r3]
 8001bc2:	e01d      	b.n	8001c00 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	b2d8      	uxtb	r0, r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <ssd1306_DrawPixel+0xa0>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	b25a      	sxtb	r2, r3
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	4013      	ands	r3, r2
 8001bec:	b259      	sxtb	r1, r3
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	01db      	lsls	r3, r3, #7
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2c9      	uxtb	r1, r1
 8001bf8:	4a03      	ldr	r2, [pc, #12]	@ (8001c08 <ssd1306_DrawPixel+0xa0>)
 8001bfa:	54d1      	strb	r1, [r2, r3]
 8001bfc:	e000      	b.n	8001c00 <ssd1306_DrawPixel+0x98>
        return;
 8001bfe:	bf00      	nop
    }
}
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	200001dc 	.word	0x200001dc

08001c0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4604      	mov	r4, r0
 8001c14:	4638      	mov	r0, r7
 8001c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b1f      	cmp	r3, #31
 8001c22:	d902      	bls.n	8001c2a <ssd1306_WriteChar+0x1e>
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c28:	d901      	bls.n	8001c2e <ssd1306_WriteChar+0x22>
        return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e079      	b.n	8001d22 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <ssd1306_WriteChar+0x34>
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3b20      	subs	r3, #32
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	e000      	b.n	8001c42 <ssd1306_WriteChar+0x36>
 8001c40:	783b      	ldrb	r3, [r7, #0]
 8001c42:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2b80      	cmp	r3, #128	@ 0x80
 8001c50:	dc06      	bgt.n	8001c60 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001c52:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001c54:	885b      	ldrh	r3, [r3, #2]
 8001c56:	461a      	mov	r2, r3
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	dd01      	ble.n	8001c64 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e05e      	b.n	8001d22 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e04d      	b.n	8001d06 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3b20      	subs	r3, #32
 8001c70:	7879      	ldrb	r1, [r7, #1]
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	440b      	add	r3, r1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	e036      	b.n	8001cf8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001caa:	885b      	ldrh	r3, [r3, #2]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7ff ff54 	bl	8001b68 <ssd1306_DrawPixel>
 8001cc0:	e017      	b.n	8001cf2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	b2d8      	uxtb	r0, r3
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001cd2:	885b      	ldrh	r3, [r3, #2]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2d9      	uxtb	r1, r3
 8001cde:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	f7ff ff3b 	bl	8001b68 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3c4      	bcc.n	8001c8a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d3ac      	bcc.n	8001c6a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <ssd1306_WriteChar+0x120>)
 8001d1e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	@ 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200003dc 	.word	0x200003dc

08001d30 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	4638      	mov	r0, r7
 8001d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001d3e:	e013      	b.n	8001d68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	7818      	ldrb	r0, [r3, #0]
 8001d44:	7e3b      	ldrb	r3, [r7, #24]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	463b      	mov	r3, r7
 8001d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4c:	f7ff ff5e 	bl	8001c0c <ssd1306_WriteChar>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d002      	beq.n	8001d62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	e008      	b.n	8001d74 <ssd1306_WriteString+0x44>
        }
        str++;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e7      	bne.n	8001d40 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <ssd1306_SetCursor+0x2c>)
 8001d92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <ssd1306_SetCursor+0x2c>)
 8001d9a:	805a      	strh	r2, [r3, #2]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200003dc 	.word	0x200003dc

08001dac <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001db6:	2381      	movs	r3, #129	@ 0x81
 8001db8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fdf7 	bl	80019b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fdf3 	bl	80019b0 <ssd1306_WriteCommand>
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001de4:	23af      	movs	r3, #175	@ 0xaf
 8001de6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <ssd1306_SetDisplayOn+0x38>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	715a      	strb	r2, [r3, #5]
 8001dee:	e004      	b.n	8001dfa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001df0:	23ae      	movs	r3, #174	@ 0xae
 8001df2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <ssd1306_SetDisplayOn+0x38>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fdd7 	bl	80019b0 <ssd1306_WriteCommand>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200003dc 	.word	0x200003dc

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_Init+0x28>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <HAL_Init+0x28>)
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f947 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	200f      	movs	r0, #15
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff fc10 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f95f 	bl	800211e <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f927 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_IncTick+0x20>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <HAL_IncTick+0x20>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	200003e4 	.word	0x200003e4

08001ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	@ (8001ed0 <HAL_GetTick+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	200003e4 	.word	0x200003e4

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffe0 	bl	8001ec0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4906      	ldr	r1, [pc, #24]	@ (8001fb4 <__NVIC_EnableIRQ+0x34>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff90 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff2d 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff42 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff35 	bl	8001f80 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	@ 0x2c
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	e169      	b.n	8002420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800214c:	2201      	movs	r2, #1
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8158 	bne.w	800241a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a9a      	ldr	r2, [pc, #616]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d05e      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002174:	4a98      	ldr	r2, [pc, #608]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d875      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800217a:	4a98      	ldr	r2, [pc, #608]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d058      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002180:	4a96      	ldr	r2, [pc, #600]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d86f      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002186:	4a96      	ldr	r2, [pc, #600]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d052      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 800218c:	4a94      	ldr	r2, [pc, #592]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d869      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002192:	4a94      	ldr	r2, [pc, #592]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04c      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002198:	4a92      	ldr	r2, [pc, #584]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d863      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800219e:	4a92      	ldr	r2, [pc, #584]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d046      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 80021a4:	4a90      	ldr	r2, [pc, #576]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d85d      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d82a      	bhi.n	8002204 <HAL_GPIO_Init+0xcc>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d859      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_GPIO_Init+0x80>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002233 	.word	0x08002233
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800221f 	.word	0x0800221f
 80021c4:	08002261 	.word	0x08002261
 80021c8:	08002267 	.word	0x08002267
 80021cc:	08002267 	.word	0x08002267
 80021d0:	08002267 	.word	0x08002267
 80021d4:	08002267 	.word	0x08002267
 80021d8:	08002267 	.word	0x08002267
 80021dc:	08002267 	.word	0x08002267
 80021e0:	08002267 	.word	0x08002267
 80021e4:	08002267 	.word	0x08002267
 80021e8:	08002267 	.word	0x08002267
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002267 	.word	0x08002267
 80021f4:	08002267 	.word	0x08002267
 80021f8:	08002267 	.word	0x08002267
 80021fc:	08002215 	.word	0x08002215
 8002200:	08002229 	.word	0x08002229
 8002204:	4a79      	ldr	r2, [pc, #484]	@ (80023ec <HAL_GPIO_Init+0x2b4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220a:	e02c      	b.n	8002266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e029      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e024      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	3308      	adds	r3, #8
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e01f      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	330c      	adds	r3, #12
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e01a      	b.n	8002268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223a:	2304      	movs	r3, #4
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e013      	b.n	8002268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	611a      	str	r2, [r3, #16]
          break;
 8002252:	e009      	b.n	8002268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	615a      	str	r2, [r3, #20]
          break;
 800225e:	e003      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x130>
          break;
 8002266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d801      	bhi.n	8002272 <HAL_GPIO_Init+0x13a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e001      	b.n	8002276 <HAL_GPIO_Init+0x13e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d802      	bhi.n	8002284 <HAL_GPIO_Init+0x14c>
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x152>
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	3b08      	subs	r3, #8
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	210f      	movs	r1, #15
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80b1 	beq.w	800241a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d0:	4a48      	ldr	r2, [pc, #288]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a40      	ldr	r2, [pc, #256]	@ (80023f8 <HAL_GPIO_Init+0x2c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_GPIO_Init+0x1ec>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3f      	ldr	r2, [pc, #252]	@ (80023fc <HAL_GPIO_Init+0x2c4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_GPIO_Init+0x1e8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3e      	ldr	r2, [pc, #248]	@ (8002400 <HAL_GPIO_Init+0x2c8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0x1e4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	@ (8002404 <HAL_GPIO_Init+0x2cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_Init+0x1e0>
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002318:	2304      	movs	r3, #4
 800231a:	e004      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 800231c:	2302      	movs	r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002324:	2300      	movs	r3, #0
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	4093      	lsls	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002336:	492f      	ldr	r1, [pc, #188]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002350:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	492c      	ldr	r1, [pc, #176]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4928      	ldr	r1, [pc, #160]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4922      	ldr	r1, [pc, #136]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	491e      	ldr	r1, [pc, #120]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4918      	ldr	r1, [pc, #96]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4914      	ldr	r1, [pc, #80]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e021      	b.n	800241a <HAL_GPIO_Init+0x2e2>
 80023d6:	bf00      	nop
 80023d8:	10320000 	.word	0x10320000
 80023dc:	10310000 	.word	0x10310000
 80023e0:	10220000 	.word	0x10220000
 80023e4:	10210000 	.word	0x10210000
 80023e8:	10120000 	.word	0x10120000
 80023ec:	10110000 	.word	0x10110000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_GPIO_Init+0x304>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_GPIO_Init+0x304>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae8e 	bne.w	800214c <HAL_GPIO_Init+0x14>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	372c      	adds	r7, #44	@ 0x2c
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
 800247a:	4613      	mov	r3, r2
 800247c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247e:	787b      	ldrb	r3, [r7, #1]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002484:	887a      	ldrh	r2, [r7, #2]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800248a:	e003      	b.n	8002494 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	611a      	str	r2, [r3, #16]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e12b      	b.n	800270a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff f8f4 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	@ 0x24
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002504:	f001 f842 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a81      	ldr	r2, [pc, #516]	@ (8002714 <HAL_I2C_Init+0x274>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d807      	bhi.n	8002524 <HAL_I2C_Init+0x84>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a80      	ldr	r2, [pc, #512]	@ (8002718 <HAL_I2C_Init+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e006      	b.n	8002532 <HAL_I2C_Init+0x92>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a7d      	ldr	r2, [pc, #500]	@ (800271c <HAL_I2C_Init+0x27c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a78      	ldr	r2, [pc, #480]	@ (8002720 <HAL_I2C_Init+0x280>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a6a      	ldr	r2, [pc, #424]	@ (8002714 <HAL_I2C_Init+0x274>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d802      	bhi.n	8002574 <HAL_I2C_Init+0xd4>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	e009      	b.n	8002588 <HAL_I2C_Init+0xe8>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a69      	ldr	r2, [pc, #420]	@ (8002724 <HAL_I2C_Init+0x284>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800259a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	495c      	ldr	r1, [pc, #368]	@ (8002714 <HAL_I2C_Init+0x274>)
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d819      	bhi.n	80025dc <HAL_I2C_Init+0x13c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e59      	subs	r1, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_I2C_Init+0x138>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e59      	subs	r1, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	e051      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025d8:	2304      	movs	r3, #4
 80025da:	e04f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_I2C_Init+0x168>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e012      	b.n	800262e <HAL_I2C_Init+0x18e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x196>
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_I2C_Init+0x1dc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <HAL_I2C_Init+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e58      	subs	r0, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800265a:	e00f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6911      	ldr	r1, [r2, #16]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	460b      	mov	r3, r1
 800273c:	813b      	strh	r3, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002742:	f7ff fbbd 	bl	8001ec0 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	f040 80d9 	bne.w	8002908 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2319      	movs	r3, #25
 800275c:	2201      	movs	r2, #1
 800275e:	496d      	ldr	r1, [pc, #436]	@ (8002914 <HAL_I2C_Mem_Write+0x1ec>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f971 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_I2C_Mem_Write+0x56>
 800277a:	2302      	movs	r3, #2
 800277c:	e0c5      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d007      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2221      	movs	r2, #33	@ 0x21
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	@ 0x40
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002918 <HAL_I2C_Mem_Write+0x1f0>)
 80027e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e6:	88f8      	ldrh	r0, [r7, #6]
 80027e8:	893a      	ldrh	r2, [r7, #8]
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4603      	mov	r3, r0
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f890 	bl	800291c <I2C_RequestMemoryWrite>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d052      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e081      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa36 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Mem_Write+0x180>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1aa      	bne.n	8002806 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa29 	bl	8002d0c <I2C_WaitOnBTFFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e016      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2200      	movs	r2, #0
 800294e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f878 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800296c:	d103      	bne.n	8002976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e05f      	b.n	8002a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	492d      	ldr	r1, [pc, #180]	@ (8002a44 <I2C_RequestMemoryWrite+0x128>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f8d3 	bl	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04c      	b.n	8002a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f95e 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00d      	beq.n	80029e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d107      	bne.n	80029de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e02b      	b.n	8002a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029e8:	893b      	ldrh	r3, [r7, #8]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	e021      	b.n	8002a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029f4:	893b      	ldrh	r3, [r7, #8]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a04:	6a39      	ldr	r1, [r7, #32]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f938 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00d      	beq.n	8002a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d107      	bne.n	8002a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e005      	b.n	8002a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2e:	893b      	ldrh	r3, [r7, #8]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	00010002 	.word	0x00010002

08002a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	e048      	b.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d044      	beq.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff fa2d 	bl	8001ec0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d139      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10d      	bne.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	e00c      	b.n	8002ab8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d116      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e023      	b.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10d      	bne.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	e00c      	b.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d093      	beq.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b4a:	e071      	b.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5a:	d123      	bne.n	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e067      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d041      	beq.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7ff f988 	bl	8001ec0 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d136      	bne.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d10c      	bne.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e00b      	b.n	8002bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e021      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10c      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e00b      	b.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af6d 	bne.w	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c88:	e034      	b.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f886 	bl	8002d9c <I2C_IsAcknowledgeFailed>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e034      	b.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d028      	beq.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7ff f90d 	bl	8001ec0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11d      	bne.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d016      	beq.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b80      	cmp	r3, #128	@ 0x80
 8002d00:	d1c3      	bne.n	8002c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d18:	e034      	b.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f83e 	bl	8002d9c <I2C_IsAcknowledgeFailed>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e034      	b.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d028      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7ff f8c5 	bl	8001ec0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11d      	bne.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d016      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e007      	b.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d1c3      	bne.n	8002d1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db2:	d11b      	bne.n	8002dec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e272      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e18:	4b92      	ldr	r3, [pc, #584]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d00c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e24:	4b8f      	ldr	r3, [pc, #572]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d112      	bne.n	8002e56 <HAL_RCC_OscConfig+0x5e>
 8002e30:	4b8c      	ldr	r3, [pc, #560]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e3c:	d10b      	bne.n	8002e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3e:	4b89      	ldr	r3, [pc, #548]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x12c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d168      	bne.n	8002f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e24c      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x76>
 8002e60:	4b80      	ldr	r3, [pc, #512]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7f      	ldr	r2, [pc, #508]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e02e      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4b7b      	ldr	r3, [pc, #492]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7a      	ldr	r2, [pc, #488]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b78      	ldr	r3, [pc, #480]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a77      	ldr	r2, [pc, #476]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xbc>
 8002e9a:	4b72      	ldr	r3, [pc, #456]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a71      	ldr	r2, [pc, #452]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b68      	ldr	r3, [pc, #416]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a67      	ldr	r2, [pc, #412]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fff4 	bl	8001ec0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fff0 	bl	8001ec0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e200      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b5d      	ldr	r3, [pc, #372]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xe4>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe ffe0 	bl	8001ec0 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe ffdc 	bl	8001ec0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1ec      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x10c>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b4c      	ldr	r3, [pc, #304]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f3e:	4b49      	ldr	r3, [pc, #292]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x18c>
 8002f4a:	4b46      	ldr	r3, [pc, #280]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b43      	ldr	r3, [pc, #268]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x176>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1c0      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4939      	ldr	r1, [pc, #228]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b36      	ldr	r3, [pc, #216]	@ (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe ff95 	bl	8001ec0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe ff91 	bl	8001ec0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1a1      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4927      	ldr	r1, [pc, #156]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe ff74 	bl	8001ec0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe ff70 	bl	8001ec0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e180      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03a      	beq.n	800307c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d019      	beq.n	8003042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b17      	ldr	r3, [pc, #92]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe ff54 	bl	8001ec0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe ff50 	bl	8001ec0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e160      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <HAL_RCC_OscConfig+0x26c>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800303a:	2001      	movs	r0, #1
 800303c:	f000 faba 	bl	80035b4 <RCC_Delay>
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe ff3a 	bl	8001ec0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304e:	e00f      	b.n	8003070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe ff36 	bl	8001ec0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d908      	bls.n	8003070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e146      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	42420000 	.word	0x42420000
 800306c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b92      	ldr	r3, [pc, #584]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e9      	bne.n	8003050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a6 	beq.w	80031d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b8b      	ldr	r3, [pc, #556]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b88      	ldr	r3, [pc, #544]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a87      	ldr	r2, [pc, #540]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	61d3      	str	r3, [r2, #28]
 80030a6:	4b85      	ldr	r3, [pc, #532]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b82      	ldr	r3, [pc, #520]	@ (80032c0 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b7f      	ldr	r3, [pc, #508]	@ (80032c0 <HAL_RCC_OscConfig+0x4c8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7e      	ldr	r2, [pc, #504]	@ (80032c0 <HAL_RCC_OscConfig+0x4c8>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fef7 	bl	8001ec0 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fe fef3 	bl	8001ec0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	@ 0x64
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e103      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b75      	ldr	r3, [pc, #468]	@ (80032c0 <HAL_RCC_OscConfig+0x4c8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x312>
 80030fc:	4b6f      	ldr	r3, [pc, #444]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a6e      	ldr	r2, [pc, #440]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	e02d      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x334>
 8003112:	4b6a      	ldr	r3, [pc, #424]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a69      	ldr	r2, [pc, #420]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	4b67      	ldr	r3, [pc, #412]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a66      	ldr	r2, [pc, #408]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6213      	str	r3, [r2, #32]
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x356>
 8003134:	4b61      	ldr	r3, [pc, #388]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a60      	ldr	r2, [pc, #384]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	4b5e      	ldr	r3, [pc, #376]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4a5d      	ldr	r2, [pc, #372]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6213      	str	r3, [r2, #32]
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
 800314e:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a5a      	ldr	r2, [pc, #360]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	4b58      	ldr	r3, [pc, #352]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a57      	ldr	r2, [pc, #348]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fe fea7 	bl	8001ec0 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fea3 	bl	8001ec0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0b1      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b4b      	ldr	r3, [pc, #300]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x37e>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe fe91 	bl	8001ec0 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fe8d 	bl	8001ec0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e09b      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4b40      	ldr	r3, [pc, #256]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a3b      	ldr	r2, [pc, #236]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8087 	beq.w	80032ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e0:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d061      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d146      	bne.n	8003282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b33      	ldr	r3, [pc, #204]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fe61 	bl	8001ec0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003202:	f7fe fe5d 	bl	8001ec0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e06d      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003214:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003228:	d108      	bne.n	800323c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800322a:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	4921      	ldr	r1, [pc, #132]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323c:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a19      	ldr	r1, [r3, #32]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	430b      	orrs	r3, r1
 800324e:	491b      	ldr	r1, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fe31 	bl	8001ec0 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe fe2d 	bl	8001ec0 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e03d      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x46a>
 8003280:	e035      	b.n	80032ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fe1a 	bl	8001ec0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe fe16 	bl	8001ec0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e026      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x498>
 80032ae:	e01e      	b.n	80032ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e019      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40007000 	.word	0x40007000
 80032c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_RCC_OscConfig+0x500>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000

080032fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0d0      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d910      	bls.n	8003340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b67      	ldr	r3, [pc, #412]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	4965      	ldr	r1, [pc, #404]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b63      	ldr	r3, [pc, #396]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0b8      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003358:	4b59      	ldr	r3, [pc, #356]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a58      	ldr	r2, [pc, #352]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003370:	4b53      	ldr	r3, [pc, #332]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a52      	ldr	r2, [pc, #328]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800337a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b50      	ldr	r3, [pc, #320]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	494d      	ldr	r1, [pc, #308]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d040      	beq.n	800341c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b47      	ldr	r3, [pc, #284]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b41      	ldr	r3, [pc, #260]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e073      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06b      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4936      	ldr	r1, [pc, #216]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fe fd68 	bl	8001ec0 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fe fd64 	bl	8001ec0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e053      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b2d      	ldr	r3, [pc, #180]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d210      	bcs.n	800344c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b24      	ldr	r3, [pc, #144]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4922      	ldr	r1, [pc, #136]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e032      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4916      	ldr	r1, [pc, #88]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003476:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	490e      	ldr	r1, [pc, #56]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800348a:	f000 f821 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	490a      	ldr	r1, [pc, #40]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <HAL_RCC_ClockConfig+0x1cc>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_RCC_ClockConfig+0x1d0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fcc6 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	08005104 	.word	0x08005104
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004

080034d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x94>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x30>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x36>
 80034fe:	e027      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x98>)
 8003502:	613b      	str	r3, [r7, #16]
      break;
 8003504:	e027      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	4a17      	ldr	r2, [pc, #92]	@ (800356c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800351e:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x94>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0c5b      	lsrs	r3, r3, #17
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	4a11      	ldr	r2, [pc, #68]	@ (8003570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
 800352c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x98>)
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e004      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x98>)
 8003552:	613b      	str	r3, [r7, #16]
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	693b      	ldr	r3, [r7, #16]
}
 8003558:	4618      	mov	r0, r3
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	007a1200 	.word	0x007a1200
 800356c:	080065fc 	.word	0x080065fc
 8003570:	0800660c 	.word	0x0800660c
 8003574:	003d0900 	.word	0x003d0900

08003578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800357c:	4b02      	ldr	r3, [pc, #8]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x10>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000000 	.word	0x20000000

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003590:	f7ff fff2 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08005114 	.word	0x08005114

080035b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <RCC_Delay+0x34>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <RCC_Delay+0x38>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d0:	bf00      	nop
  }
  while (Delay --);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <RCC_Delay+0x1c>
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000000 	.word	0x20000000
 80035ec:	10624dd3 	.word	0x10624dd3

080035f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e03a      	b.n	800367e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_TIM_Base_Start_IT+0x98>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003632:	d009      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <HAL_TIM_Base_Start_IT+0x9c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <HAL_TIM_Base_Start_IT+0xa0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d111      	bne.n	800366c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d010      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	e007      	b.n	800367c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800

08003694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e041      	b.n	800372a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe f8a6 	bl	800180c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 fb34 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e093      	b.n	800386e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f816 	bl	800178c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003776:	f023 0307 	bic.w	r3, r3, #7
 800377a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fada 	bl	8003d40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b4:	f023 0303 	bic.w	r3, r3, #3
 80037b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	4313      	orrs	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037d2:	f023 030c 	bic.w	r3, r3, #12
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4313      	orrs	r3, r2
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	011a      	lsls	r2, r3, #4
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	4313      	orrs	r3, r2
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003810:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4313      	orrs	r3, r2
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003886:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800388e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003896:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800389e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d110      	bne.n	80038c8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d102      	bne.n	80038b2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ac:	7b7b      	ldrb	r3, [r7, #13]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e069      	b.n	800398a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c6:	e031      	b.n	800392c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d110      	bne.n	80038f0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ce:	7bbb      	ldrb	r3, [r7, #14]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d102      	bne.n	80038da <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038d4:	7b3b      	ldrb	r3, [r7, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e055      	b.n	800398a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ee:	e01d      	b.n	800392c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d108      	bne.n	8003908 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f6:	7bbb      	ldrb	r3, [r7, #14]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038fc:	7b7b      	ldrb	r3, [r7, #13]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003902:	7b3b      	ldrb	r3, [r7, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e03e      	b.n	800398a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_Encoder_Start+0xc4>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d008      	beq.n	800394a <HAL_TIM_Encoder_Start+0xd4>
 8003938:	e00f      	b.n	800395a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fbf2 	bl	800412c <TIM_CCxChannelCmd>
      break;
 8003948:	e016      	b.n	8003978 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	2104      	movs	r1, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fbea 	bl	800412c <TIM_CCxChannelCmd>
      break;
 8003958:	e00e      	b.n	8003978 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fbe2 	bl	800412c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	2104      	movs	r1, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fbdb 	bl	800412c <TIM_CCxChannelCmd>
      break;
 8003976:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01b      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0202 	mvn.w	r2, #2
 80039c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f994 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 80039e2:	e005      	b.n	80039f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f987 	bl	8003cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f996 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01b      	beq.n	8003a42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0204 	mvn.w	r2, #4
 8003a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f96e 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003a2e:	e005      	b.n	8003a3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f961 	bl	8003cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f970 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01b      	beq.n	8003a8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f06f 0208 	mvn.w	r2, #8
 8003a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2204      	movs	r2, #4
 8003a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f948 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003a7a:	e005      	b.n	8003a88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f93b 	bl	8003cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f94a 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01b      	beq.n	8003ada <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0210 	mvn.w	r2, #16
 8003aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2208      	movs	r2, #8
 8003ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f922 	bl	8003d0a <HAL_TIM_IC_CaptureCallback>
 8003ac6:	e005      	b.n	8003ad4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f915 	bl	8003cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f924 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f06f 0201 	mvn.w	r2, #1
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7fd fb7b 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb90 	bl	8004242 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8f4 	bl	8003d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0220 	mvn.w	r2, #32
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fb63 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0ae      	b.n	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	f200 809f 	bhi.w	8003ce0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003ce1 	.word	0x08003ce1
 8003bb0:	08003ce1 	.word	0x08003ce1
 8003bb4:	08003ce1 	.word	0x08003ce1
 8003bb8:	08003c1d 	.word	0x08003c1d
 8003bbc:	08003ce1 	.word	0x08003ce1
 8003bc0:	08003ce1 	.word	0x08003ce1
 8003bc4:	08003ce1 	.word	0x08003ce1
 8003bc8:	08003c5f 	.word	0x08003c5f
 8003bcc:	08003ce1 	.word	0x08003ce1
 8003bd0:	08003ce1 	.word	0x08003ce1
 8003bd4:	08003ce1 	.word	0x08003ce1
 8003bd8:	08003c9f 	.word	0x08003c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f91a 	bl	8003e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6999      	ldr	r1, [r3, #24]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	619a      	str	r2, [r3, #24]
      break;
 8003c1a:	e064      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f960 	bl	8003ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	021a      	lsls	r2, r3, #8
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	619a      	str	r2, [r3, #24]
      break;
 8003c5c:	e043      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f9a9 	bl	8003fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0208 	orr.w	r2, r2, #8
 8003c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0204 	bic.w	r2, r2, #4
 8003c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69d9      	ldr	r1, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	61da      	str	r2, [r3, #28]
      break;
 8003c9c:	e023      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f9f3 	bl	8004090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	61da      	str	r2, [r3, #28]
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2f      	ldr	r2, [pc, #188]	@ (8003e10 <TIM_Base_SetConfig+0xd0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_Base_SetConfig+0x30>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d5e:	d007      	beq.n	8003d70 <TIM_Base_SetConfig+0x30>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <TIM_Base_SetConfig+0xd4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_Base_SetConfig+0x30>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e18 <TIM_Base_SetConfig+0xd8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a22      	ldr	r2, [pc, #136]	@ (8003e10 <TIM_Base_SetConfig+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1f      	ldr	r2, [pc, #124]	@ (8003e14 <TIM_Base_SetConfig+0xd4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0x62>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e18 <TIM_Base_SetConfig+0xd8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <TIM_Base_SetConfig+0xd0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d103      	bne.n	8003de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]
  }
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0201 	bic.w	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 0302 	bic.w	r3, r3, #2
 8003e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee4 <TIM_OC1_SetConfig+0xc8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10c      	bne.n	8003e92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0308 	bic.w	r3, r3, #8
 8003e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a13      	ldr	r2, [pc, #76]	@ (8003ee4 <TIM_OC1_SetConfig+0xc8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d111      	bne.n	8003ebe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	621a      	str	r2, [r3, #32]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f023 0210 	bic.w	r2, r3, #16
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <TIM_OC2_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10d      	bne.n	8003f64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <TIM_OC2_SetConfig+0xd0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d113      	bne.n	8003f94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00

08003fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1d      	ldr	r2, [pc, #116]	@ (800408c <TIM_OC3_SetConfig+0xd0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10d      	bne.n	8004036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a14      	ldr	r2, [pc, #80]	@ (800408c <TIM_OC3_SetConfig+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d113      	bne.n	8004066 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00

08004090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	031b      	lsls	r3, r3, #12
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004128 <TIM_OC4_SetConfig+0x98>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d109      	bne.n	8004104 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e046      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	@ (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <memset>:
 8004254:	4603      	mov	r3, r0
 8004256:	4402      	add	r2, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <__errno>:
 8004264:	4b01      	ldr	r3, [pc, #4]	@ (800426c <__errno+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000000c 	.word	0x2000000c

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	2600      	movs	r6, #0
 8004274:	4d0c      	ldr	r5, [pc, #48]	@ (80042a8 <__libc_init_array+0x38>)
 8004276:	4c0d      	ldr	r4, [pc, #52]	@ (80042ac <__libc_init_array+0x3c>)
 8004278:	1b64      	subs	r4, r4, r5
 800427a:	10a4      	asrs	r4, r4, #2
 800427c:	42a6      	cmp	r6, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	f000 ff26 	bl	80050d0 <_init>
 8004284:	2600      	movs	r6, #0
 8004286:	4d0a      	ldr	r5, [pc, #40]	@ (80042b0 <__libc_init_array+0x40>)
 8004288:	4c0a      	ldr	r4, [pc, #40]	@ (80042b4 <__libc_init_array+0x44>)
 800428a:	1b64      	subs	r4, r4, r5
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	42a6      	cmp	r6, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f855 3b04 	ldr.w	r3, [r5], #4
 8004298:	4798      	blx	r3
 800429a:	3601      	adds	r6, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a2:	4798      	blx	r3
 80042a4:	3601      	adds	r6, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	08006658 	.word	0x08006658
 80042ac:	08006658 	.word	0x08006658
 80042b0:	08006658 	.word	0x08006658
 80042b4:	0800665c 	.word	0x0800665c

080042b8 <pow>:
 80042b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042bc:	4614      	mov	r4, r2
 80042be:	461d      	mov	r5, r3
 80042c0:	4680      	mov	r8, r0
 80042c2:	4689      	mov	r9, r1
 80042c4:	f000 f868 	bl	8004398 <__ieee754_pow>
 80042c8:	4622      	mov	r2, r4
 80042ca:	4606      	mov	r6, r0
 80042cc:	460f      	mov	r7, r1
 80042ce:	462b      	mov	r3, r5
 80042d0:	4620      	mov	r0, r4
 80042d2:	4629      	mov	r1, r5
 80042d4:	f7fc fb9a 	bl	8000a0c <__aeabi_dcmpun>
 80042d8:	bbc8      	cbnz	r0, 800434e <pow+0x96>
 80042da:	2200      	movs	r2, #0
 80042dc:	2300      	movs	r3, #0
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f7fc fb61 	bl	80009a8 <__aeabi_dcmpeq>
 80042e6:	b1b8      	cbz	r0, 8004318 <pow+0x60>
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	4620      	mov	r0, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fc fb5a 	bl	80009a8 <__aeabi_dcmpeq>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d141      	bne.n	800437c <pow+0xc4>
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f000 f844 	bl	8004388 <finite>
 8004300:	b328      	cbz	r0, 800434e <pow+0x96>
 8004302:	2200      	movs	r2, #0
 8004304:	2300      	movs	r3, #0
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fc fb57 	bl	80009bc <__aeabi_dcmplt>
 800430e:	b1f0      	cbz	r0, 800434e <pow+0x96>
 8004310:	f7ff ffa8 	bl	8004264 <__errno>
 8004314:	2322      	movs	r3, #34	@ 0x22
 8004316:	e019      	b.n	800434c <pow+0x94>
 8004318:	4630      	mov	r0, r6
 800431a:	4639      	mov	r1, r7
 800431c:	f000 f834 	bl	8004388 <finite>
 8004320:	b9c8      	cbnz	r0, 8004356 <pow+0x9e>
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f000 f82f 	bl	8004388 <finite>
 800432a:	b1a0      	cbz	r0, 8004356 <pow+0x9e>
 800432c:	4620      	mov	r0, r4
 800432e:	4629      	mov	r1, r5
 8004330:	f000 f82a 	bl	8004388 <finite>
 8004334:	b178      	cbz	r0, 8004356 <pow+0x9e>
 8004336:	4632      	mov	r2, r6
 8004338:	463b      	mov	r3, r7
 800433a:	4630      	mov	r0, r6
 800433c:	4639      	mov	r1, r7
 800433e:	f7fc fb65 	bl	8000a0c <__aeabi_dcmpun>
 8004342:	2800      	cmp	r0, #0
 8004344:	d0e4      	beq.n	8004310 <pow+0x58>
 8004346:	f7ff ff8d 	bl	8004264 <__errno>
 800434a:	2321      	movs	r3, #33	@ 0x21
 800434c:	6003      	str	r3, [r0, #0]
 800434e:	4630      	mov	r0, r6
 8004350:	4639      	mov	r1, r7
 8004352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004356:	2200      	movs	r2, #0
 8004358:	2300      	movs	r3, #0
 800435a:	4630      	mov	r0, r6
 800435c:	4639      	mov	r1, r7
 800435e:	f7fc fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8004362:	2800      	cmp	r0, #0
 8004364:	d0f3      	beq.n	800434e <pow+0x96>
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f000 f80d 	bl	8004388 <finite>
 800436e:	2800      	cmp	r0, #0
 8004370:	d0ed      	beq.n	800434e <pow+0x96>
 8004372:	4620      	mov	r0, r4
 8004374:	4629      	mov	r1, r5
 8004376:	f000 f807 	bl	8004388 <finite>
 800437a:	e7c8      	b.n	800430e <pow+0x56>
 800437c:	2600      	movs	r6, #0
 800437e:	4f01      	ldr	r7, [pc, #4]	@ (8004384 <pow+0xcc>)
 8004380:	e7e5      	b.n	800434e <pow+0x96>
 8004382:	bf00      	nop
 8004384:	3ff00000 	.word	0x3ff00000

08004388 <finite>:
 8004388:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800438c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004390:	0fc0      	lsrs	r0, r0, #31
 8004392:	4770      	bx	lr
 8004394:	0000      	movs	r0, r0
	...

08004398 <__ieee754_pow>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	b091      	sub	sp, #68	@ 0x44
 800439e:	e9cd 2300 	strd	r2, r3, [sp]
 80043a2:	468b      	mov	fp, r1
 80043a4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80043a8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80043ac:	4682      	mov	sl, r0
 80043ae:	ea57 0001 	orrs.w	r0, r7, r1
 80043b2:	d112      	bne.n	80043da <__ieee754_pow+0x42>
 80043b4:	4653      	mov	r3, sl
 80043b6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	4152      	adcs	r2, r2
 80043be:	4298      	cmp	r0, r3
 80043c0:	4b93      	ldr	r3, [pc, #588]	@ (8004610 <__ieee754_pow+0x278>)
 80043c2:	4193      	sbcs	r3, r2
 80043c4:	f080 84cd 	bcs.w	8004d62 <__ieee754_pow+0x9ca>
 80043c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043cc:	4650      	mov	r0, sl
 80043ce:	4659      	mov	r1, fp
 80043d0:	f7fb fecc 	bl	800016c <__adddf3>
 80043d4:	b011      	add	sp, #68	@ 0x44
 80043d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043da:	4b8e      	ldr	r3, [pc, #568]	@ (8004614 <__ieee754_pow+0x27c>)
 80043dc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 80043e0:	429d      	cmp	r5, r3
 80043e2:	465e      	mov	r6, fp
 80043e4:	46d1      	mov	r9, sl
 80043e6:	d80b      	bhi.n	8004400 <__ieee754_pow+0x68>
 80043e8:	d105      	bne.n	80043f6 <__ieee754_pow+0x5e>
 80043ea:	f1ba 0f00 	cmp.w	sl, #0
 80043ee:	d1eb      	bne.n	80043c8 <__ieee754_pow+0x30>
 80043f0:	42af      	cmp	r7, r5
 80043f2:	d8e9      	bhi.n	80043c8 <__ieee754_pow+0x30>
 80043f4:	e001      	b.n	80043fa <__ieee754_pow+0x62>
 80043f6:	429f      	cmp	r7, r3
 80043f8:	d802      	bhi.n	8004400 <__ieee754_pow+0x68>
 80043fa:	429f      	cmp	r7, r3
 80043fc:	d10f      	bne.n	800441e <__ieee754_pow+0x86>
 80043fe:	b171      	cbz	r1, 800441e <__ieee754_pow+0x86>
 8004400:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004404:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004408:	ea56 0609 	orrs.w	r6, r6, r9
 800440c:	d1dc      	bne.n	80043c8 <__ieee754_pow+0x30>
 800440e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004412:	18db      	adds	r3, r3, r3
 8004414:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004418:	4152      	adcs	r2, r2
 800441a:	429e      	cmp	r6, r3
 800441c:	e7d0      	b.n	80043c0 <__ieee754_pow+0x28>
 800441e:	2e00      	cmp	r6, #0
 8004420:	462b      	mov	r3, r5
 8004422:	da42      	bge.n	80044aa <__ieee754_pow+0x112>
 8004424:	4a7c      	ldr	r2, [pc, #496]	@ (8004618 <__ieee754_pow+0x280>)
 8004426:	4297      	cmp	r7, r2
 8004428:	d856      	bhi.n	80044d8 <__ieee754_pow+0x140>
 800442a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800442e:	4297      	cmp	r7, r2
 8004430:	f240 84a6 	bls.w	8004d80 <__ieee754_pow+0x9e8>
 8004434:	153a      	asrs	r2, r7, #20
 8004436:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800443a:	2a14      	cmp	r2, #20
 800443c:	dd18      	ble.n	8004470 <__ieee754_pow+0xd8>
 800443e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004442:	fa21 f402 	lsr.w	r4, r1, r2
 8004446:	fa04 f202 	lsl.w	r2, r4, r2
 800444a:	428a      	cmp	r2, r1
 800444c:	f040 8498 	bne.w	8004d80 <__ieee754_pow+0x9e8>
 8004450:	f004 0401 	and.w	r4, r4, #1
 8004454:	f1c4 0402 	rsb	r4, r4, #2
 8004458:	2900      	cmp	r1, #0
 800445a:	d159      	bne.n	8004510 <__ieee754_pow+0x178>
 800445c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8004460:	d149      	bne.n	80044f6 <__ieee754_pow+0x15e>
 8004462:	4652      	mov	r2, sl
 8004464:	465b      	mov	r3, fp
 8004466:	4650      	mov	r0, sl
 8004468:	4659      	mov	r1, fp
 800446a:	f7fc f835 	bl	80004d8 <__aeabi_dmul>
 800446e:	e7b1      	b.n	80043d4 <__ieee754_pow+0x3c>
 8004470:	2900      	cmp	r1, #0
 8004472:	d14c      	bne.n	800450e <__ieee754_pow+0x176>
 8004474:	f1c2 0214 	rsb	r2, r2, #20
 8004478:	fa47 f402 	asr.w	r4, r7, r2
 800447c:	fa04 f202 	lsl.w	r2, r4, r2
 8004480:	42ba      	cmp	r2, r7
 8004482:	f040 847a 	bne.w	8004d7a <__ieee754_pow+0x9e2>
 8004486:	f004 0401 	and.w	r4, r4, #1
 800448a:	f1c4 0402 	rsb	r4, r4, #2
 800448e:	4a63      	ldr	r2, [pc, #396]	@ (800461c <__ieee754_pow+0x284>)
 8004490:	4297      	cmp	r7, r2
 8004492:	d1e3      	bne.n	800445c <__ieee754_pow+0xc4>
 8004494:	f1b8 0f00 	cmp.w	r8, #0
 8004498:	f280 846b 	bge.w	8004d72 <__ieee754_pow+0x9da>
 800449c:	4652      	mov	r2, sl
 800449e:	465b      	mov	r3, fp
 80044a0:	2000      	movs	r0, #0
 80044a2:	495e      	ldr	r1, [pc, #376]	@ (800461c <__ieee754_pow+0x284>)
 80044a4:	f7fc f942 	bl	800072c <__aeabi_ddiv>
 80044a8:	e794      	b.n	80043d4 <__ieee754_pow+0x3c>
 80044aa:	2400      	movs	r4, #0
 80044ac:	bb81      	cbnz	r1, 8004510 <__ieee754_pow+0x178>
 80044ae:	4a59      	ldr	r2, [pc, #356]	@ (8004614 <__ieee754_pow+0x27c>)
 80044b0:	4297      	cmp	r7, r2
 80044b2:	d1ec      	bne.n	800448e <__ieee754_pow+0xf6>
 80044b4:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 80044b8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80044bc:	ea53 0309 	orrs.w	r3, r3, r9
 80044c0:	f000 844f 	beq.w	8004d62 <__ieee754_pow+0x9ca>
 80044c4:	4b56      	ldr	r3, [pc, #344]	@ (8004620 <__ieee754_pow+0x288>)
 80044c6:	429d      	cmp	r5, r3
 80044c8:	d908      	bls.n	80044dc <__ieee754_pow+0x144>
 80044ca:	f1b8 0f00 	cmp.w	r8, #0
 80044ce:	f280 844c 	bge.w	8004d6a <__ieee754_pow+0x9d2>
 80044d2:	2000      	movs	r0, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	e77d      	b.n	80043d4 <__ieee754_pow+0x3c>
 80044d8:	2402      	movs	r4, #2
 80044da:	e7e7      	b.n	80044ac <__ieee754_pow+0x114>
 80044dc:	f1b8 0f00 	cmp.w	r8, #0
 80044e0:	f04f 0000 	mov.w	r0, #0
 80044e4:	f04f 0100 	mov.w	r1, #0
 80044e8:	f6bf af74 	bge.w	80043d4 <__ieee754_pow+0x3c>
 80044ec:	e9dd 0300 	ldrd	r0, r3, [sp]
 80044f0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80044f4:	e76e      	b.n	80043d4 <__ieee754_pow+0x3c>
 80044f6:	4a4b      	ldr	r2, [pc, #300]	@ (8004624 <__ieee754_pow+0x28c>)
 80044f8:	4590      	cmp	r8, r2
 80044fa:	d109      	bne.n	8004510 <__ieee754_pow+0x178>
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	db07      	blt.n	8004510 <__ieee754_pow+0x178>
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	b011      	add	sp, #68	@ 0x44
 8004506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450a:	f000 bd0f 	b.w	8004f2c <__ieee754_sqrt>
 800450e:	2400      	movs	r4, #0
 8004510:	4650      	mov	r0, sl
 8004512:	4659      	mov	r1, fp
 8004514:	9302      	str	r3, [sp, #8]
 8004516:	f000 fc69 	bl	8004dec <fabs>
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	f1b9 0f00 	cmp.w	r9, #0
 8004520:	d127      	bne.n	8004572 <__ieee754_pow+0x1da>
 8004522:	4a3e      	ldr	r2, [pc, #248]	@ (800461c <__ieee754_pow+0x284>)
 8004524:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8004528:	4594      	cmp	ip, r2
 800452a:	d000      	beq.n	800452e <__ieee754_pow+0x196>
 800452c:	bb0d      	cbnz	r5, 8004572 <__ieee754_pow+0x1da>
 800452e:	f1b8 0f00 	cmp.w	r8, #0
 8004532:	da05      	bge.n	8004540 <__ieee754_pow+0x1a8>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	2000      	movs	r0, #0
 800453a:	4938      	ldr	r1, [pc, #224]	@ (800461c <__ieee754_pow+0x284>)
 800453c:	f7fc f8f6 	bl	800072c <__aeabi_ddiv>
 8004540:	2e00      	cmp	r6, #0
 8004542:	f6bf af47 	bge.w	80043d4 <__ieee754_pow+0x3c>
 8004546:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800454a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800454e:	4325      	orrs	r5, r4
 8004550:	d108      	bne.n	8004564 <__ieee754_pow+0x1cc>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	f7fb fe05 	bl	8000168 <__aeabi_dsub>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	e79f      	b.n	80044a4 <__ieee754_pow+0x10c>
 8004564:	2c01      	cmp	r4, #1
 8004566:	f47f af35 	bne.w	80043d4 <__ieee754_pow+0x3c>
 800456a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800456e:	4619      	mov	r1, r3
 8004570:	e730      	b.n	80043d4 <__ieee754_pow+0x3c>
 8004572:	0ff2      	lsrs	r2, r6, #31
 8004574:	3a01      	subs	r2, #1
 8004576:	ea52 0c04 	orrs.w	ip, r2, r4
 800457a:	d102      	bne.n	8004582 <__ieee754_pow+0x1ea>
 800457c:	4652      	mov	r2, sl
 800457e:	465b      	mov	r3, fp
 8004580:	e7e9      	b.n	8004556 <__ieee754_pow+0x1be>
 8004582:	f04f 0900 	mov.w	r9, #0
 8004586:	3c01      	subs	r4, #1
 8004588:	4314      	orrs	r4, r2
 800458a:	bf14      	ite	ne
 800458c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800461c <__ieee754_pow+0x284>
 8004590:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8004628 <__ieee754_pow+0x290>
 8004594:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8004598:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800459c:	f240 8104 	bls.w	80047a8 <__ieee754_pow+0x410>
 80045a0:	4b22      	ldr	r3, [pc, #136]	@ (800462c <__ieee754_pow+0x294>)
 80045a2:	429f      	cmp	r7, r3
 80045a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004620 <__ieee754_pow+0x288>)
 80045a6:	d913      	bls.n	80045d0 <__ieee754_pow+0x238>
 80045a8:	429d      	cmp	r5, r3
 80045aa:	d808      	bhi.n	80045be <__ieee754_pow+0x226>
 80045ac:	f1b8 0f00 	cmp.w	r8, #0
 80045b0:	da08      	bge.n	80045c4 <__ieee754_pow+0x22c>
 80045b2:	2000      	movs	r0, #0
 80045b4:	b011      	add	sp, #68	@ 0x44
 80045b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f000 bcb1 	b.w	8004f20 <__math_oflow>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	dcf6      	bgt.n	80045b2 <__ieee754_pow+0x21a>
 80045c4:	2000      	movs	r0, #0
 80045c6:	b011      	add	sp, #68	@ 0x44
 80045c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	f000 bca3 	b.w	8004f16 <__math_uflow>
 80045d0:	429d      	cmp	r5, r3
 80045d2:	d20c      	bcs.n	80045ee <__ieee754_pow+0x256>
 80045d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	2300      	movs	r3, #0
 80045dc:	f7fc f9ee 	bl	80009bc <__aeabi_dcmplt>
 80045e0:	3800      	subs	r0, #0
 80045e2:	bf18      	it	ne
 80045e4:	2001      	movne	r0, #1
 80045e6:	f1b8 0f00 	cmp.w	r8, #0
 80045ea:	daec      	bge.n	80045c6 <__ieee754_pow+0x22e>
 80045ec:	e7e2      	b.n	80045b4 <__ieee754_pow+0x21c>
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <__ieee754_pow+0x284>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	429d      	cmp	r5, r3
 80045f4:	d91c      	bls.n	8004630 <__ieee754_pow+0x298>
 80045f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045fa:	2300      	movs	r3, #0
 80045fc:	f7fc f9de 	bl	80009bc <__aeabi_dcmplt>
 8004600:	3800      	subs	r0, #0
 8004602:	bf18      	it	ne
 8004604:	2001      	movne	r0, #1
 8004606:	f1b8 0f00 	cmp.w	r8, #0
 800460a:	dcd3      	bgt.n	80045b4 <__ieee754_pow+0x21c>
 800460c:	e7db      	b.n	80045c6 <__ieee754_pow+0x22e>
 800460e:	bf00      	nop
 8004610:	fff00000 	.word	0xfff00000
 8004614:	7ff00000 	.word	0x7ff00000
 8004618:	433fffff 	.word	0x433fffff
 800461c:	3ff00000 	.word	0x3ff00000
 8004620:	3fefffff 	.word	0x3fefffff
 8004624:	3fe00000 	.word	0x3fe00000
 8004628:	bff00000 	.word	0xbff00000
 800462c:	43f00000 	.word	0x43f00000
 8004630:	4b59      	ldr	r3, [pc, #356]	@ (8004798 <__ieee754_pow+0x400>)
 8004632:	f7fb fd99 	bl	8000168 <__aeabi_dsub>
 8004636:	a350      	add	r3, pc, #320	@ (adr r3, 8004778 <__ieee754_pow+0x3e0>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	4604      	mov	r4, r0
 800463e:	460d      	mov	r5, r1
 8004640:	f7fb ff4a 	bl	80004d8 <__aeabi_dmul>
 8004644:	a34e      	add	r3, pc, #312	@ (adr r3, 8004780 <__ieee754_pow+0x3e8>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	4606      	mov	r6, r0
 800464c:	460f      	mov	r7, r1
 800464e:	4620      	mov	r0, r4
 8004650:	4629      	mov	r1, r5
 8004652:	f7fb ff41 	bl	80004d8 <__aeabi_dmul>
 8004656:	2200      	movs	r2, #0
 8004658:	4682      	mov	sl, r0
 800465a:	468b      	mov	fp, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	4b4e      	ldr	r3, [pc, #312]	@ (800479c <__ieee754_pow+0x404>)
 8004662:	f7fb ff39 	bl	80004d8 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	a147      	add	r1, pc, #284	@ (adr r1, 8004788 <__ieee754_pow+0x3f0>)
 800466c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004670:	f7fb fd7a 	bl	8000168 <__aeabi_dsub>
 8004674:	4622      	mov	r2, r4
 8004676:	462b      	mov	r3, r5
 8004678:	f7fb ff2e 	bl	80004d8 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	2000      	movs	r0, #0
 8004682:	4947      	ldr	r1, [pc, #284]	@ (80047a0 <__ieee754_pow+0x408>)
 8004684:	f7fb fd70 	bl	8000168 <__aeabi_dsub>
 8004688:	4622      	mov	r2, r4
 800468a:	4680      	mov	r8, r0
 800468c:	4689      	mov	r9, r1
 800468e:	462b      	mov	r3, r5
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fb ff20 	bl	80004d8 <__aeabi_dmul>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4640      	mov	r0, r8
 800469e:	4649      	mov	r1, r9
 80046a0:	f7fb ff1a 	bl	80004d8 <__aeabi_dmul>
 80046a4:	a33a      	add	r3, pc, #232	@ (adr r3, 8004790 <__ieee754_pow+0x3f8>)
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	f7fb ff15 	bl	80004d8 <__aeabi_dmul>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4650      	mov	r0, sl
 80046b4:	4659      	mov	r1, fp
 80046b6:	f7fb fd57 	bl	8000168 <__aeabi_dsub>
 80046ba:	2400      	movs	r4, #0
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4680      	mov	r8, r0
 80046c2:	4689      	mov	r9, r1
 80046c4:	4630      	mov	r0, r6
 80046c6:	4639      	mov	r1, r7
 80046c8:	f7fb fd50 	bl	800016c <__adddf3>
 80046cc:	4632      	mov	r2, r6
 80046ce:	463b      	mov	r3, r7
 80046d0:	4620      	mov	r0, r4
 80046d2:	460d      	mov	r5, r1
 80046d4:	f7fb fd48 	bl	8000168 <__aeabi_dsub>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4640      	mov	r0, r8
 80046de:	4649      	mov	r1, r9
 80046e0:	f7fb fd42 	bl	8000168 <__aeabi_dsub>
 80046e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046ec:	2300      	movs	r3, #0
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80046f4:	4606      	mov	r6, r0
 80046f6:	460f      	mov	r7, r1
 80046f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046fc:	465b      	mov	r3, fp
 80046fe:	4652      	mov	r2, sl
 8004700:	f7fb fd32 	bl	8000168 <__aeabi_dsub>
 8004704:	4622      	mov	r2, r4
 8004706:	462b      	mov	r3, r5
 8004708:	f7fb fee6 	bl	80004d8 <__aeabi_dmul>
 800470c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004710:	4680      	mov	r8, r0
 8004712:	4689      	mov	r9, r1
 8004714:	4630      	mov	r0, r6
 8004716:	4639      	mov	r1, r7
 8004718:	f7fb fede 	bl	80004d8 <__aeabi_dmul>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4640      	mov	r0, r8
 8004722:	4649      	mov	r1, r9
 8004724:	f7fb fd22 	bl	800016c <__adddf3>
 8004728:	465b      	mov	r3, fp
 800472a:	4606      	mov	r6, r0
 800472c:	460f      	mov	r7, r1
 800472e:	4652      	mov	r2, sl
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb fed0 	bl	80004d8 <__aeabi_dmul>
 8004738:	460b      	mov	r3, r1
 800473a:	4602      	mov	r2, r0
 800473c:	4680      	mov	r8, r0
 800473e:	4689      	mov	r9, r1
 8004740:	4630      	mov	r0, r6
 8004742:	4639      	mov	r1, r7
 8004744:	f7fb fd12 	bl	800016c <__adddf3>
 8004748:	4b16      	ldr	r3, [pc, #88]	@ (80047a4 <__ieee754_pow+0x40c>)
 800474a:	4604      	mov	r4, r0
 800474c:	4299      	cmp	r1, r3
 800474e:	460d      	mov	r5, r1
 8004750:	468b      	mov	fp, r1
 8004752:	f340 81fd 	ble.w	8004b50 <__ieee754_pow+0x7b8>
 8004756:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800475a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800475e:	4303      	orrs	r3, r0
 8004760:	f000 81dc 	beq.w	8004b1c <__ieee754_pow+0x784>
 8004764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	f7fc f926 	bl	80009bc <__aeabi_dcmplt>
 8004770:	3800      	subs	r0, #0
 8004772:	bf18      	it	ne
 8004774:	2001      	movne	r0, #1
 8004776:	e71d      	b.n	80045b4 <__ieee754_pow+0x21c>
 8004778:	60000000 	.word	0x60000000
 800477c:	3ff71547 	.word	0x3ff71547
 8004780:	f85ddf44 	.word	0xf85ddf44
 8004784:	3e54ae0b 	.word	0x3e54ae0b
 8004788:	55555555 	.word	0x55555555
 800478c:	3fd55555 	.word	0x3fd55555
 8004790:	652b82fe 	.word	0x652b82fe
 8004794:	3ff71547 	.word	0x3ff71547
 8004798:	3ff00000 	.word	0x3ff00000
 800479c:	3fd00000 	.word	0x3fd00000
 80047a0:	3fe00000 	.word	0x3fe00000
 80047a4:	408fffff 	.word	0x408fffff
 80047a8:	4ad3      	ldr	r2, [pc, #844]	@ (8004af8 <__ieee754_pow+0x760>)
 80047aa:	4032      	ands	r2, r6
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	f040 817a 	bne.w	8004aa6 <__ieee754_pow+0x70e>
 80047b2:	4bd2      	ldr	r3, [pc, #840]	@ (8004afc <__ieee754_pow+0x764>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	f7fb fe8f 	bl	80004d8 <__aeabi_dmul>
 80047ba:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80047be:	460b      	mov	r3, r1
 80047c0:	151a      	asrs	r2, r3, #20
 80047c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80047c6:	4422      	add	r2, r4
 80047c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80047ca:	4acd      	ldr	r2, [pc, #820]	@ (8004b00 <__ieee754_pow+0x768>)
 80047cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80047d4:	4293      	cmp	r3, r2
 80047d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80047da:	dd08      	ble.n	80047ee <__ieee754_pow+0x456>
 80047dc:	4ac9      	ldr	r2, [pc, #804]	@ (8004b04 <__ieee754_pow+0x76c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	f340 8163 	ble.w	8004aaa <__ieee754_pow+0x712>
 80047e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047e6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80047ea:	3301      	adds	r3, #1
 80047ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80047ee:	2600      	movs	r6, #0
 80047f0:	00f3      	lsls	r3, r6, #3
 80047f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047f4:	4bc4      	ldr	r3, [pc, #784]	@ (8004b08 <__ieee754_pow+0x770>)
 80047f6:	4629      	mov	r1, r5
 80047f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80047fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004800:	461a      	mov	r2, r3
 8004802:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004806:	4623      	mov	r3, r4
 8004808:	4682      	mov	sl, r0
 800480a:	f7fb fcad 	bl	8000168 <__aeabi_dsub>
 800480e:	4652      	mov	r2, sl
 8004810:	462b      	mov	r3, r5
 8004812:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800481a:	f7fb fca7 	bl	800016c <__adddf3>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	2000      	movs	r0, #0
 8004824:	49b9      	ldr	r1, [pc, #740]	@ (8004b0c <__ieee754_pow+0x774>)
 8004826:	f7fb ff81 	bl	800072c <__aeabi_ddiv>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004836:	f7fb fe4f 	bl	80004d8 <__aeabi_dmul>
 800483a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800483e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004842:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004846:	2300      	movs	r3, #0
 8004848:	2200      	movs	r2, #0
 800484a:	46ab      	mov	fp, r5
 800484c:	106d      	asrs	r5, r5, #1
 800484e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004858:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800485c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004860:	4640      	mov	r0, r8
 8004862:	4649      	mov	r1, r9
 8004864:	4614      	mov	r4, r2
 8004866:	461d      	mov	r5, r3
 8004868:	f7fb fe36 	bl	80004d8 <__aeabi_dmul>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004874:	f7fb fc78 	bl	8000168 <__aeabi_dsub>
 8004878:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800487c:	4606      	mov	r6, r0
 800487e:	460f      	mov	r7, r1
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb fc70 	bl	8000168 <__aeabi_dsub>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4650      	mov	r0, sl
 800488e:	4659      	mov	r1, fp
 8004890:	f7fb fc6a 	bl	8000168 <__aeabi_dsub>
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	f7fb fe1e 	bl	80004d8 <__aeabi_dmul>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fb fc60 	bl	8000168 <__aeabi_dsub>
 80048a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80048ac:	f7fb fe14 	bl	80004d8 <__aeabi_dmul>
 80048b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7fb fe0c 	bl	80004d8 <__aeabi_dmul>
 80048c0:	a37b      	add	r3, pc, #492	@ (adr r3, 8004ab0 <__ieee754_pow+0x718>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	4604      	mov	r4, r0
 80048c8:	460d      	mov	r5, r1
 80048ca:	f7fb fe05 	bl	80004d8 <__aeabi_dmul>
 80048ce:	a37a      	add	r3, pc, #488	@ (adr r3, 8004ab8 <__ieee754_pow+0x720>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fc4a 	bl	800016c <__adddf3>
 80048d8:	4622      	mov	r2, r4
 80048da:	462b      	mov	r3, r5
 80048dc:	f7fb fdfc 	bl	80004d8 <__aeabi_dmul>
 80048e0:	a377      	add	r3, pc, #476	@ (adr r3, 8004ac0 <__ieee754_pow+0x728>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f7fb fc41 	bl	800016c <__adddf3>
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f7fb fdf3 	bl	80004d8 <__aeabi_dmul>
 80048f2:	a375      	add	r3, pc, #468	@ (adr r3, 8004ac8 <__ieee754_pow+0x730>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb fc38 	bl	800016c <__adddf3>
 80048fc:	4622      	mov	r2, r4
 80048fe:	462b      	mov	r3, r5
 8004900:	f7fb fdea 	bl	80004d8 <__aeabi_dmul>
 8004904:	a372      	add	r3, pc, #456	@ (adr r3, 8004ad0 <__ieee754_pow+0x738>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f7fb fc2f 	bl	800016c <__adddf3>
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	f7fb fde1 	bl	80004d8 <__aeabi_dmul>
 8004916:	a370      	add	r3, pc, #448	@ (adr r3, 8004ad8 <__ieee754_pow+0x740>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f7fb fc26 	bl	800016c <__adddf3>
 8004920:	4622      	mov	r2, r4
 8004922:	4606      	mov	r6, r0
 8004924:	460f      	mov	r7, r1
 8004926:	462b      	mov	r3, r5
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fdd4 	bl	80004d8 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4630      	mov	r0, r6
 8004936:	4639      	mov	r1, r7
 8004938:	f7fb fdce 	bl	80004d8 <__aeabi_dmul>
 800493c:	4604      	mov	r4, r0
 800493e:	460d      	mov	r5, r1
 8004940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	f7fb fc10 	bl	800016c <__adddf3>
 800494c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004950:	f7fb fdc2 	bl	80004d8 <__aeabi_dmul>
 8004954:	4622      	mov	r2, r4
 8004956:	462b      	mov	r3, r5
 8004958:	f7fb fc08 	bl	800016c <__adddf3>
 800495c:	4642      	mov	r2, r8
 800495e:	4682      	mov	sl, r0
 8004960:	468b      	mov	fp, r1
 8004962:	464b      	mov	r3, r9
 8004964:	4640      	mov	r0, r8
 8004966:	4649      	mov	r1, r9
 8004968:	f7fb fdb6 	bl	80004d8 <__aeabi_dmul>
 800496c:	2200      	movs	r2, #0
 800496e:	4b68      	ldr	r3, [pc, #416]	@ (8004b10 <__ieee754_pow+0x778>)
 8004970:	4606      	mov	r6, r0
 8004972:	460f      	mov	r7, r1
 8004974:	f7fb fbfa 	bl	800016c <__adddf3>
 8004978:	4652      	mov	r2, sl
 800497a:	465b      	mov	r3, fp
 800497c:	f7fb fbf6 	bl	800016c <__adddf3>
 8004980:	2400      	movs	r4, #0
 8004982:	460d      	mov	r5, r1
 8004984:	4622      	mov	r2, r4
 8004986:	460b      	mov	r3, r1
 8004988:	4640      	mov	r0, r8
 800498a:	4649      	mov	r1, r9
 800498c:	f7fb fda4 	bl	80004d8 <__aeabi_dmul>
 8004990:	2200      	movs	r2, #0
 8004992:	4680      	mov	r8, r0
 8004994:	4689      	mov	r9, r1
 8004996:	4620      	mov	r0, r4
 8004998:	4629      	mov	r1, r5
 800499a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b10 <__ieee754_pow+0x778>)
 800499c:	f7fb fbe4 	bl	8000168 <__aeabi_dsub>
 80049a0:	4632      	mov	r2, r6
 80049a2:	463b      	mov	r3, r7
 80049a4:	f7fb fbe0 	bl	8000168 <__aeabi_dsub>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4650      	mov	r0, sl
 80049ae:	4659      	mov	r1, fp
 80049b0:	f7fb fbda 	bl	8000168 <__aeabi_dsub>
 80049b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049b8:	f7fb fd8e 	bl	80004d8 <__aeabi_dmul>
 80049bc:	4622      	mov	r2, r4
 80049be:	4606      	mov	r6, r0
 80049c0:	460f      	mov	r7, r1
 80049c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049c6:	462b      	mov	r3, r5
 80049c8:	f7fb fd86 	bl	80004d8 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4630      	mov	r0, r6
 80049d2:	4639      	mov	r1, r7
 80049d4:	f7fb fbca 	bl	800016c <__adddf3>
 80049d8:	2400      	movs	r4, #0
 80049da:	4606      	mov	r6, r0
 80049dc:	460f      	mov	r7, r1
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4640      	mov	r0, r8
 80049e4:	4649      	mov	r1, r9
 80049e6:	f7fb fbc1 	bl	800016c <__adddf3>
 80049ea:	a33d      	add	r3, pc, #244	@ (adr r3, 8004ae0 <__ieee754_pow+0x748>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	4620      	mov	r0, r4
 80049f2:	460d      	mov	r5, r1
 80049f4:	f7fb fd70 	bl	80004d8 <__aeabi_dmul>
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a00:	4620      	mov	r0, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	f7fb fbb0 	bl	8000168 <__aeabi_dsub>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	4639      	mov	r1, r7
 8004a10:	f7fb fbaa 	bl	8000168 <__aeabi_dsub>
 8004a14:	a334      	add	r3, pc, #208	@ (adr r3, 8004ae8 <__ieee754_pow+0x750>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fd5d 	bl	80004d8 <__aeabi_dmul>
 8004a1e:	a334      	add	r3, pc, #208	@ (adr r3, 8004af0 <__ieee754_pow+0x758>)
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	4606      	mov	r6, r0
 8004a26:	460f      	mov	r7, r1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fd54 	bl	80004d8 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4630      	mov	r0, r6
 8004a36:	4639      	mov	r1, r7
 8004a38:	f7fb fb98 	bl	800016c <__adddf3>
 8004a3c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a3e:	4b35      	ldr	r3, [pc, #212]	@ (8004b14 <__ieee754_pow+0x77c>)
 8004a40:	2400      	movs	r4, #0
 8004a42:	4413      	add	r3, r2
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fb90 	bl	800016c <__adddf3>
 8004a4c:	4682      	mov	sl, r0
 8004a4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004a50:	468b      	mov	fp, r1
 8004a52:	f7fb fcd7 	bl	8000404 <__aeabi_i2d>
 8004a56:	4606      	mov	r6, r0
 8004a58:	460f      	mov	r7, r1
 8004a5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b18 <__ieee754_pow+0x780>)
 8004a5e:	4413      	add	r3, r2
 8004a60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a64:	4652      	mov	r2, sl
 8004a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a6a:	465b      	mov	r3, fp
 8004a6c:	f7fb fb7e 	bl	800016c <__adddf3>
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	f7fb fb7a 	bl	800016c <__adddf3>
 8004a78:	4632      	mov	r2, r6
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	f7fb fb76 	bl	800016c <__adddf3>
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	4620      	mov	r0, r4
 8004a86:	460d      	mov	r5, r1
 8004a88:	f7fb fb6e 	bl	8000168 <__aeabi_dsub>
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	f7fb fb6a 	bl	8000168 <__aeabi_dsub>
 8004a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a98:	f7fb fb66 	bl	8000168 <__aeabi_dsub>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4650      	mov	r0, sl
 8004aa2:	4659      	mov	r1, fp
 8004aa4:	e61c      	b.n	80046e0 <__ieee754_pow+0x348>
 8004aa6:	2400      	movs	r4, #0
 8004aa8:	e68a      	b.n	80047c0 <__ieee754_pow+0x428>
 8004aaa:	2601      	movs	r6, #1
 8004aac:	e6a0      	b.n	80047f0 <__ieee754_pow+0x458>
 8004aae:	bf00      	nop
 8004ab0:	4a454eef 	.word	0x4a454eef
 8004ab4:	3fca7e28 	.word	0x3fca7e28
 8004ab8:	93c9db65 	.word	0x93c9db65
 8004abc:	3fcd864a 	.word	0x3fcd864a
 8004ac0:	a91d4101 	.word	0xa91d4101
 8004ac4:	3fd17460 	.word	0x3fd17460
 8004ac8:	518f264d 	.word	0x518f264d
 8004acc:	3fd55555 	.word	0x3fd55555
 8004ad0:	db6fabff 	.word	0xdb6fabff
 8004ad4:	3fdb6db6 	.word	0x3fdb6db6
 8004ad8:	33333303 	.word	0x33333303
 8004adc:	3fe33333 	.word	0x3fe33333
 8004ae0:	e0000000 	.word	0xe0000000
 8004ae4:	3feec709 	.word	0x3feec709
 8004ae8:	dc3a03fd 	.word	0xdc3a03fd
 8004aec:	3feec709 	.word	0x3feec709
 8004af0:	145b01f5 	.word	0x145b01f5
 8004af4:	be3e2fe0 	.word	0xbe3e2fe0
 8004af8:	7ff00000 	.word	0x7ff00000
 8004afc:	43400000 	.word	0x43400000
 8004b00:	0003988e 	.word	0x0003988e
 8004b04:	000bb679 	.word	0x000bb679
 8004b08:	08006630 	.word	0x08006630
 8004b0c:	3ff00000 	.word	0x3ff00000
 8004b10:	40080000 	.word	0x40080000
 8004b14:	08006610 	.word	0x08006610
 8004b18:	08006620 	.word	0x08006620
 8004b1c:	a39a      	add	r3, pc, #616	@ (adr r3, 8004d88 <__ieee754_pow+0x9f0>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	4630      	mov	r0, r6
 8004b24:	4639      	mov	r1, r7
 8004b26:	f7fb fb21 	bl	800016c <__adddf3>
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	e9cd 0100 	strd	r0, r1, [sp]
 8004b30:	464b      	mov	r3, r9
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb fb17 	bl	8000168 <__aeabi_dsub>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b42:	f7fb ff59 	bl	80009f8 <__aeabi_dcmpgt>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f47f ae0c 	bne.w	8004764 <__ieee754_pow+0x3cc>
 8004b4c:	4ba0      	ldr	r3, [pc, #640]	@ (8004dd0 <__ieee754_pow+0xa38>)
 8004b4e:	e022      	b.n	8004b96 <__ieee754_pow+0x7fe>
 8004b50:	4ca0      	ldr	r4, [pc, #640]	@ (8004dd4 <__ieee754_pow+0xa3c>)
 8004b52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	d919      	bls.n	8004b8e <__ieee754_pow+0x7f6>
 8004b5a:	4b9f      	ldr	r3, [pc, #636]	@ (8004dd8 <__ieee754_pow+0xa40>)
 8004b5c:	440b      	add	r3, r1
 8004b5e:	4303      	orrs	r3, r0
 8004b60:	d009      	beq.n	8004b76 <__ieee754_pow+0x7de>
 8004b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f7fb ff27 	bl	80009bc <__aeabi_dcmplt>
 8004b6e:	3800      	subs	r0, #0
 8004b70:	bf18      	it	ne
 8004b72:	2001      	movne	r0, #1
 8004b74:	e527      	b.n	80045c6 <__ieee754_pow+0x22e>
 8004b76:	4642      	mov	r2, r8
 8004b78:	464b      	mov	r3, r9
 8004b7a:	f7fb faf5 	bl	8000168 <__aeabi_dsub>
 8004b7e:	4632      	mov	r2, r6
 8004b80:	463b      	mov	r3, r7
 8004b82:	f7fb ff2f 	bl	80009e4 <__aeabi_dcmpge>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d1eb      	bne.n	8004b62 <__ieee754_pow+0x7ca>
 8004b8a:	4b94      	ldr	r3, [pc, #592]	@ (8004ddc <__ieee754_pow+0xa44>)
 8004b8c:	e003      	b.n	8004b96 <__ieee754_pow+0x7fe>
 8004b8e:	4a94      	ldr	r2, [pc, #592]	@ (8004de0 <__ieee754_pow+0xa48>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	f240 80e1 	bls.w	8004d58 <__ieee754_pow+0x9c0>
 8004b96:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8004b9a:	151b      	asrs	r3, r3, #20
 8004b9c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8004ba0:	fa4a fa03 	asr.w	sl, sl, r3
 8004ba4:	44da      	add	sl, fp
 8004ba6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004baa:	488e      	ldr	r0, [pc, #568]	@ (8004de4 <__ieee754_pow+0xa4c>)
 8004bac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004bb0:	4108      	asrs	r0, r1
 8004bb2:	ea00 030a 	and.w	r3, r0, sl
 8004bb6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004bba:	f1c1 0114 	rsb	r1, r1, #20
 8004bbe:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	fa4a fa01 	asr.w	sl, sl, r1
 8004bc8:	f1bb 0f00 	cmp.w	fp, #0
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	bfb8      	it	lt
 8004bd4:	f1ca 0a00 	rsblt	sl, sl, #0
 8004bd8:	f7fb fac6 	bl	8000168 <__aeabi_dsub>
 8004bdc:	4680      	mov	r8, r0
 8004bde:	4689      	mov	r9, r1
 8004be0:	2400      	movs	r4, #0
 8004be2:	4632      	mov	r2, r6
 8004be4:	463b      	mov	r3, r7
 8004be6:	4640      	mov	r0, r8
 8004be8:	4649      	mov	r1, r9
 8004bea:	f7fb fabf 	bl	800016c <__adddf3>
 8004bee:	a368      	add	r3, pc, #416	@ (adr r3, 8004d90 <__ieee754_pow+0x9f8>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	460d      	mov	r5, r1
 8004bf8:	f7fb fc6e 	bl	80004d8 <__aeabi_dmul>
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	e9cd 0100 	strd	r0, r1, [sp]
 8004c04:	4620      	mov	r0, r4
 8004c06:	4629      	mov	r1, r5
 8004c08:	f7fb faae 	bl	8000168 <__aeabi_dsub>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4630      	mov	r0, r6
 8004c12:	4639      	mov	r1, r7
 8004c14:	f7fb faa8 	bl	8000168 <__aeabi_dsub>
 8004c18:	a35f      	add	r3, pc, #380	@ (adr r3, 8004d98 <__ieee754_pow+0xa00>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fc5b 	bl	80004d8 <__aeabi_dmul>
 8004c22:	a35f      	add	r3, pc, #380	@ (adr r3, 8004da0 <__ieee754_pow+0xa08>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	4680      	mov	r8, r0
 8004c2a:	4689      	mov	r9, r1
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb fc52 	bl	80004d8 <__aeabi_dmul>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb fa96 	bl	800016c <__adddf3>
 8004c40:	4604      	mov	r4, r0
 8004c42:	460d      	mov	r5, r1
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c4c:	f7fb fa8e 	bl	800016c <__adddf3>
 8004c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c54:	4680      	mov	r8, r0
 8004c56:	4689      	mov	r9, r1
 8004c58:	f7fb fa86 	bl	8000168 <__aeabi_dsub>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4620      	mov	r0, r4
 8004c62:	4629      	mov	r1, r5
 8004c64:	f7fb fa80 	bl	8000168 <__aeabi_dsub>
 8004c68:	4642      	mov	r2, r8
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	460f      	mov	r7, r1
 8004c6e:	464b      	mov	r3, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	4649      	mov	r1, r9
 8004c74:	f7fb fc30 	bl	80004d8 <__aeabi_dmul>
 8004c78:	a34b      	add	r3, pc, #300	@ (adr r3, 8004da8 <__ieee754_pow+0xa10>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	4604      	mov	r4, r0
 8004c80:	460d      	mov	r5, r1
 8004c82:	f7fb fc29 	bl	80004d8 <__aeabi_dmul>
 8004c86:	a34a      	add	r3, pc, #296	@ (adr r3, 8004db0 <__ieee754_pow+0xa18>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f7fb fa6c 	bl	8000168 <__aeabi_dsub>
 8004c90:	4622      	mov	r2, r4
 8004c92:	462b      	mov	r3, r5
 8004c94:	f7fb fc20 	bl	80004d8 <__aeabi_dmul>
 8004c98:	a347      	add	r3, pc, #284	@ (adr r3, 8004db8 <__ieee754_pow+0xa20>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f7fb fa65 	bl	800016c <__adddf3>
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	f7fb fc17 	bl	80004d8 <__aeabi_dmul>
 8004caa:	a345      	add	r3, pc, #276	@ (adr r3, 8004dc0 <__ieee754_pow+0xa28>)
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	f7fb fa5a 	bl	8000168 <__aeabi_dsub>
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	f7fb fc0e 	bl	80004d8 <__aeabi_dmul>
 8004cbc:	a342      	add	r3, pc, #264	@ (adr r3, 8004dc8 <__ieee754_pow+0xa30>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fa53 	bl	800016c <__adddf3>
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	f7fb fc05 	bl	80004d8 <__aeabi_dmul>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	f7fb fa47 	bl	8000168 <__aeabi_dsub>
 8004cda:	4604      	mov	r4, r0
 8004cdc:	460d      	mov	r5, r1
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	f7fb fbf7 	bl	80004d8 <__aeabi_dmul>
 8004cea:	2200      	movs	r2, #0
 8004cec:	e9cd 0100 	strd	r0, r1, [sp]
 8004cf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fa36 	bl	8000168 <__aeabi_dsub>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d04:	f7fb fd12 	bl	800072c <__aeabi_ddiv>
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	463b      	mov	r3, r7
 8004d10:	4640      	mov	r0, r8
 8004d12:	4649      	mov	r1, r9
 8004d14:	f7fb fbe0 	bl	80004d8 <__aeabi_dmul>
 8004d18:	4632      	mov	r2, r6
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	f7fb fa26 	bl	800016c <__adddf3>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb fa1e 	bl	8000168 <__aeabi_dsub>
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	f7fb fa1a 	bl	8000168 <__aeabi_dsub>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	2000      	movs	r0, #0
 8004d3a:	492b      	ldr	r1, [pc, #172]	@ (8004de8 <__ieee754_pow+0xa50>)
 8004d3c:	f7fb fa14 	bl	8000168 <__aeabi_dsub>
 8004d40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004d44:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8004d48:	da09      	bge.n	8004d5e <__ieee754_pow+0x9c6>
 8004d4a:	4652      	mov	r2, sl
 8004d4c:	f000 f854 	bl	8004df8 <scalbn>
 8004d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d54:	f7ff bb89 	b.w	800446a <__ieee754_pow+0xd2>
 8004d58:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004d5c:	e740      	b.n	8004be0 <__ieee754_pow+0x848>
 8004d5e:	4621      	mov	r1, r4
 8004d60:	e7f6      	b.n	8004d50 <__ieee754_pow+0x9b8>
 8004d62:	2000      	movs	r0, #0
 8004d64:	4920      	ldr	r1, [pc, #128]	@ (8004de8 <__ieee754_pow+0xa50>)
 8004d66:	f7ff bb35 	b.w	80043d4 <__ieee754_pow+0x3c>
 8004d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d6e:	f7ff bb31 	b.w	80043d4 <__ieee754_pow+0x3c>
 8004d72:	4650      	mov	r0, sl
 8004d74:	4659      	mov	r1, fp
 8004d76:	f7ff bb2d 	b.w	80043d4 <__ieee754_pow+0x3c>
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	f7ff bb87 	b.w	800448e <__ieee754_pow+0xf6>
 8004d80:	2400      	movs	r4, #0
 8004d82:	f7ff bb69 	b.w	8004458 <__ieee754_pow+0xc0>
 8004d86:	bf00      	nop
 8004d88:	652b82fe 	.word	0x652b82fe
 8004d8c:	3c971547 	.word	0x3c971547
 8004d90:	00000000 	.word	0x00000000
 8004d94:	3fe62e43 	.word	0x3fe62e43
 8004d98:	fefa39ef 	.word	0xfefa39ef
 8004d9c:	3fe62e42 	.word	0x3fe62e42
 8004da0:	0ca86c39 	.word	0x0ca86c39
 8004da4:	be205c61 	.word	0xbe205c61
 8004da8:	72bea4d0 	.word	0x72bea4d0
 8004dac:	3e663769 	.word	0x3e663769
 8004db0:	c5d26bf1 	.word	0xc5d26bf1
 8004db4:	3ebbbd41 	.word	0x3ebbbd41
 8004db8:	af25de2c 	.word	0xaf25de2c
 8004dbc:	3f11566a 	.word	0x3f11566a
 8004dc0:	16bebd93 	.word	0x16bebd93
 8004dc4:	3f66c16c 	.word	0x3f66c16c
 8004dc8:	5555553e 	.word	0x5555553e
 8004dcc:	3fc55555 	.word	0x3fc55555
 8004dd0:	40900000 	.word	0x40900000
 8004dd4:	4090cbff 	.word	0x4090cbff
 8004dd8:	3f6f3400 	.word	0x3f6f3400
 8004ddc:	4090cc00 	.word	0x4090cc00
 8004de0:	3fe00000 	.word	0x3fe00000
 8004de4:	fff00000 	.word	0xfff00000
 8004de8:	3ff00000 	.word	0x3ff00000

08004dec <fabs>:
 8004dec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004df0:	4619      	mov	r1, r3
 8004df2:	4770      	bx	lr
 8004df4:	0000      	movs	r0, r0
	...

08004df8 <scalbn>:
 8004df8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004e02:	4683      	mov	fp, r0
 8004e04:	468c      	mov	ip, r1
 8004e06:	460b      	mov	r3, r1
 8004e08:	b982      	cbnz	r2, 8004e2c <scalbn+0x34>
 8004e0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e0e:	4303      	orrs	r3, r0
 8004e10:	d035      	beq.n	8004e7e <scalbn+0x86>
 8004e12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec8 <scalbn+0xd0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	f7fb fb5f 	bl	80004d8 <__aeabi_dmul>
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ecc <scalbn+0xd4>)
 8004e1c:	4683      	mov	fp, r0
 8004e1e:	429e      	cmp	r6, r3
 8004e20:	468c      	mov	ip, r1
 8004e22:	da0d      	bge.n	8004e40 <scalbn+0x48>
 8004e24:	a324      	add	r3, pc, #144	@ (adr r3, 8004eb8 <scalbn+0xc0>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	e019      	b.n	8004e60 <scalbn+0x68>
 8004e2c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004e30:	42ba      	cmp	r2, r7
 8004e32:	d109      	bne.n	8004e48 <scalbn+0x50>
 8004e34:	4602      	mov	r2, r0
 8004e36:	f7fb f999 	bl	800016c <__adddf3>
 8004e3a:	4683      	mov	fp, r0
 8004e3c:	468c      	mov	ip, r1
 8004e3e:	e01e      	b.n	8004e7e <scalbn+0x86>
 8004e40:	460b      	mov	r3, r1
 8004e42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004e46:	3a36      	subs	r2, #54	@ 0x36
 8004e48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004e4c:	428e      	cmp	r6, r1
 8004e4e:	dd0a      	ble.n	8004e66 <scalbn+0x6e>
 8004e50:	a31b      	add	r3, pc, #108	@ (adr r3, 8004ec0 <scalbn+0xc8>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	4665      	mov	r5, ip
 8004e58:	f363 051e 	bfi	r5, r3, #0, #31
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	481c      	ldr	r0, [pc, #112]	@ (8004ed0 <scalbn+0xd8>)
 8004e60:	f7fb fb3a 	bl	80004d8 <__aeabi_dmul>
 8004e64:	e7e9      	b.n	8004e3a <scalbn+0x42>
 8004e66:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004e6a:	4432      	add	r2, r6
 8004e6c:	428a      	cmp	r2, r1
 8004e6e:	dcef      	bgt.n	8004e50 <scalbn+0x58>
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	dd08      	ble.n	8004e86 <scalbn+0x8e>
 8004e74:	f36f 531e 	bfc	r3, #20, #11
 8004e78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e7c:	46ac      	mov	ip, r5
 8004e7e:	4658      	mov	r0, fp
 8004e80:	4661      	mov	r1, ip
 8004e82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004e86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004e8a:	da09      	bge.n	8004ea0 <scalbn+0xa8>
 8004e8c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004e90:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004e94:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004e98:	480e      	ldr	r0, [pc, #56]	@ (8004ed4 <scalbn+0xdc>)
 8004e9a:	f041 011f 	orr.w	r1, r1, #31
 8004e9e:	e7c1      	b.n	8004e24 <scalbn+0x2c>
 8004ea0:	3236      	adds	r2, #54	@ 0x36
 8004ea2:	f36f 531e 	bfc	r3, #20, #11
 8004ea6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004eaa:	4658      	mov	r0, fp
 8004eac:	4629      	mov	r1, r5
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <scalbn+0xe0>)
 8004eb2:	e7d5      	b.n	8004e60 <scalbn+0x68>
 8004eb4:	f3af 8000 	nop.w
 8004eb8:	c2f8f359 	.word	0xc2f8f359
 8004ebc:	01a56e1f 	.word	0x01a56e1f
 8004ec0:	8800759c 	.word	0x8800759c
 8004ec4:	7e37e43c 	.word	0x7e37e43c
 8004ec8:	43500000 	.word	0x43500000
 8004ecc:	ffff3cb0 	.word	0xffff3cb0
 8004ed0:	8800759c 	.word	0x8800759c
 8004ed4:	c2f8f359 	.word	0xc2f8f359
 8004ed8:	3c900000 	.word	0x3c900000

08004edc <with_errno>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4604      	mov	r4, r0
 8004ee0:	460d      	mov	r5, r1
 8004ee2:	4616      	mov	r6, r2
 8004ee4:	f7ff f9be 	bl	8004264 <__errno>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	6006      	str	r6, [r0, #0]
 8004eec:	4620      	mov	r0, r4
 8004eee:	bd70      	pop	{r4, r5, r6, pc}

08004ef0 <xflow>:
 8004ef0:	b513      	push	{r0, r1, r4, lr}
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	b10c      	cbz	r4, 8004efe <xflow+0xe>
 8004efa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004efe:	e9cd 2300 	strd	r2, r3, [sp]
 8004f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f06:	f7fb fae7 	bl	80004d8 <__aeabi_dmul>
 8004f0a:	2222      	movs	r2, #34	@ 0x22
 8004f0c:	b002      	add	sp, #8
 8004f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f12:	f7ff bfe3 	b.w	8004edc <with_errno>

08004f16 <__math_uflow>:
 8004f16:	2200      	movs	r2, #0
 8004f18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f1c:	f7ff bfe8 	b.w	8004ef0 <xflow>

08004f20 <__math_oflow>:
 8004f20:	2200      	movs	r2, #0
 8004f22:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004f26:	f7ff bfe3 	b.w	8004ef0 <xflow>
	...

08004f2c <__ieee754_sqrt>:
 8004f2c:	4a65      	ldr	r2, [pc, #404]	@ (80050c4 <__ieee754_sqrt+0x198>)
 8004f2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f32:	438a      	bics	r2, r1
 8004f34:	4606      	mov	r6, r0
 8004f36:	460f      	mov	r7, r1
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	d10e      	bne.n	8004f5c <__ieee754_sqrt+0x30>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	f7fb faca 	bl	80004d8 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4630      	mov	r0, r6
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	f7fb f90e 	bl	800016c <__adddf3>
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	dc0c      	bgt.n	8004f7a <__ieee754_sqrt+0x4e>
 8004f60:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8004f64:	4302      	orrs	r2, r0
 8004f66:	d0f5      	beq.n	8004f54 <__ieee754_sqrt+0x28>
 8004f68:	b189      	cbz	r1, 8004f8e <__ieee754_sqrt+0x62>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	f7fb f8fc 	bl	8000168 <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	f7fb fbda 	bl	800072c <__aeabi_ddiv>
 8004f78:	e7ea      	b.n	8004f50 <__ieee754_sqrt+0x24>
 8004f7a:	150a      	asrs	r2, r1, #20
 8004f7c:	d115      	bne.n	8004faa <__ieee754_sqrt+0x7e>
 8004f7e:	2100      	movs	r1, #0
 8004f80:	e009      	b.n	8004f96 <__ieee754_sqrt+0x6a>
 8004f82:	0ae3      	lsrs	r3, r4, #11
 8004f84:	3a15      	subs	r2, #21
 8004f86:	0564      	lsls	r4, r4, #21
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0fa      	beq.n	8004f82 <__ieee754_sqrt+0x56>
 8004f8c:	e7f7      	b.n	8004f7e <__ieee754_sqrt+0x52>
 8004f8e:	460a      	mov	r2, r1
 8004f90:	e7fa      	b.n	8004f88 <__ieee754_sqrt+0x5c>
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	3101      	adds	r1, #1
 8004f96:	02d8      	lsls	r0, r3, #11
 8004f98:	d5fb      	bpl.n	8004f92 <__ieee754_sqrt+0x66>
 8004f9a:	1e48      	subs	r0, r1, #1
 8004f9c:	1a12      	subs	r2, r2, r0
 8004f9e:	f1c1 0020 	rsb	r0, r1, #32
 8004fa2:	fa24 f000 	lsr.w	r0, r4, r0
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	408c      	lsls	r4, r1
 8004faa:	2700      	movs	r7, #0
 8004fac:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8004fb0:	2116      	movs	r1, #22
 8004fb2:	07d2      	lsls	r2, r2, #31
 8004fb4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004fb8:	463a      	mov	r2, r7
 8004fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fc2:	bf5c      	itt	pl
 8004fc4:	005b      	lslpl	r3, r3, #1
 8004fc6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004fca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fce:	bf58      	it	pl
 8004fd0:	0064      	lslpl	r4, r4, #1
 8004fd2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004fd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004fda:	0064      	lsls	r4, r4, #1
 8004fdc:	1815      	adds	r5, r2, r0
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	bfde      	ittt	le
 8004fe2:	182a      	addle	r2, r5, r0
 8004fe4:	1b5b      	suble	r3, r3, r5
 8004fe6:	183f      	addle	r7, r7, r0
 8004fe8:	0fe5      	lsrs	r5, r4, #31
 8004fea:	3901      	subs	r1, #1
 8004fec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8004ff0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004ff4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004ff8:	d1f0      	bne.n	8004fdc <__ieee754_sqrt+0xb0>
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	2620      	movs	r6, #32
 8004ffe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005002:	4293      	cmp	r3, r2
 8005004:	eb00 0c01 	add.w	ip, r0, r1
 8005008:	dc02      	bgt.n	8005010 <__ieee754_sqrt+0xe4>
 800500a:	d113      	bne.n	8005034 <__ieee754_sqrt+0x108>
 800500c:	45a4      	cmp	ip, r4
 800500e:	d811      	bhi.n	8005034 <__ieee754_sqrt+0x108>
 8005010:	f1bc 0f00 	cmp.w	ip, #0
 8005014:	eb0c 0100 	add.w	r1, ip, r0
 8005018:	da3e      	bge.n	8005098 <__ieee754_sqrt+0x16c>
 800501a:	2900      	cmp	r1, #0
 800501c:	db3c      	blt.n	8005098 <__ieee754_sqrt+0x16c>
 800501e:	f102 0e01 	add.w	lr, r2, #1
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	4672      	mov	r2, lr
 8005026:	45a4      	cmp	ip, r4
 8005028:	bf88      	it	hi
 800502a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800502e:	eba4 040c 	sub.w	r4, r4, ip
 8005032:	4405      	add	r5, r0
 8005034:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005038:	3e01      	subs	r6, #1
 800503a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800503e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005042:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005046:	d1dc      	bne.n	8005002 <__ieee754_sqrt+0xd6>
 8005048:	431c      	orrs	r4, r3
 800504a:	d01a      	beq.n	8005082 <__ieee754_sqrt+0x156>
 800504c:	4c1e      	ldr	r4, [pc, #120]	@ (80050c8 <__ieee754_sqrt+0x19c>)
 800504e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80050cc <__ieee754_sqrt+0x1a0>
 8005052:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005056:	e9d9 2300 	ldrd	r2, r3, [r9]
 800505a:	f7fb f885 	bl	8000168 <__aeabi_dsub>
 800505e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4650      	mov	r0, sl
 8005068:	4659      	mov	r1, fp
 800506a:	f7fb fcb1 	bl	80009d0 <__aeabi_dcmple>
 800506e:	b140      	cbz	r0, 8005082 <__ieee754_sqrt+0x156>
 8005070:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005074:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005078:	f1b5 3fff 	cmp.w	r5, #4294967295
 800507c:	d10e      	bne.n	800509c <__ieee754_sqrt+0x170>
 800507e:	4635      	mov	r5, r6
 8005080:	3701      	adds	r7, #1
 8005082:	107b      	asrs	r3, r7, #1
 8005084:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005088:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800508c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8005090:	086b      	lsrs	r3, r5, #1
 8005092:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8005096:	e75b      	b.n	8004f50 <__ieee754_sqrt+0x24>
 8005098:	4696      	mov	lr, r2
 800509a:	e7c2      	b.n	8005022 <__ieee754_sqrt+0xf6>
 800509c:	f7fb f866 	bl	800016c <__adddf3>
 80050a0:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4650      	mov	r0, sl
 80050aa:	4659      	mov	r1, fp
 80050ac:	f7fb fc86 	bl	80009bc <__aeabi_dcmplt>
 80050b0:	b120      	cbz	r0, 80050bc <__ieee754_sqrt+0x190>
 80050b2:	1cab      	adds	r3, r5, #2
 80050b4:	bf08      	it	eq
 80050b6:	3701      	addeq	r7, #1
 80050b8:	3502      	adds	r5, #2
 80050ba:	e7e2      	b.n	8005082 <__ieee754_sqrt+0x156>
 80050bc:	1c6b      	adds	r3, r5, #1
 80050be:	f023 0501 	bic.w	r5, r3, #1
 80050c2:	e7de      	b.n	8005082 <__ieee754_sqrt+0x156>
 80050c4:	7ff00000 	.word	0x7ff00000
 80050c8:	08006648 	.word	0x08006648
 80050cc:	08006640 	.word	0x08006640

080050d0 <_init>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	bf00      	nop
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr

080050dc <_fini>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr
